#include<stdio.h>
#include"logger.h"

extern FILE *apilogfile;
extern FILE *coveragelogfile;
extern FILE *branchlogfile;

namespace WINDOWS{
#define _WINDOWS_H_PATH_
#include <windows.h>
#include <wincrypt.h>	
#include <LM.h>
#include <shellapi.h>
}

namespace LOGGER
{
	void start_logger(){
		char logname[1024];
		sprintf(logname,"C:\\Logs\\%d.api.log",WINDOWS::GetCurrentProcessId());
		apilogfile = fopen(logname,"w");
		sprintf(logname,"C:\\Logs\\%d.coverage.log",WINDOWS::GetCurrentProcessId());
		coveragelogfile = fopen(logname,"w");
		sprintf(logname,"C:\\Logs\\%d.branch.log",WINDOWS::GetCurrentProcessId());
		branchlogfile = fopen(logname,"w");
	}

	void starting_banner(){
		fprintf(apilogfile,"Starting...\r\n");
		fprintf(coveragelogfile,"Starting...\r\n");
		fprintf(branchlogfile,"Starting...\r\n");
	}

	void finishing_banner(){
		fprintf(apilogfile,"Finishing...\r\n");
		fprintf(coveragelogfile,"Finishing...\r\n");
		fprintf(branchlogfile,"Finishing...\r\n");
	}

	void stats_instr(UINT64 data)
	{
		fprintf(coveragelogfile,"TOTAL INSTRS: %d\r\n",data);
	}

	void stats_branch(UINT64 data)
	{
		fprintf(coveragelogfile,"TOTAL BRANCHES: %d\r\n",data);
	}

	void log_dll(const char *msg)
	{
		fprintf(apilogfile,"%s\r\n",msg);
	}

	void log_PC(UINT32 data)
	{
		fprintf(coveragelogfile,"%x\r\n",data);
	}

	void log_Branch(UINT32 data, UINT64 idx, int original, int taken)
	{
		char msg[1024];
		if (original)
		{
			if(taken)
			{
				sprintf(msg,"Branch %x %d [1] -> [1]\r\n", data, idx);
			}else{
				sprintf(msg,"Branch %x %d [1] -> [0] (INVERTED)\r\n", data, idx);
			}	
		}else{
			if(taken)
			{
				sprintf(msg,"Branch %x %d [0] -> [1] (INVERTED)\r\n", data, idx);
			}else{
				sprintf(msg,"Branch %x %d [0] -> [0]\r\n", data, idx);
			}	
		}
		fprintf(branchlogfile,msg);
	}

	void info_msg(char msg[])
	{
		fprintf(apilogfile,"[INFO] %s\r\n",msg);
	}

	void timeout_msg()
	{
		fprintf(apilogfile,"[TIMEOUT] Finishing...\r\n");
	}

	void info_return(char api[], int ret){
		fprintf(apilogfile,"[INFO] %s = %x\r\n",api, ret);
	}
}