#include "pin.H"

#include "logger.h"
#include "fuzzer.h"

namespace WINDOWS{
#define _WINDOWS_H_PATH_
#include <windows.h>
#include <wincrypt.h>	
#include <LM.h>
#include <shellapi.h>
}

UINT64 ins_count = 0;
UINT64 branch_count = 0;
FILE *apilogfile;
FILE *coveragelogfile;
FILE *branchlogfile;

FILE *fuzzfile;
int number=-1;
int direction=1;

#define MAX_INST 1000*1000*1000
//#define RANDOM (!main_exe) || (main_exe && (rand()%10)>=10)
#define RANDOM 1
#define BRANCHRAND (rand()%10)>=0

#define NORMAL 1
#define INVERTED 0

BOOL main_exe = FALSE;

void print_stats()
{
	LOGGER::stats_instr(ins_count);
	LOGGER::stats_branch(branch_count);
}

VOID branch_handler(ADDRINT PC, ADDRINT size, ADDRINT TARGET, BOOL taken, CONTEXT *ctx)
{
	PIN_LockClient();
	IMG img = IMG_FindByAddress(PC);
	if(IMG_Valid(img)){
		main_exe = IMG_IsMainExecutable(img);
		std::string name = IMG_Name(img);
		const char *cstr = name.c_str();
		if (main_exe)
		{
			//LOGGER::log_dll(cstr);
			LOGGER::log_PC(PC-IMG_LowAddress(img));
			if(branch_count == number){
			//if(branch_count > 27 && BRANCHRAND){
				// First, log
				int direction_to_take = direction;
				//int direction_to_take = !taken;
				LOGGER::log_Branch(PC-IMG_LowAddress(img),branch_count,taken,direction_to_take);
				// Update stats
				++ins_count;
				++branch_count;
				// unlock pin
				PIN_UnlockClient();
				// Update fuzzer
				FUZZER::get_next(&number,&direction);
				// Then branch
				if(direction_to_take)
				{
					PIN_SetContextReg(ctx,REG_EIP,TARGET);
				}else{
					// not taken
					PIN_SetContextReg(ctx,REG_INST_PTR,PC+size);
				}
				PIN_ExecuteAt(ctx);
			}else{
				LOGGER::log_Branch(PC-IMG_LowAddress(img),branch_count,taken,taken);
				++ins_count;
				++branch_count;
			}
		}
	}
	PIN_UnlockClient();

}

VOID instruction_watchdog(ADDRINT PC)
{
	//LOGGER::log_PC(PC);

	PIN_LockClient();
	IMG img = IMG_FindByAddress(PC);
	if(IMG_Valid(img)){
		main_exe = IMG_IsMainExecutable(img);
		std::string name = IMG_Name(img);
		const char *cstr = name.c_str();
		if (name.find(".dll")==std::string::npos && name.find(".DLL")==std::string::npos)
		{
			//LOGGER::log_dll(cstr);
			LOGGER::log_PC(PC-IMG_LowAddress(img));
			if(++ins_count>MAX_INST)
			{
				LOGGER::timeout_msg();
				print_stats();
				exit(0);
			}
		}
	}
	PIN_UnlockClient();
}

VOID Instruction(INS ins, VOID *v)
{
	if(INS_IsBranch(ins)) // || INS_HasFallThrough(ins))
	{
		INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)branch_handler, IARG_INST_PTR, IARG_ADDRINT, INS_Size(ins), IARG_BRANCH_TARGET_ADDR, IARG_BRANCH_TAKEN, IARG_CONTEXT, IARG_END);
	}else{
		INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)instruction_watchdog, IARG_INST_PTR, IARG_END);
	}
}

VOID Fini(INT32 code, VOID *v)
{
	print_stats();
	LOGGER::finishing_banner();
}

BOOL replacement_IsProcessorFeaturePresent(AFUNPTR pfnIsProcessorFeaturePresent, WINDOWS::DWORD ProcessorFeature,
										   CONTEXT * ctxt)
{
	LOGGER::info_msg("IsProcessorFeaturePresent:before");
	BOOL result;
	if(RANDOM){
		PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
			CALLINGSTD_STDCALL, pfnIsProcessorFeaturePresent, NULL,
			PIN_PARG(BOOL), &result,
			PIN_PARG(WINDOWS::DWORD), ProcessorFeature,
			PIN_PARG_END() );
		LOGGER::info_msg("IsProcessorFeaturePresent:original");
	}else{
		result = FALSE;
		LOGGER::info_msg("IsProcessorFeaturePresent:hooked");
	}
	LOGGER::info_msg("IsProcessorFeaturePresent:after");
	return result;
}

BOOL replacement_CryptEncrypt(AFUNPTR pfnCryptEncrypt, WINDOWS::HCRYPTKEY hKey,
							  WINDOWS::HCRYPTHASH hHash,
							  WINDOWS::BOOL Final,
							  WINDOWS::DWORD dwFlags,
							  WINDOWS::BYTE *pbData,
							  WINDOWS::DWORD *pdwDataLen,
							  WINDOWS::DWORD dwBufLen,
							  CONTEXT * ctxt)
{
	LOGGER::info_msg("CryptEncrypt:before");
	BOOL result;
	if(RANDOM){
		PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
			CALLINGSTD_STDCALL, pfnCryptEncrypt, NULL,
			PIN_PARG(BOOL), &result,
			PIN_PARG(WINDOWS::HCRYPTKEY), hKey,
			PIN_PARG(WINDOWS::HCRYPTHASH), hHash,
			PIN_PARG(WINDOWS::BOOL), Final,
			PIN_PARG(WINDOWS::DWORD), dwFlags,
			PIN_PARG(WINDOWS::PBYTE), pbData,
			PIN_PARG(WINDOWS::PDWORD), pdwDataLen,
			PIN_PARG(WINDOWS::DWORD), dwBufLen,
			PIN_PARG_END() );
	}else{
		result = FALSE;
	}
	LOGGER::info_msg("CryptEncrypt:after");
	return result;
}

BOOL replacement_CryptDecrypt(AFUNPTR pfnCryptDecrypt, WINDOWS::HCRYPTKEY hKey,
							  WINDOWS::HCRYPTHASH hHash,
							  WINDOWS::BOOL Final,
							  WINDOWS::DWORD dwFlags,
							  WINDOWS::BYTE *pbData,
							  WINDOWS::DWORD *pdwDataLen,
							  CONTEXT * ctxt)
{
	LOGGER::info_msg("CryptDecrypt:before");
	BOOL result;
	if(RANDOM){
		PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
			CALLINGSTD_STDCALL, pfnCryptDecrypt, NULL,
			PIN_PARG(BOOL), &result,
			PIN_PARG(WINDOWS::HCRYPTKEY), hKey,
			PIN_PARG(WINDOWS::HCRYPTHASH), hHash,
			PIN_PARG(WINDOWS::BOOL), Final,
			PIN_PARG(WINDOWS::DWORD), dwFlags,
			PIN_PARG(WINDOWS::PBYTE), pbData,
			PIN_PARG(WINDOWS::PDWORD), pdwDataLen,
			PIN_PARG_END() );
	}else{
		result = FALSE;
	}
	LOGGER::info_msg("CryptDecrypt:after");
	return result;
}

BOOL replacement_CertControlStore(AFUNPTR pfnCertControlStore, WINDOWS::HCERTSTORE hCertStore,
								  WINDOWS::DWORD dwFlags,
								  WINDOWS::DWORD dwCtrlType,
								  WINDOWS::PVOID pvCtrlPara,
								  CONTEXT * ctxt)
{
	LOGGER::info_msg("CertControlStore:before");
	BOOL result;
	if(RANDOM){
		PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
			CALLINGSTD_STDCALL, pfnCertControlStore, NULL,
			PIN_PARG(BOOL), &result,
			PIN_PARG(WINDOWS::HCERTSTORE), hCertStore,
			PIN_PARG(WINDOWS::DWORD), dwFlags,
			PIN_PARG(WINDOWS::DWORD), dwCtrlType,
			PIN_PARG(WINDOWS::PVOID), pvCtrlPara,
			PIN_PARG_END() );
	}else{
		result = FALSE;
	}
	LOGGER::info_msg("CertControlStore:after");
	return result;
}

WINDOWS::PCCERT_CONTEXT replacement_CertCreateCertificateContext(AFUNPTR pfnCertCreateCertificateContext, WINDOWS::DWORD dwCertEncodingType,
																 WINDOWS::BYTE *pbCertEncoded,
																 WINDOWS::DWORD cbCertEncoded,
																 CONTEXT * ctxt)
{
	LOGGER::info_msg("CertCreateCertificateContext:before");
	WINDOWS::PCCERT_CONTEXT result;
	if(RANDOM){
		PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
			CALLINGSTD_STDCALL, pfnCertCreateCertificateContext, NULL,
			PIN_PARG(WINDOWS::PCCERT_CONTEXT), &result,
			PIN_PARG(WINDOWS::DWORD), dwCertEncodingType,
			PIN_PARG(WINDOWS::PBYTE), pbCertEncoded,
			PIN_PARG(WINDOWS::DWORD), cbCertEncoded,
			PIN_PARG_END() );
	}else{
		result = FALSE;
	}
	LOGGER::info_msg("CertCreateCertificateContext:after");
	return result;
}

WINDOWS::HCERTSTORE replacement_CertOpenStore(AFUNPTR pfnCertOpenStore, WINDOWS::LPCSTR lpszStoreProvider,
											  WINDOWS::DWORD dwEncodingType,
											  WINDOWS::HCRYPTPROV_LEGACY hCryptProv,
											  WINDOWS::DWORD dwFlags,
											  WINDOWS::PVOID pvPara,
											  CONTEXT * ctxt)
{
	LOGGER::info_msg("CertOpenStore:before");
	WINDOWS::HCERTSTORE result;
	if(RANDOM){
		PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
			CALLINGSTD_STDCALL, pfnCertOpenStore, NULL,
			PIN_PARG(WINDOWS::HCERTSTORE), &result,
			PIN_PARG(WINDOWS::LPCSTR), lpszStoreProvider,
			PIN_PARG(WINDOWS::DWORD), dwEncodingType,
			PIN_PARG(WINDOWS::HCRYPTPROV_LEGACY), hCryptProv,
			PIN_PARG(WINDOWS::DWORD), dwFlags,
			PIN_PARG(WINDOWS::PVOID), pvPara,
			PIN_PARG_END() );
	}else{
		result = FALSE;
	}
	LOGGER::info_msg("CertOpenStore:after");
	return result;
}

WINDOWS::HCERTSTORE replacement_CertOpenSystemStoreA(AFUNPTR pfnCertOpenSystemStoreA, WINDOWS::HCRYPTPROV_LEGACY hProv,
													 WINDOWS::LPCSTR szSubsystemProtocol,
													 CONTEXT * ctxt)
{
	LOGGER::info_msg("CertOpenSystemStoreA:before");
	WINDOWS::HCERTSTORE result;
	if(RANDOM){
		PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
			CALLINGSTD_STDCALL, pfnCertOpenSystemStoreA, NULL,
			PIN_PARG(WINDOWS::HCERTSTORE), &result,
			PIN_PARG(WINDOWS::HCRYPTPROV_LEGACY), hProv,
			PIN_PARG(WINDOWS::LPCSTR), szSubsystemProtocol,
			PIN_PARG_END() );
	}else{
		result = FALSE;
	}
	LOGGER::info_msg("CertOpenSystemStoreA:after");
	return result;
}

WINDOWS::HCERTSTORE replacement_CertOpenSystemStoreW(AFUNPTR pfnCertOpenSystemStoreW, WINDOWS::HCRYPTPROV_LEGACY hProv,
													 WINDOWS::LPCWSTR szSubsystemProtocol,
													 CONTEXT * ctxt)
{
	LOGGER::info_msg("CertOpenSystemStoreW:before");
	WINDOWS::HCERTSTORE result;
	if(RANDOM){
		PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
			CALLINGSTD_STDCALL, pfnCertOpenSystemStoreW, NULL,
			PIN_PARG(WINDOWS::HCERTSTORE), &result,
			PIN_PARG(WINDOWS::HCRYPTPROV_LEGACY), hProv,
			PIN_PARG(WINDOWS::LPCWSTR), szSubsystemProtocol,
			PIN_PARG_END() );
	}else{
		result = FALSE;
	}
	LOGGER::info_msg("CertOpenSystemStoreW:after");
	return result;
}

WINDOWS::BOOL replacement_CryptAcquireContextA(AFUNPTR pfnCryptAcquireContextA, WINDOWS::HCRYPTPROV *phProv,
											   WINDOWS::LPCSTR szContainer,
											   WINDOWS::LPCSTR szProvider,
											   WINDOWS::DWORD dwProvType,
											   WINDOWS::DWORD dwFlags,
											   CONTEXT * ctxt)
{
	LOGGER::info_msg("CryptAcquireContextA:before");
	WINDOWS::BOOL result;
	if(RANDOM){
		PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
			CALLINGSTD_STDCALL, pfnCryptAcquireContextA, NULL,
			PIN_PARG(WINDOWS::BOOL), &result,
			PIN_PARG(WINDOWS::HCRYPTPROV*), phProv,
			PIN_PARG(WINDOWS::LPCSTR), szContainer,
			PIN_PARG(WINDOWS::LPCSTR), szProvider,
			PIN_PARG(WINDOWS::DWORD), dwProvType,
			PIN_PARG(WINDOWS::DWORD), dwFlags,
			PIN_PARG_END() );
	}else{
		result = FALSE;
	}
	LOGGER::info_msg("CryptAcquireContextA:after");
	return result;
}

WINDOWS::BOOL replacement_CryptAcquireContextW(AFUNPTR pfnCryptAcquireContextW, WINDOWS::HCRYPTPROV *phProv,
											   WINDOWS::LPCWSTR szContainer,
											   WINDOWS::LPCWSTR szProvider,
											   WINDOWS::DWORD dwProvType,
											   WINDOWS::DWORD dwFlags,
											   CONTEXT * ctxt)
{
	LOGGER::info_msg("CryptAcquireContextW:before");
	WINDOWS::BOOL result;
	if(RANDOM){
		PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
			CALLINGSTD_STDCALL, pfnCryptAcquireContextW, NULL,
			PIN_PARG(WINDOWS::BOOL), &result,
			PIN_PARG(WINDOWS::HCRYPTPROV*), phProv,
			PIN_PARG(WINDOWS::LPCWSTR), szContainer,
			PIN_PARG(WINDOWS::LPCWSTR), szProvider,
			PIN_PARG(WINDOWS::DWORD), dwProvType,
			PIN_PARG(WINDOWS::DWORD), dwFlags,
			PIN_PARG_END() );
	}else{
		result = FALSE;
	}
	LOGGER::info_msg("CryptAcquireContextW:after");
	return result;
}

WINDOWS::BOOL replacement_CryptCreateHash(AFUNPTR pfnCryptCreateHash, WINDOWS::HCRYPTPROV hProv,
										  WINDOWS::ALG_ID Algid,
										  WINDOWS::HCRYPTKEY hKey,
										  WINDOWS::DWORD dwFlags,
										  WINDOWS::HCRYPTHASH *phHash,
										  CONTEXT * ctxt)
{
	LOGGER::info_msg("CryptCreateHash:before");
	WINDOWS::BOOL result;
	if(RANDOM){
		PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
			CALLINGSTD_STDCALL, pfnCryptCreateHash, NULL,
			PIN_PARG(WINDOWS::BOOL), &result,
			PIN_PARG(WINDOWS::HCRYPTPROV), hProv,
			PIN_PARG(WINDOWS::ALG_ID), Algid,
			PIN_PARG(WINDOWS::HCRYPTKEY), hKey,
			PIN_PARG(WINDOWS::DWORD), dwFlags,
			PIN_PARG(WINDOWS::HCRYPTHASH*), phHash,
			PIN_PARG_END() );
	}else{
		result = FALSE;
	}
	LOGGER::info_msg("CryptCreateHash:after");
	return result;
}

WINDOWS::BOOL replacement_CryptExportKey(AFUNPTR pfnCryptExportKey, WINDOWS::HCRYPTKEY hKey,
WINDOWS::HCRYPTKEY hExpKey,
WINDOWS::DWORD dwBlobType,
WINDOWS::DWORD dwFlags,
WINDOWS::BYTE *pbData,
WINDOWS::DWORD *pdwDataLen,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CryptExportKey:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCryptExportKey, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::HCRYPTKEY), hKey,
      PIN_PARG(WINDOWS::HCRYPTKEY), hExpKey,
      PIN_PARG(WINDOWS::DWORD), dwBlobType,
      PIN_PARG(WINDOWS::DWORD), dwFlags,
      PIN_PARG(WINDOWS::PBYTE), pbData,
      PIN_PARG(WINDOWS::PDWORD), pdwDataLen,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CryptExportKey:after");
  return result;
}

WINDOWS::BOOL replacement_CryptGenKey(AFUNPTR pfnCryptGenKey, WINDOWS::HCRYPTPROV hProv,
WINDOWS::ALG_ID Algid,
WINDOWS::DWORD dwFlags,
WINDOWS::HCRYPTKEY *phKey,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CryptGenKey:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCryptGenKey, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::HCRYPTPROV), hProv,
      PIN_PARG(WINDOWS::ALG_ID), Algid,
      PIN_PARG(WINDOWS::DWORD), dwFlags,
      PIN_PARG(WINDOWS::HCRYPTKEY*), phKey,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CryptGenKey:after");
  return result;
}

WINDOWS::BOOL replacement_CryptHashData(AFUNPTR pfnCryptHashData, WINDOWS::HCRYPTHASH hHash,
WINDOWS::BYTE *pbData,
WINDOWS::DWORD dwDataLen,
WINDOWS::DWORD dwFlags,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CryptHashData:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCryptHashData, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::HCRYPTHASH), hHash,
      PIN_PARG(WINDOWS::PBYTE), pbData,
      PIN_PARG(WINDOWS::DWORD), dwDataLen,
      PIN_PARG(WINDOWS::DWORD), dwFlags,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CryptHashData:after");
  return result;
}

WINDOWS::BOOL replacement_CryptDecodeMessage(AFUNPTR pfnCryptDecodeMessage, WINDOWS::DWORD dwMsgTypeFlags,
WINDOWS::PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
WINDOWS::PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
WINDOWS::DWORD dwSignerIndex,
WINDOWS::BYTE *pbEncodedBlob,
WINDOWS::DWORD cbEncodedBlob,
WINDOWS::DWORD dwPrevInnerContentType,
WINDOWS::DWORD *pdwMsgType,
WINDOWS::DWORD *pdwInnerContentType,
WINDOWS::BYTE *pbDecoded,
WINDOWS::DWORD *pcbDecoded,
WINDOWS::PCCERT_CONTEXT *ppXchgCert,
WINDOWS::PCCERT_CONTEXT *ppSignerCert,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CryptDecodeMessage:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCryptDecodeMessage, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::DWORD), dwMsgTypeFlags,
      PIN_PARG(WINDOWS::PCRYPT_DECRYPT_MESSAGE_PARA), pDecryptPara,
      PIN_PARG(WINDOWS::PCRYPT_VERIFY_MESSAGE_PARA), pVerifyPara,
      PIN_PARG(WINDOWS::DWORD), dwSignerIndex,
      PIN_PARG(WINDOWS::PBYTE), pbEncodedBlob,
      PIN_PARG(WINDOWS::DWORD), cbEncodedBlob,
      PIN_PARG(WINDOWS::DWORD), dwPrevInnerContentType,
      PIN_PARG(WINDOWS::PDWORD), pdwMsgType,
      PIN_PARG(WINDOWS::PDWORD), pdwInnerContentType,
      PIN_PARG(WINDOWS::PBYTE), pbDecoded,
      PIN_PARG(WINDOWS::PDWORD), pcbDecoded,
      PIN_PARG(WINDOWS::PCCERT_CONTEXT*), ppXchgCert,
      PIN_PARG(WINDOWS::PCCERT_CONTEXT*), ppSignerCert,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CryptDecodeMessage:after");
  return result;
}

WINDOWS::BOOL replacement_CryptDecodeObjectEx(AFUNPTR pfnCryptDecodeObjectEx, WINDOWS::DWORD dwCertEncodingType,
WINDOWS::LPCSTR lpszStructType,
WINDOWS::BYTE *pbEncoded,
WINDOWS::DWORD cbEncoded,
WINDOWS::DWORD dwFlags,
WINDOWS::PCRYPT_DECODE_PARA pDecodePara,
WINDOWS::PVOID pvStructInfo,
WINDOWS::DWORD *pcbStructInfo,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CryptDecodeObjectEx:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCryptDecodeObjectEx, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::DWORD), dwCertEncodingType,
      PIN_PARG(WINDOWS::LPCSTR), lpszStructType,
      PIN_PARG(WINDOWS::PBYTE), pbEncoded,
      PIN_PARG(WINDOWS::DWORD), cbEncoded,
      PIN_PARG(WINDOWS::DWORD), dwFlags,
      PIN_PARG(WINDOWS::PCRYPT_DECODE_PARA), pDecodePara,
      PIN_PARG(WINDOWS::PVOID), pvStructInfo,
      PIN_PARG(WINDOWS::PDWORD), pcbStructInfo,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CryptDecodeObjectEx:after");
  return result;
}

WINDOWS::BOOL replacement_CryptDecryptMessage(AFUNPTR pfnCryptDecryptMessage, WINDOWS::PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
WINDOWS::BYTE *pbEncryptedBlob,
WINDOWS::DWORD cbEncryptedBlob,
WINDOWS::BYTE *pbDecrypted,
WINDOWS::DWORD *pcbDecrypted,
WINDOWS::PCCERT_CONTEXT *ppXchgCert,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CryptDecryptMessage:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCryptDecryptMessage, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::PCRYPT_DECRYPT_MESSAGE_PARA), pDecryptPara,
      PIN_PARG(WINDOWS::PBYTE), pbEncryptedBlob,
      PIN_PARG(WINDOWS::DWORD), cbEncryptedBlob,
      PIN_PARG(WINDOWS::PBYTE), pbDecrypted,
      PIN_PARG(WINDOWS::PDWORD), pcbDecrypted,
      PIN_PARG(WINDOWS::PCCERT_CONTEXT*), ppXchgCert,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CryptDecryptMessage:after");
  return result;
}

WINDOWS::BOOL replacement_CryptEncryptMessage(AFUNPTR pfnCryptEncryptMessage, WINDOWS::PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
WINDOWS::DWORD cRecipientCert,
WINDOWS::PCCERT_CONTEXT* rgpRecipientCert,
WINDOWS::BYTE *pbToBeEncrypted,
WINDOWS::DWORD cbToBeEncrypted,
WINDOWS::BYTE *pbEncryptedBlob,
WINDOWS::DWORD *pcbEncryptedBlob,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CryptEncryptMessage:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCryptEncryptMessage, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::PCRYPT_ENCRYPT_MESSAGE_PARA), pEncryptPara,
      PIN_PARG(WINDOWS::DWORD), cRecipientCert,
      PIN_PARG(WINDOWS::PCCERT_CONTEXT*), rgpRecipientCert,
      PIN_PARG(WINDOWS::PBYTE), pbToBeEncrypted,
      PIN_PARG(WINDOWS::DWORD), cbToBeEncrypted,
      PIN_PARG(WINDOWS::PBYTE), pbEncryptedBlob,
      PIN_PARG(WINDOWS::PDWORD), pcbEncryptedBlob,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CryptEncryptMessage:after");
  return result;
}

WINDOWS::BOOL replacement_CryptHashMessage(AFUNPTR pfnCryptHashMessage, WINDOWS::PCRYPT_HASH_MESSAGE_PARA pHashPara,
WINDOWS::BOOL fDetachedHash,
WINDOWS::DWORD cToBeHashed,
WINDOWS::PBYTE rgpbToBeHashed,
WINDOWS::PDWORD rgcbToBeHashed,
WINDOWS::BYTE *pbHashedBlob,
WINDOWS::DWORD *pcbHashedBlob,
WINDOWS::BYTE *pbComputedHash,
WINDOWS::DWORD *pcbComputedHash,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CryptHashMessage:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCryptHashMessage, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::PCRYPT_HASH_MESSAGE_PARA), pHashPara,
      PIN_PARG(WINDOWS::BOOL), fDetachedHash,
      PIN_PARG(WINDOWS::DWORD), cToBeHashed,
      PIN_PARG(WINDOWS::PBYTE), rgpbToBeHashed,
      PIN_PARG(WINDOWS::PDWORD), rgcbToBeHashed,
      PIN_PARG(WINDOWS::PBYTE), pbHashedBlob,
      PIN_PARG(WINDOWS::PDWORD), pcbHashedBlob,
      PIN_PARG(WINDOWS::PBYTE), pbComputedHash,
      PIN_PARG(WINDOWS::PDWORD), pcbComputedHash,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CryptHashMessage:after");
  return result;
}
      
WINDOWS::DWORD replacement_NetGetJoinInformation(AFUNPTR pfnNetGetJoinInformation, WINDOWS::LPCWSTR lpServer,
WINDOWS::LPWSTR *lpNameBuffer,
WINDOWS::PNETSETUP_JOIN_STATUS BufferType,
CONTEXT * ctxt)
{
  LOGGER::info_msg("NetGetJoinInformation:before");
  WINDOWS::DWORD result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnNetGetJoinInformation, NULL,
      PIN_PARG(WINDOWS::NET_API_STATUS), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpServer,
      PIN_PARG(WINDOWS::LPWSTR*), lpNameBuffer,
      PIN_PARG(WINDOWS::PNETSETUP_JOIN_STATUS), BufferType,
      PIN_PARG_END() );
  }else{
    result = 0x1234;
  }
  LOGGER::info_msg("NetGetJoinInformation:after");
  return result;
}

WINDOWS::NET_API_STATUS replacement_NetShareEnum(AFUNPTR pfnNetShareEnum, WINDOWS::LMSTR servername,
WINDOWS::DWORD level,
WINDOWS::LPBYTE *bufptr,
WINDOWS::DWORD prefmaxlen,
WINDOWS::LPDWORD entriesread,
WINDOWS::LPDWORD totalentries,
WINDOWS::LPDWORD resume_handle,
CONTEXT * ctxt)
{
  LOGGER::info_msg("NetShareEnum:before");
  WINDOWS::NET_API_STATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnNetShareEnum, NULL,
      PIN_PARG(WINDOWS::NET_API_STATUS), &result,
      PIN_PARG(WINDOWS::LMSTR), servername,
      PIN_PARG(WINDOWS::DWORD), level,
      PIN_PARG(WINDOWS::LPBYTE*), bufptr,
      PIN_PARG(WINDOWS::DWORD), prefmaxlen,
      PIN_PARG(WINDOWS::LPDWORD), entriesread,
      PIN_PARG(WINDOWS::LPDWORD), totalentries,
      PIN_PARG(WINDOWS::LPDWORD), resume_handle,
      PIN_PARG_END() );
  }else{
    result = 0x1234;
  }
  LOGGER::info_msg("NetShareEnum:after");
  return result;
}

WINDOWS::NET_API_STATUS replacement_NetUserGetInfo(AFUNPTR pfnNetUserGetInfo, WINDOWS::LPCWSTR servername,
WINDOWS::LPCWSTR username,
WINDOWS::DWORD level,
WINDOWS::LPBYTE *bufptr,
CONTEXT * ctxt)
{
  LOGGER::info_msg("NetUserGetInfo:before");
  WINDOWS::NET_API_STATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnNetUserGetInfo, NULL,
      PIN_PARG(WINDOWS::NET_API_STATUS), &result,
      PIN_PARG(WINDOWS::LPCWSTR), servername,
      PIN_PARG(WINDOWS::LPCWSTR), username,
      PIN_PARG(WINDOWS::DWORD), level,
      PIN_PARG(WINDOWS::LPBYTE*), bufptr,
      PIN_PARG_END() );
  }else{
    result = 0x1234;
  }
  LOGGER::info_msg("NetUserGetInfo:after");
  return result;
}

WINDOWS::NET_API_STATUS replacement_NetUserGetLocalGroups(AFUNPTR pfnNetUserGetLocalGroups, WINDOWS::LPCWSTR servername,
WINDOWS::LPCWSTR username,
WINDOWS::DWORD level,
WINDOWS::DWORD flags,
WINDOWS::LPBYTE *bufptr,
WINDOWS::DWORD prefmaxlen,
WINDOWS::LPDWORD entriesread,
WINDOWS::LPDWORD totalentries,
CONTEXT * ctxt)
{
  LOGGER::info_msg("NetUserGetLocalGroups:before");
  WINDOWS::NET_API_STATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnNetUserGetLocalGroups, NULL,
      PIN_PARG(WINDOWS::NET_API_STATUS), &result,
      PIN_PARG(WINDOWS::LPCWSTR), servername,
      PIN_PARG(WINDOWS::LPCWSTR), username,
      PIN_PARG(WINDOWS::DWORD), level,
      PIN_PARG(WINDOWS::DWORD), flags,
      PIN_PARG(WINDOWS::LPBYTE*), bufptr,
      PIN_PARG(WINDOWS::DWORD), prefmaxlen,
      PIN_PARG(WINDOWS::LPDWORD), entriesread,
      PIN_PARG(WINDOWS::LPDWORD), totalentries,
      PIN_PARG_END() );
  }else{
    result = 0x1234;
  }
  LOGGER::info_msg("NetUserGetLocalGroups:after");
  return result;
}

WINDOWS::HRSRC replacement_FindResourceA(AFUNPTR pfnFindResourceA, WINDOWS::HMODULE hModule,
WINDOWS::LPCSTR lpName,
WINDOWS::LPCSTR lpType,
CONTEXT * ctxt)
{
  LOGGER::info_msg("FindResourceA:before");
  WINDOWS::HRSRC result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnFindResourceA, NULL,
      PIN_PARG(WINDOWS::HRSRC), &result,
      PIN_PARG(WINDOWS::HMODULE), hModule,
      PIN_PARG(WINDOWS::LPCSTR), lpName,
      PIN_PARG(WINDOWS::LPCSTR), lpType,
      PIN_PARG_END() );
  }else{
    result = NULL;
  }
  LOGGER::info_msg("FindResourceA:after");
  return result;
}

WINDOWS::HRSRC replacement_FindResourceExA(AFUNPTR pfnFindResourceExA, WINDOWS::HMODULE hModule,
WINDOWS::LPCSTR lpType,
WINDOWS::LPCSTR lpName,
WINDOWS::WORD wLanguage,
CONTEXT * ctxt)
{
  LOGGER::info_msg("FindResourceExA:before");
  WINDOWS::HRSRC result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnFindResourceExA, NULL,
      PIN_PARG(WINDOWS::HRSRC), &result,
      PIN_PARG(WINDOWS::HMODULE), hModule,
      PIN_PARG(WINDOWS::LPCSTR), lpType,
      PIN_PARG(WINDOWS::LPCSTR), lpName,
      PIN_PARG(WINDOWS::WORD), wLanguage,
      PIN_PARG_END() );
  }else{
    result = NULL;
  }
  LOGGER::info_msg("FindResourceExA:after");
  return result;
}

WINDOWS::HGLOBAL replacement_LoadResource(AFUNPTR pfnLoadResource, WINDOWS::HMODULE hModule,
WINDOWS::HRSRC hResInfo,
CONTEXT * ctxt)
{
  LOGGER::info_msg("LoadResource:before");
  WINDOWS::HGLOBAL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnLoadResource, NULL,
      PIN_PARG(WINDOWS::HGLOBAL), &result,
      PIN_PARG(WINDOWS::HMODULE), hModule,
      PIN_PARG(WINDOWS::HRSRC), hResInfo,
      PIN_PARG_END() );
  }else{
    result = NULL;
  }
  LOGGER::info_msg("LoadResource:after");
  return result;
}

WINDOWS::BOOL replacement_ControlService(AFUNPTR pfnControlService, WINDOWS::SC_HANDLE hService,
WINDOWS::DWORD dwControl,
WINDOWS::LPSERVICE_STATUS lpServiceStatus,
CONTEXT * ctxt)
{
  LOGGER::info_msg("ControlService:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnControlService, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::SC_HANDLE), hService,
      PIN_PARG(WINDOWS::DWORD), dwControl,
      PIN_PARG(WINDOWS::LPSERVICE_STATUS), lpServiceStatus,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("ControlService:after");
  return result;
}

WINDOWS::SC_HANDLE replacement_CreateServiceA(AFUNPTR pfnCreateServiceA, WINDOWS::SC_HANDLE hSCManager,
WINDOWS::LPCSTR lpServiceName,
WINDOWS::LPCSTR lpDisplayName,
WINDOWS::DWORD dwDesiredAccess,
WINDOWS::DWORD dwServiceType,
WINDOWS::DWORD dwStartType,
WINDOWS::DWORD dwErrorControl,
WINDOWS::LPCSTR lpBinaryPathName,
WINDOWS::LPCSTR lpLoadOrderGroup,
WINDOWS::LPDWORD lpdwTagId,
WINDOWS::LPCSTR lpDependencies,
WINDOWS::LPCSTR lpServiceStartName,
WINDOWS::LPCSTR lpPassword,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CreateServiceA:before");
  WINDOWS::SC_HANDLE result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCreateServiceA, NULL,
      PIN_PARG(WINDOWS::SC_HANDLE), &result,
      PIN_PARG(WINDOWS::SC_HANDLE), hSCManager,
      PIN_PARG(WINDOWS::LPCSTR), lpServiceName,
      PIN_PARG(WINDOWS::LPCSTR), lpDisplayName,
      PIN_PARG(WINDOWS::DWORD), dwDesiredAccess,
      PIN_PARG(WINDOWS::DWORD), dwServiceType,
      PIN_PARG(WINDOWS::DWORD), dwStartType,
      PIN_PARG(WINDOWS::DWORD), dwErrorControl,
      PIN_PARG(WINDOWS::LPCSTR), lpBinaryPathName,
      PIN_PARG(WINDOWS::LPCSTR), lpLoadOrderGroup,
      PIN_PARG(WINDOWS::LPDWORD), lpdwTagId,
      PIN_PARG(WINDOWS::LPCSTR), lpDependencies,
      PIN_PARG(WINDOWS::LPCSTR), lpServiceStartName,
      PIN_PARG(WINDOWS::LPCSTR), lpPassword,
      PIN_PARG_END() );
  }else{
    result = NULL;
  }
  LOGGER::info_msg("CreateServiceA:after");
  return result;
}

WINDOWS::SC_HANDLE replacement_CreateServiceW(AFUNPTR pfnCreateServiceW, WINDOWS::SC_HANDLE hSCManager,
WINDOWS::LPCWSTR lpServiceName,
WINDOWS::LPCWSTR lpDisplayName,
WINDOWS::DWORD dwDesiredAccess,
WINDOWS::DWORD dwServiceType,
WINDOWS::DWORD dwStartType,
WINDOWS::DWORD dwErrorControl,
WINDOWS::LPCWSTR lpBinaryPathName,
WINDOWS::LPCWSTR lpLoadOrderGroup,
WINDOWS::LPDWORD lpdwTagId,
WINDOWS::LPCWSTR lpDependencies,
WINDOWS::LPCWSTR lpServiceStartName,
WINDOWS::LPCWSTR lpPassword,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CreateServiceW:before");
  WINDOWS::SC_HANDLE result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCreateServiceW, NULL,
      PIN_PARG(WINDOWS::SC_HANDLE), &result,
      PIN_PARG(WINDOWS::SC_HANDLE), hSCManager,
      PIN_PARG(WINDOWS::LPCWSTR), lpServiceName,
      PIN_PARG(WINDOWS::LPCWSTR), lpDisplayName,
      PIN_PARG(WINDOWS::DWORD), dwDesiredAccess,
      PIN_PARG(WINDOWS::DWORD), dwServiceType,
      PIN_PARG(WINDOWS::DWORD), dwStartType,
      PIN_PARG(WINDOWS::DWORD), dwErrorControl,
      PIN_PARG(WINDOWS::LPCWSTR), lpBinaryPathName,
      PIN_PARG(WINDOWS::LPCWSTR), lpLoadOrderGroup,
      PIN_PARG(WINDOWS::LPDWORD), lpdwTagId,
      PIN_PARG(WINDOWS::LPCWSTR), lpDependencies,
      PIN_PARG(WINDOWS::LPCWSTR), lpServiceStartName,
      PIN_PARG(WINDOWS::LPCWSTR), lpPassword,
      PIN_PARG_END() );
  }else{
    result = NULL;
  }
  LOGGER::info_msg("CreateServiceW:after");
  return result;
}

WINDOWS::BOOL replacement_DeleteService(AFUNPTR pfnDeleteService, WINDOWS::SC_HANDLE hService,
CONTEXT * ctxt)
{
  LOGGER::info_msg("DeleteService:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnDeleteService, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::SC_HANDLE), hService,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("DeleteService:after");
  return result;
}

WINDOWS::BOOL replacement_EnumServicesStatusA(AFUNPTR pfnEnumServicesStatusA, WINDOWS::SC_HANDLE hSCManager,
WINDOWS::DWORD dwServiceType,
WINDOWS::DWORD dwServiceState,
WINDOWS::LPENUM_SERVICE_STATUSA lpServices,
WINDOWS::DWORD cbBufSize,
WINDOWS::LPDWORD pcbBytesNeeded,
WINDOWS::LPDWORD lpServicesReturned,
WINDOWS::LPDWORD lpResumeHandle,
CONTEXT * ctxt)
{
  LOGGER::info_msg("EnumServicesStatusA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnEnumServicesStatusA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::SC_HANDLE), hSCManager,
      PIN_PARG(WINDOWS::DWORD), dwServiceType,
      PIN_PARG(WINDOWS::DWORD), dwServiceState,
      PIN_PARG(WINDOWS::LPENUM_SERVICE_STATUSA), lpServices,
      PIN_PARG(WINDOWS::DWORD), cbBufSize,
      PIN_PARG(WINDOWS::LPDWORD), pcbBytesNeeded,
      PIN_PARG(WINDOWS::LPDWORD), lpServicesReturned,
      PIN_PARG(WINDOWS::LPDWORD), lpResumeHandle,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("EnumServicesStatusA:after");
  return result;
}

WINDOWS::BOOL replacement_EnumServicesStatusW(AFUNPTR pfnEnumServicesStatusW, WINDOWS::SC_HANDLE hSCManager,
WINDOWS::DWORD dwServiceType,
WINDOWS::DWORD dwServiceState,
WINDOWS::LPENUM_SERVICE_STATUSW lpServices,
WINDOWS::DWORD cbBufSize,
WINDOWS::LPDWORD pcbBytesNeeded,
WINDOWS::LPDWORD lpServicesReturned,
WINDOWS::LPDWORD lpResumeHandle,
CONTEXT * ctxt)
{
  LOGGER::info_msg("EnumServicesStatusW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnEnumServicesStatusW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::SC_HANDLE), hSCManager,
      PIN_PARG(WINDOWS::DWORD), dwServiceType,
      PIN_PARG(WINDOWS::DWORD), dwServiceState,
      PIN_PARG(WINDOWS::LPENUM_SERVICE_STATUSW), lpServices,
      PIN_PARG(WINDOWS::DWORD), cbBufSize,
      PIN_PARG(WINDOWS::LPDWORD), pcbBytesNeeded,
      PIN_PARG(WINDOWS::LPDWORD), lpServicesReturned,
      PIN_PARG(WINDOWS::LPDWORD), lpResumeHandle,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("EnumServicesStatusW:after");
  return result;
}

WINDOWS::SC_HANDLE replacement_OpenSCManagerA(AFUNPTR pfnOpenSCManagerA, WINDOWS::LPCSTR lpMachineName,
WINDOWS::LPCSTR lpDatabaseName,
WINDOWS::DWORD dwDesiredAccess,
CONTEXT * ctxt)
{
  LOGGER::info_msg("OpenSCManagerA:before");
  WINDOWS::SC_HANDLE result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnOpenSCManagerA, NULL,
      PIN_PARG(WINDOWS::SC_HANDLE), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpMachineName,
      PIN_PARG(WINDOWS::LPCSTR), lpDatabaseName,
      PIN_PARG(WINDOWS::DWORD), dwDesiredAccess,
      PIN_PARG_END() );
  }else{
    result = NULL;
  }
  LOGGER::info_msg("OpenSCManagerA:after");
  return result;
}

WINDOWS::SC_HANDLE replacement_OpenSCManagerW(AFUNPTR pfnOpenSCManagerW, WINDOWS::LPCWSTR lpMachineName,
WINDOWS::LPCWSTR lpDatabaseName,
WINDOWS::DWORD dwDesiredAccess,
CONTEXT * ctxt)
{
  LOGGER::info_msg("OpenSCManagerW:before");
  WINDOWS::SC_HANDLE result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnOpenSCManagerW, NULL,
      PIN_PARG(WINDOWS::SC_HANDLE), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpMachineName,
      PIN_PARG(WINDOWS::LPCWSTR), lpDatabaseName,
      PIN_PARG(WINDOWS::DWORD), dwDesiredAccess,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("OpenSCManagerW:after");
  return result;
}

WINDOWS::SC_HANDLE replacement_OpenServiceA(AFUNPTR pfnOpenServiceA, WINDOWS::SC_HANDLE hSCManager,
WINDOWS::LPCSTR lpServiceName,
WINDOWS::DWORD dwDesiredAccess,
CONTEXT * ctxt)
{
  LOGGER::info_msg("OpenServiceA:before");
  WINDOWS::SC_HANDLE result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnOpenServiceA, NULL,
      PIN_PARG(WINDOWS::SC_HANDLE), &result,
      PIN_PARG(WINDOWS::SC_HANDLE), hSCManager,
      PIN_PARG(WINDOWS::LPCSTR), lpServiceName,
      PIN_PARG(WINDOWS::DWORD), dwDesiredAccess,
      PIN_PARG_END() );
  }else{
    result = NULL;
  }
  LOGGER::info_msg("OpenServiceA:after");
  return result;
}

WINDOWS::SC_HANDLE replacement_OpenServiceW(AFUNPTR pfnOpenServiceW, WINDOWS::SC_HANDLE hSCManager,
WINDOWS::LPCWSTR lpServiceName,
WINDOWS::DWORD dwDesiredAccess,
CONTEXT * ctxt)
{
  LOGGER::info_msg("OpenServiceW:before");
  WINDOWS::SC_HANDLE result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnOpenServiceW, NULL,
      PIN_PARG(WINDOWS::SC_HANDLE), &result,
      PIN_PARG(WINDOWS::SC_HANDLE), hSCManager,
      PIN_PARG(WINDOWS::LPCWSTR), lpServiceName,
      PIN_PARG(WINDOWS::DWORD), dwDesiredAccess,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("OpenServiceW:after");
  return result;
}

WINDOWS::BOOL replacement_StartServiceA(AFUNPTR pfnStartServiceA, WINDOWS::SC_HANDLE hService,
WINDOWS::DWORD dwNumServiceArgs,
WINDOWS::LPCSTR *lpServiceArgVectors,
CONTEXT * ctxt)
{
  LOGGER::info_msg("StartServiceA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnStartServiceA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::SC_HANDLE), hService,
      PIN_PARG(WINDOWS::DWORD), dwNumServiceArgs,
      PIN_PARG(WINDOWS::LPCSTR*), lpServiceArgVectors,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("StartServiceA:after");
  return result;
}

WINDOWS::BOOL replacement_StartServiceW(AFUNPTR pfnStartServiceW, WINDOWS::SC_HANDLE hService,
WINDOWS::DWORD dwNumServiceArgs,
WINDOWS::LPCWSTR *lpServiceArgVectors,
CONTEXT * ctxt)
{
  LOGGER::info_msg("StartServiceW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnStartServiceW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::SC_HANDLE), hService,
      PIN_PARG(WINDOWS::DWORD), dwNumServiceArgs,
      PIN_PARG(WINDOWS::LPCWSTR*), lpServiceArgVectors,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("StartServiceW:after");
  return result;
}

WINDOWS::BOOL replacement_LookupPrivilegeValueA(AFUNPTR pfnLookupPrivilegeValueA, WINDOWS::LPCSTR lpSystemName,
WINDOWS::LPCSTR lpName,
WINDOWS::PLUID lpLuid,
CONTEXT * ctxt)
{
  LOGGER::info_msg("LookupPrivilegeValueA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnLookupPrivilegeValueA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpSystemName,
      PIN_PARG(WINDOWS::LPCSTR), lpName,
      PIN_PARG(WINDOWS::PLUID), lpLuid,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("LookupPrivilegeValueA:after");
  return result;
}

WINDOWS::BOOL replacement_LookupPrivilegeValueW(AFUNPTR pfnLookupPrivilegeValueW, WINDOWS::LPCWSTR lpSystemName,
WINDOWS::LPCWSTR lpName,
WINDOWS::PLUID lpLuid,
CONTEXT * ctxt)
{
  LOGGER::info_msg("LookupPrivilegeValueW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnLookupPrivilegeValueW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpSystemName,
      PIN_PARG(WINDOWS::LPCWSTR), lpName,
      PIN_PARG(WINDOWS::PLUID), lpLuid,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("LookupPrivilegeValueW:after");
  return result;
}

WINDOWS::BOOL replacement_ExitWindowsEx(AFUNPTR pfnExitWindowsEx, WINDOWS::UINT uFlags,
WINDOWS::DWORD dwReason,
CONTEXT * ctxt)
{
  LOGGER::info_msg("ExitWindowsEx:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnExitWindowsEx, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::UINT), uFlags,
      PIN_PARG(WINDOWS::DWORD), dwReason,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("ExitWindowsEx:after");
  return result;
}
  
WINDOWS::HHOOK replacement_SetWindowsHookExA(AFUNPTR pfnSetWindowsHookExA, WINDOWS::INT idHook,
WINDOWS::HOOKPROC lpfn,
WINDOWS::HINSTANCE hmod,
WINDOWS::DWORD dwThreadId,
CONTEXT * ctxt)
{
  LOGGER::info_msg("SetWindowsHookExA:before");
  WINDOWS::HHOOK result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnSetWindowsHookExA, NULL,
      PIN_PARG(WINDOWS::HHOOK), &result,
      PIN_PARG(WINDOWS::INT), idHook,
      PIN_PARG(WINDOWS::HOOKPROC), lpfn,
      PIN_PARG(WINDOWS::HINSTANCE), hmod,
      PIN_PARG(WINDOWS::DWORD), dwThreadId,
      PIN_PARG_END() );
  }else{
    result = NULL;
  }
  LOGGER::info_msg("SetWindowsHookExA:after");
  return result;
}

WINDOWS::HHOOK replacement_SetWindowsHookExW(AFUNPTR pfnSetWindowsHookExW, WINDOWS::INT idHook,
WINDOWS::HOOKPROC lpfn,
WINDOWS::HINSTANCE hmod,
WINDOWS::DWORD dwThreadId,
CONTEXT * ctxt)
{
  LOGGER::info_msg("SetWindowsHookExW:before");
  WINDOWS::HHOOK result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnSetWindowsHookExW, NULL,
      PIN_PARG(WINDOWS::HHOOK), &result,
      PIN_PARG(WINDOWS::INT), idHook,
      PIN_PARG(WINDOWS::HOOKPROC), lpfn,
      PIN_PARG(WINDOWS::HINSTANCE), hmod,
      PIN_PARG(WINDOWS::DWORD), dwThreadId,
      PIN_PARG_END() );
  }else{
    result = NULL;
  }
  LOGGER::info_msg("SetWindowsHookExW:after");
  return result;
}

WINDOWS::BOOL replacement_UnhookWindowsHookEx(AFUNPTR pfnUnhookWindowsHookEx, WINDOWS::HHOOK hhk,
CONTEXT * ctxt)
{
  LOGGER::info_msg("UnhookWindowsHookEx:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnUnhookWindowsHookEx, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::HHOOK), hhk,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("UnhookWindowsHookEx:after");
  return result;
}

WINDOWS::BOOL replacement_CreateProcessA(AFUNPTR pfnCreateProcessA, WINDOWS::LPCSTR lpApplicationName,
WINDOWS::LPSTR lpCommandLine,
WINDOWS::LPSECURITY_ATTRIBUTES lpProcessAttributes,
WINDOWS::LPSECURITY_ATTRIBUTES lpThreadAttributes,
WINDOWS::BOOL bInheritHandles,
WINDOWS::DWORD dwCreationFlags,
WINDOWS::LPVOID lpEnvironment,
WINDOWS::LPCSTR lpCurrentDirectory,
WINDOWS::LPSTARTUPINFOA lpStartupInfo,
WINDOWS::LPPROCESS_INFORMATION lpProcessInformation,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CreateProcessA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCreateProcessA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpApplicationName,
      PIN_PARG(WINDOWS::LPSTR), lpCommandLine,
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES), lpProcessAttributes,
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES), lpThreadAttributes,
      PIN_PARG(WINDOWS::BOOL), bInheritHandles,
      PIN_PARG(WINDOWS::DWORD), dwCreationFlags,
      PIN_PARG(WINDOWS::LPVOID), lpEnvironment,
      PIN_PARG(WINDOWS::LPCSTR), lpCurrentDirectory,
      PIN_PARG(WINDOWS::LPSTARTUPINFOA), lpStartupInfo,
      PIN_PARG(WINDOWS::LPPROCESS_INFORMATION), lpProcessInformation,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CreateProcessA:after");
  return result;
}

WINDOWS::BOOL replacement_CreateProcessW(AFUNPTR pfnCreateProcessW, WINDOWS::LPCWSTR lpApplicationName,
WINDOWS::LPWSTR lpCommandLine,
WINDOWS::LPSECURITY_ATTRIBUTES lpProcessAttributes,
WINDOWS::LPSECURITY_ATTRIBUTES lpThreadAttributes,
WINDOWS::BOOL bInheritHandles,
WINDOWS::DWORD dwCreationFlags,
WINDOWS::LPVOID lpEnvironment,
WINDOWS::LPCWSTR lpCurrentDirectory,
WINDOWS::LPSTARTUPINFOW lpStartupInfo,
WINDOWS::LPPROCESS_INFORMATION lpProcessInformation,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CreateProcessW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCreateProcessW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpApplicationName,
      PIN_PARG(WINDOWS::LPWSTR), lpCommandLine,
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES), lpProcessAttributes,
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES), lpThreadAttributes,
      PIN_PARG(WINDOWS::BOOL), bInheritHandles,
      PIN_PARG(WINDOWS::DWORD), dwCreationFlags,
      PIN_PARG(WINDOWS::LPVOID), lpEnvironment,
      PIN_PARG(WINDOWS::LPCWSTR), lpCurrentDirectory,
      PIN_PARG(WINDOWS::LPSTARTUPINFOW), lpStartupInfo,
      PIN_PARG(WINDOWS::LPPROCESS_INFORMATION), lpProcessInformation,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CreateProcessW:after");
  return result;
}

WINDOWS::HANDLE replacement_CreateRemoteThread(AFUNPTR pfnCreateRemoteThread, WINDOWS::HANDLE hProcess,
WINDOWS::LPSECURITY_ATTRIBUTES lpThreadAttributes,
WINDOWS::SIZE_T dwStackSize,
WINDOWS::LPTHREAD_START_ROUTINE lpStartAddress,
WINDOWS::LPVOID lpParameter,
WINDOWS::DWORD dwCreationFlags,
WINDOWS::LPDWORD lpThreadId,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CreateRemoteThread:before");
  WINDOWS::HANDLE result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCreateRemoteThread, NULL,
      PIN_PARG(WINDOWS::HANDLE), &result,
      PIN_PARG(WINDOWS::HANDLE), hProcess,
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES), lpThreadAttributes,
      PIN_PARG(WINDOWS::SIZE_T), dwStackSize,
      PIN_PARG(WINDOWS::LPTHREAD_START_ROUTINE), lpStartAddress,
      PIN_PARG(WINDOWS::LPVOID), lpParameter,
      PIN_PARG(WINDOWS::DWORD), dwCreationFlags,
      PIN_PARG(WINDOWS::LPDWORD), lpThreadId,
      PIN_PARG_END() );
  }else{
    result = NULL;
  }
  LOGGER::info_msg("CreateRemoteThread:after");
  return result;
}
   
WINDOWS::HANDLE replacement_CreateThread(AFUNPTR pfnCreateThread, WINDOWS::LPSECURITY_ATTRIBUTES lpThreadAttributes,
WINDOWS::SIZE_T dwStackSize,
WINDOWS::LPTHREAD_START_ROUTINE lpStartAddress,
WINDOWS::LPVOID lpParameter,
WINDOWS::DWORD dwCreationFlags,
WINDOWS::LPDWORD lpThreadId,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CreateThread:before");
  WINDOWS::HANDLE result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCreateThread, NULL,
      PIN_PARG(WINDOWS::HANDLE), &result,
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES), lpThreadAttributes,
      PIN_PARG(WINDOWS::SIZE_T), dwStackSize,
      PIN_PARG(WINDOWS::LPTHREAD_START_ROUTINE), lpStartAddress,
      PIN_PARG(WINDOWS::LPVOID), lpParameter,
      PIN_PARG(WINDOWS::DWORD), dwCreationFlags,
      PIN_PARG(WINDOWS::LPDWORD), lpThreadId,
      PIN_PARG_END() );
  }else{
    result = NULL;
  }
  LOGGER::info_msg("CreateThread:after");
  return result;
}

WINDOWS::HANDLE replacement_CreateToolhelp32Snapshot(AFUNPTR pfnCreateToolhelp32Snapshot, WINDOWS::DWORD dwFlags,
WINDOWS::DWORD th32ProcessID,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CreateToolhelp32Snapshot:before");
  WINDOWS::HANDLE result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCreateToolhelp32Snapshot, NULL,
      PIN_PARG(WINDOWS::HANDLE), &result,
      PIN_PARG(WINDOWS::DWORD), dwFlags,
      PIN_PARG(WINDOWS::DWORD), th32ProcessID,
      PIN_PARG_END() );
  }else{
    result = NULL;
  }
  LOGGER::info_msg("CreateToolhelp32Snapshot:after");
  return result;
}

WINDOWS::BOOL replacement_Toolhelp32ReadProcessMemory(AFUNPTR pfnToolhelp32ReadProcessMemory, WINDOWS::DWORD th32ProcessID,
WINDOWS::LPCVOID lpBaseAddress,
WINDOWS::LPVOID lpBuffer,
WINDOWS::SIZE_T cbRead,
WINDOWS::SIZE_T *lpNumberOfBytesRead,
CONTEXT * ctxt)
{
  LOGGER::info_msg("Toolhelp32ReadProcessMemory:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnToolhelp32ReadProcessMemory, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::DWORD), th32ProcessID,
      PIN_PARG(WINDOWS::LPCVOID), lpBaseAddress,
      PIN_PARG(WINDOWS::LPVOID), lpBuffer,
      PIN_PARG(WINDOWS::SIZE_T), cbRead,
      PIN_PARG(WINDOWS::SIZE_T*), lpNumberOfBytesRead,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("Toolhelp32ReadProcessMemory:after");
  return result;
}

WINDOWS::BOOL replacement_WriteProcessMemory(AFUNPTR pfnWriteProcessMemory, WINDOWS::HANDLE hProcess,
WINDOWS::LPVOID lpBaseAddress,
WINDOWS::LPCVOID lpBuffer,
WINDOWS::SIZE_T nSize,
WINDOWS::SIZE_T *lpNumberOfBytesWritten,
CONTEXT * ctxt)
{
  LOGGER::info_msg("WriteProcessMemory:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnWriteProcessMemory, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::HANDLE), hProcess,
      PIN_PARG(WINDOWS::LPVOID), lpBaseAddress,
      PIN_PARG(WINDOWS::LPCVOID), lpBuffer,
      PIN_PARG(WINDOWS::SIZE_T), nSize,
      PIN_PARG(WINDOWS::SIZE_T*), lpNumberOfBytesWritten,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("WriteProcessMemory:after");
  return result;
}

WINDOWS::BOOL replacement_ShellExecuteExA(AFUNPTR pfnShellExecuteExA, WINDOWS::SHELLEXECUTEINFOA *pExecInfo,
CONTEXT * ctxt)
{
  LOGGER::info_msg("ShellExecuteExA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnShellExecuteExA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::SHELLEXECUTEINFOA*), pExecInfo,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("ShellExecuteExA:after");
  return result;
}

WINDOWS::BOOL replacement_ShellExecuteExW(AFUNPTR pfnShellExecuteExW, WINDOWS::SHELLEXECUTEINFOW *pExecInfo,
CONTEXT * ctxt)
{
  LOGGER::info_msg("ShellExecuteExW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnShellExecuteExW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::SHELLEXECUTEINFOW*), pExecInfo,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("ShellExecuteExW:after");
  return result;
}

WINDOWS::LSTATUS replacement_RegCreateKeyExA(AFUNPTR pfnRegCreateKeyExA, WINDOWS::HKEY hKey,
WINDOWS::LPCSTR lpSubKey,
WINDOWS::DWORD Reserved,
WINDOWS::LPSTR lpClass,
WINDOWS::DWORD dwOptions,
WINDOWS::REGSAM samDesired,
WINDOWS::LPSECURITY_ATTRIBUTES lpSecurityAttributes,
WINDOWS::PHKEY phkResult,
WINDOWS::LPDWORD lpdwDisposition,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RegCreateKeyExA:before");
  WINDOWS::LSTATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRegCreateKeyExA, NULL,
      PIN_PARG(WINDOWS::LSTATUS), &result,
      PIN_PARG(WINDOWS::HKEY), hKey,
      PIN_PARG(WINDOWS::LPCSTR), lpSubKey,
      PIN_PARG(WINDOWS::DWORD), Reserved,
      PIN_PARG(WINDOWS::LPSTR), lpClass,
      PIN_PARG(WINDOWS::DWORD), dwOptions,
      PIN_PARG(WINDOWS::REGSAM), samDesired,
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES), lpSecurityAttributes,
      PIN_PARG(WINDOWS::PHKEY), phkResult,
      PIN_PARG(WINDOWS::LPDWORD), lpdwDisposition,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("RegCreateKeyExA:after");
  return result;
}

WINDOWS::LSTATUS replacement_RegCreateKeyExW(AFUNPTR pfnRegCreateKeyExW, WINDOWS::HKEY hKey,
WINDOWS::LPCWSTR lpSubKey,
WINDOWS::DWORD Reserved,
WINDOWS::LPWSTR lpClass,
WINDOWS::DWORD dwOptions,
WINDOWS::REGSAM samDesired,
WINDOWS::LPSECURITY_ATTRIBUTES lpSecurityAttributes,
WINDOWS::PHKEY phkResult,
WINDOWS::LPDWORD lpdwDisposition,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RegCreateKeyExW:before");
  WINDOWS::LSTATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRegCreateKeyExW, NULL,
      PIN_PARG(WINDOWS::LSTATUS), &result,
      PIN_PARG(WINDOWS::HKEY), hKey,
      PIN_PARG(WINDOWS::LPCWSTR), lpSubKey,
      PIN_PARG(WINDOWS::DWORD), Reserved,
      PIN_PARG(WINDOWS::LPWSTR), lpClass,
      PIN_PARG(WINDOWS::DWORD), dwOptions,
      PIN_PARG(WINDOWS::REGSAM), samDesired,
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES), lpSecurityAttributes,
      PIN_PARG(WINDOWS::PHKEY), phkResult,
      PIN_PARG(WINDOWS::LPDWORD), lpdwDisposition,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("RegCreateKeyExW:after");
  return result;
}

WINDOWS::LSTATUS replacement_RegDeleteKeyA(AFUNPTR pfnRegDeleteKeyA, WINDOWS::HKEY hKey,
WINDOWS::LPCSTR lpSubKey,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RegDeleteKeyA:before");
  WINDOWS::LSTATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRegDeleteKeyA, NULL,
      PIN_PARG(WINDOWS::LSTATUS), &result,
      PIN_PARG(WINDOWS::HKEY), hKey,
      PIN_PARG(WINDOWS::LPCSTR), lpSubKey,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("RegDeleteKeyA:after");
  return result;
}

WINDOWS::LSTATUS replacement_RegDeleteKeyW(AFUNPTR pfnRegDeleteKeyW, WINDOWS::HKEY hKey,
WINDOWS::LPCWSTR lpSubKey,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RegDeleteKeyW:before");
  WINDOWS::LSTATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRegDeleteKeyW, NULL,
      PIN_PARG(WINDOWS::LSTATUS), &result,
      PIN_PARG(WINDOWS::HKEY), hKey,
      PIN_PARG(WINDOWS::LPCWSTR), lpSubKey,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("RegDeleteKeyW:after");
  return result;
}

WINDOWS::LSTATUS replacement_RegDeleteValueA(AFUNPTR pfnRegDeleteValueA, WINDOWS::HKEY hKey,
WINDOWS::LPCSTR lpValueName,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RegDeleteValueA:before");
  WINDOWS::LSTATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRegDeleteValueA, NULL,
      PIN_PARG(WINDOWS::LSTATUS), &result,
      PIN_PARG(WINDOWS::HKEY), hKey,
      PIN_PARG(WINDOWS::LPCSTR), lpValueName,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("RegDeleteValueA:after");
  return result;
}

WINDOWS::LSTATUS replacement_RegDeleteValueW(AFUNPTR pfnRegDeleteValueW, WINDOWS::HKEY hKey,
WINDOWS::LPCWSTR lpValueName,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RegDeleteValueW:before");
  WINDOWS::LSTATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRegDeleteValueW, NULL,
      PIN_PARG(WINDOWS::LSTATUS), &result,
      PIN_PARG(WINDOWS::HKEY), hKey,
      PIN_PARG(WINDOWS::LPCWSTR), lpValueName,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("RegDeleteValueW:after");
  return result;
}

WINDOWS::LSTATUS replacement_RegOpenKeyExA(AFUNPTR pfnRegOpenKeyExA, WINDOWS::HKEY hKey,
WINDOWS::LPCSTR lpSubKey,
WINDOWS::DWORD ulOptions,
WINDOWS::REGSAM samDesired,
WINDOWS::PHKEY phkResult,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RegOpenKeyExA:before");
  WINDOWS::LSTATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRegOpenKeyExA, NULL,
      PIN_PARG(WINDOWS::LSTATUS), &result,
      PIN_PARG(WINDOWS::HKEY), hKey,
      PIN_PARG(WINDOWS::LPCSTR), lpSubKey,
      PIN_PARG(WINDOWS::DWORD), ulOptions,
      PIN_PARG(WINDOWS::REGSAM), samDesired,
      PIN_PARG(WINDOWS::PHKEY), phkResult,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("RegOpenKeyExA:after");
  return result;
}

WINDOWS::LSTATUS replacement_RegOpenKeyExW(AFUNPTR pfnRegOpenKeyExW, WINDOWS::HKEY hKey,
WINDOWS::LPCWSTR lpSubKey,
WINDOWS::DWORD ulOptions,
WINDOWS::REGSAM samDesired,
WINDOWS::PHKEY phkResult,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RegOpenKeyExW:before");
  WINDOWS::LSTATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRegOpenKeyExW, NULL,
      PIN_PARG(WINDOWS::LSTATUS), &result,
      PIN_PARG(WINDOWS::HKEY), hKey,
      PIN_PARG(WINDOWS::LPCWSTR), lpSubKey,
      PIN_PARG(WINDOWS::DWORD), ulOptions,
      PIN_PARG(WINDOWS::REGSAM), samDesired,
      PIN_PARG(WINDOWS::PHKEY), phkResult,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("RegOpenKeyExW:after");
  return result;
}

WINDOWS::LSTATUS replacement_RegQueryInfoKeyA(AFUNPTR pfnRegQueryInfoKeyA, WINDOWS::HKEY hKey,
WINDOWS::LPSTR lpClass,
WINDOWS::LPDWORD lpcchClass,
WINDOWS::LPDWORD lpReserved,
WINDOWS::LPDWORD lpcSubKeys,
WINDOWS::LPDWORD lpcbMaxSubKeyLen,
WINDOWS::LPDWORD lpcbMaxClassLen,
WINDOWS::LPDWORD lpcValues,
WINDOWS::LPDWORD lpcbMaxValueNameLen,
WINDOWS::LPDWORD lpcbMaxValueLen,
WINDOWS::LPDWORD lpcbSecurityDescriptor,
WINDOWS::PFILETIME lpftLastWriteTime,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RegQueryInfoKeyA:before");
  WINDOWS::LSTATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRegQueryInfoKeyA, NULL,
      PIN_PARG(WINDOWS::LSTATUS), &result,
      PIN_PARG(WINDOWS::HKEY), hKey,
      PIN_PARG(WINDOWS::LPSTR), lpClass,
      PIN_PARG(WINDOWS::LPDWORD), lpcchClass,
      PIN_PARG(WINDOWS::LPDWORD), lpReserved,
      PIN_PARG(WINDOWS::LPDWORD), lpcSubKeys,
      PIN_PARG(WINDOWS::LPDWORD), lpcbMaxSubKeyLen,
      PIN_PARG(WINDOWS::LPDWORD), lpcbMaxClassLen,
      PIN_PARG(WINDOWS::LPDWORD), lpcValues,
      PIN_PARG(WINDOWS::LPDWORD), lpcbMaxValueNameLen,
      PIN_PARG(WINDOWS::LPDWORD), lpcbMaxValueLen,
      PIN_PARG(WINDOWS::LPDWORD), lpcbSecurityDescriptor,
      PIN_PARG(WINDOWS::PFILETIME), lpftLastWriteTime,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("RegQueryInfoKeyA:after");
  return result;
}

WINDOWS::LSTATUS replacement_RegQueryInfoKeyW(AFUNPTR pfnRegQueryInfoKeyW, WINDOWS::HKEY hKey,
WINDOWS::LPWSTR lpClass,
WINDOWS::LPDWORD lpcchClass,
WINDOWS::LPDWORD lpReserved,
WINDOWS::LPDWORD lpcSubKeys,
WINDOWS::LPDWORD lpcbMaxSubKeyLen,
WINDOWS::LPDWORD lpcbMaxClassLen,
WINDOWS::LPDWORD lpcValues,
WINDOWS::LPDWORD lpcbMaxValueNameLen,
WINDOWS::LPDWORD lpcbMaxValueLen,
WINDOWS::LPDWORD lpcbSecurityDescriptor,
WINDOWS::PFILETIME lpftLastWriteTime,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RegQueryInfoKeyW:before");
  WINDOWS::LSTATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRegQueryInfoKeyW, NULL,
      PIN_PARG(WINDOWS::LSTATUS), &result,
      PIN_PARG(WINDOWS::HKEY), hKey,
      PIN_PARG(WINDOWS::LPWSTR), lpClass,
      PIN_PARG(WINDOWS::LPDWORD), lpcchClass,
      PIN_PARG(WINDOWS::LPDWORD), lpReserved,
      PIN_PARG(WINDOWS::LPDWORD), lpcSubKeys,
      PIN_PARG(WINDOWS::LPDWORD), lpcbMaxSubKeyLen,
      PIN_PARG(WINDOWS::LPDWORD), lpcbMaxClassLen,
      PIN_PARG(WINDOWS::LPDWORD), lpcValues,
      PIN_PARG(WINDOWS::LPDWORD), lpcbMaxValueNameLen,
      PIN_PARG(WINDOWS::LPDWORD), lpcbMaxValueLen,
      PIN_PARG(WINDOWS::LPDWORD), lpcbSecurityDescriptor,
      PIN_PARG(WINDOWS::PFILETIME), lpftLastWriteTime,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("RegQueryInfoKeyW:after");
  return result;
}

WINDOWS::LSTATUS replacement_RegQueryValueExA(AFUNPTR pfnRegQueryValueExA, WINDOWS::HKEY hKey,
WINDOWS::LPCSTR lpValueName,
WINDOWS::LPDWORD lpReserved,
WINDOWS::LPDWORD lpType,
WINDOWS::LPBYTE lpData,
WINDOWS::LPDWORD lpcbData,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RegQueryValueExA:before");
  WINDOWS::LSTATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRegQueryValueExA, NULL,
      PIN_PARG(WINDOWS::LSTATUS), &result,
      PIN_PARG(WINDOWS::HKEY), hKey,
      PIN_PARG(WINDOWS::LPCSTR), lpValueName,
      PIN_PARG(WINDOWS::LPDWORD), lpReserved,
      PIN_PARG(WINDOWS::LPDWORD), lpType,
      PIN_PARG(WINDOWS::LPBYTE), lpData,
      PIN_PARG(WINDOWS::LPDWORD), lpcbData,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("RegQueryValueExA:after");
  return result;
}

WINDOWS::LSTATUS replacement_RegQueryValueExW(AFUNPTR pfnRegQueryValueExW, WINDOWS::HKEY hKey,
WINDOWS::LPCWSTR lpValueName,
WINDOWS::LPDWORD lpReserved,
WINDOWS::LPDWORD lpType,
WINDOWS::LPBYTE lpData,
WINDOWS::LPDWORD lpcbData,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RegQueryValueExW:before");
  WINDOWS::LSTATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRegQueryValueExW, NULL,
      PIN_PARG(WINDOWS::LSTATUS), &result,
      PIN_PARG(WINDOWS::HKEY), hKey,
      PIN_PARG(WINDOWS::LPCWSTR), lpValueName,
      PIN_PARG(WINDOWS::LPDWORD), lpReserved,
      PIN_PARG(WINDOWS::LPDWORD), lpType,
      PIN_PARG(WINDOWS::LPBYTE), lpData,
      PIN_PARG(WINDOWS::LPDWORD), lpcbData,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("RegQueryValueExW:after");
  return result;
}
            
WINDOWS::LSTATUS replacement_RegSetValueExA(AFUNPTR pfnRegSetValueExA, WINDOWS::HKEY hKey,
WINDOWS::LPCSTR lpValueName,
WINDOWS::DWORD Reserved,
WINDOWS::DWORD dwType,
WINDOWS::BYTE *lpData,
WINDOWS::DWORD cbData,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RegSetValueExA:before");
  WINDOWS::LSTATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRegSetValueExA, NULL,
      PIN_PARG(WINDOWS::LSTATUS), &result,
      PIN_PARG(WINDOWS::HKEY), hKey,
      PIN_PARG(WINDOWS::LPCSTR), lpValueName,
      PIN_PARG(WINDOWS::DWORD), Reserved,
      PIN_PARG(WINDOWS::DWORD), dwType,
      PIN_PARG(WINDOWS::BYTE*), lpData,
      PIN_PARG(WINDOWS::DWORD), cbData,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("RegSetValueExA:after");
  return result;
}

WINDOWS::LSTATUS replacement_RegSetValueExW(AFUNPTR pfnRegSetValueExW, WINDOWS::HKEY hKey,
WINDOWS::LPCWSTR lpValueName,
WINDOWS::DWORD Reserved,
WINDOWS::DWORD dwType,
WINDOWS::BYTE *lpData,
WINDOWS::DWORD cbData,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RegSetValueExW:before");
  WINDOWS::LSTATUS result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRegSetValueExW, NULL,
      PIN_PARG(WINDOWS::LSTATUS), &result,
      PIN_PARG(WINDOWS::HKEY), hKey,
      PIN_PARG(WINDOWS::LPCWSTR), lpValueName,
      PIN_PARG(WINDOWS::DWORD), Reserved,
      PIN_PARG(WINDOWS::DWORD), dwType,
      PIN_PARG(WINDOWS::BYTE*), lpData,
      PIN_PARG(WINDOWS::DWORD), cbData,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("RegSetValueExW:after");
  return result;
}

WINDOWS::BOOL replacement_GetUserNameA(AFUNPTR pfnGetUserNameA, WINDOWS::LPSTR lpBuffer,
WINDOWS::LPDWORD pcbBuffer,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetUserNameA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetUserNameA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPSTR), lpBuffer,
      PIN_PARG(WINDOWS::LPDWORD), pcbBuffer,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetUserNameA:after");
  return result;
}

WINDOWS::BOOL replacement_GetUserNameW(AFUNPTR pfnGetUserNameW, WINDOWS::LPWSTR lpBuffer,
WINDOWS::LPDWORD pcbBuffer,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetUserNameW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetUserNameW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPWSTR), lpBuffer,
      PIN_PARG(WINDOWS::LPDWORD), pcbBuffer,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetUserNameW:after");
  return result;
}

WINDOWS::BOOL replacement_LookupAccountSidA(AFUNPTR pfnLookupAccountSidA, WINDOWS::LPCSTR lpSystemName,
WINDOWS::PSID Sid,
WINDOWS::LPSTR Name,
WINDOWS::LPDWORD cchName,
WINDOWS::LPSTR ReferencedDomainName,
WINDOWS::LPDWORD cchReferencedDomainName,
WINDOWS::PSID_NAME_USE peUse,
CONTEXT * ctxt)
{
  LOGGER::info_msg("LookupAccountSidA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnLookupAccountSidA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpSystemName,
      PIN_PARG(WINDOWS::PSID), Sid,
      PIN_PARG(WINDOWS::LPSTR), Name,
      PIN_PARG(WINDOWS::LPDWORD), cchName,
      PIN_PARG(WINDOWS::LPSTR), ReferencedDomainName,
      PIN_PARG(WINDOWS::LPDWORD), cchReferencedDomainName,
      PIN_PARG(WINDOWS::PSID_NAME_USE), peUse,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("LookupAccountSidA:after");
  return result;
}
        
WINDOWS::BOOL replacement_LookupAccountSidW(AFUNPTR pfnLookupAccountSidW, WINDOWS::LPCWSTR lpSystemName,
WINDOWS::PSID Sid,
WINDOWS::LPWSTR Name,
WINDOWS::LPDWORD cchName,
WINDOWS::LPWSTR ReferencedDomainName,
WINDOWS::LPDWORD cchReferencedDomainName,
WINDOWS::PSID_NAME_USE peUse,
CONTEXT * ctxt)
{
  LOGGER::info_msg("LookupAccountSidW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnLookupAccountSidW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpSystemName,
      PIN_PARG(WINDOWS::PSID), Sid,
      PIN_PARG(WINDOWS::LPWSTR), Name,
      PIN_PARG(WINDOWS::LPDWORD), cchName,
      PIN_PARG(WINDOWS::LPWSTR), ReferencedDomainName,
      PIN_PARG(WINDOWS::LPDWORD), cchReferencedDomainName,
      PIN_PARG(WINDOWS::PSID_NAME_USE), peUse,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("LookupAccountSidW:after");
  return result;
}

WINDOWS::BOOL replacement_GetComputerNameA(AFUNPTR pfnGetComputerNameA, WINDOWS::LPSTR lpBuffer,
WINDOWS::LPDWORD nSize,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetComputerNameA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetComputerNameA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPSTR), lpBuffer,
      PIN_PARG(WINDOWS::LPDWORD), nSize,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetComputerNameA:after");
  return result;
}

WINDOWS::BOOL replacement_GetComputerNameW(AFUNPTR pfnGetComputerNameW, WINDOWS::LPWSTR lpBuffer,
WINDOWS::LPDWORD nSize,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetComputerNameW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetComputerNameW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPWSTR), lpBuffer,
      PIN_PARG(WINDOWS::LPDWORD), nSize,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetComputerNameW:after");
  return result;
}

WINDOWS::BOOL replacement_GetDiskFreeSpaceExA(AFUNPTR pfnGetDiskFreeSpaceExA, WINDOWS::LPCSTR lpDirectoryName,
WINDOWS::PULARGE_INTEGER lpFreeBytesAvailableToCaller,
WINDOWS::PULARGE_INTEGER lpTotalNumberOfBytes,
WINDOWS::PULARGE_INTEGER lpTotalNumberOfFreeBytes,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetDiskFreeSpaceExA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetDiskFreeSpaceExA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpDirectoryName,
      PIN_PARG(WINDOWS::PULARGE_INTEGER), lpFreeBytesAvailableToCaller,
      PIN_PARG(WINDOWS::PULARGE_INTEGER), lpTotalNumberOfBytes,
      PIN_PARG(WINDOWS::PULARGE_INTEGER), lpTotalNumberOfFreeBytes,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetDiskFreeSpaceExA:after");
  return result;
}

WINDOWS::BOOL replacement_GetDiskFreeSpaceExW(AFUNPTR pfnGetDiskFreeSpaceExW, WINDOWS::LPCWSTR lpDirectoryName,
WINDOWS::PULARGE_INTEGER lpFreeBytesAvailableToCaller,
WINDOWS::PULARGE_INTEGER lpTotalNumberOfBytes,
WINDOWS::PULARGE_INTEGER lpTotalNumberOfFreeBytes,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetDiskFreeSpaceExW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetDiskFreeSpaceExW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpDirectoryName,
      PIN_PARG(WINDOWS::PULARGE_INTEGER), lpFreeBytesAvailableToCaller,
      PIN_PARG(WINDOWS::PULARGE_INTEGER), lpTotalNumberOfBytes,
      PIN_PARG(WINDOWS::PULARGE_INTEGER), lpTotalNumberOfFreeBytes,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetDiskFreeSpaceExW:after");
  return result;
}

WINDOWS::BOOL replacement_GetDiskFreeSpaceA(AFUNPTR pfnGetDiskFreeSpaceA, WINDOWS::LPCSTR lpRootPathName,
WINDOWS::LPDWORD lpSectorsPerCluster,
WINDOWS::LPDWORD lpBytesPerSector,
WINDOWS::LPDWORD lpNumberOfFreeClusters,
WINDOWS::LPDWORD lpTotalNumberOfClusters,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetDiskFreeSpaceA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetDiskFreeSpaceA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpRootPathName,
      PIN_PARG(WINDOWS::LPDWORD), lpSectorsPerCluster,
      PIN_PARG(WINDOWS::LPDWORD), lpBytesPerSector,
      PIN_PARG(WINDOWS::LPDWORD), lpNumberOfFreeClusters,
      PIN_PARG(WINDOWS::LPDWORD), lpTotalNumberOfClusters,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetDiskFreeSpaceA:after");
  return result;
}
   
WINDOWS::BOOL replacement_GetDiskFreeSpaceW(AFUNPTR pfnGetDiskFreeSpaceW, WINDOWS::LPCWSTR lpRootPathName,
WINDOWS::LPDWORD lpSectorsPerCluster,
WINDOWS::LPDWORD lpBytesPerSector,
WINDOWS::LPDWORD lpNumberOfFreeClusters,
WINDOWS::LPDWORD lpTotalNumberOfClusters,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetDiskFreeSpaceW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetDiskFreeSpaceW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpRootPathName,
      PIN_PARG(WINDOWS::LPDWORD), lpSectorsPerCluster,
      PIN_PARG(WINDOWS::LPDWORD), lpBytesPerSector,
      PIN_PARG(WINDOWS::LPDWORD), lpNumberOfFreeClusters,
      PIN_PARG(WINDOWS::LPDWORD), lpTotalNumberOfClusters,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetDiskFreeSpaceW:after");
  return result;
}

WINDOWS::DWORD replacement_GetTimeZoneInformation(AFUNPTR pfnGetTimeZoneInformation, WINDOWS::LPTIME_ZONE_INFORMATION lpTimeZoneInformation,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetTimeZoneInformation:before");
  WINDOWS::DWORD result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetTimeZoneInformation, NULL,
      PIN_PARG(WINDOWS::DWORD), &result,
      PIN_PARG(WINDOWS::LPTIME_ZONE_INFORMATION), lpTimeZoneInformation,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("GetTimeZoneInformation:after");
  return result;
}

WINDOWS::HRESULT replacement_SHGetFolderPathA(AFUNPTR pfnSHGetFolderPathA, WINDOWS::HWND hwnd,
WINDOWS::INT csidl,
WINDOWS::HANDLE hToken,
WINDOWS::DWORD dwFlags,
WINDOWS::LPSTR pszPath,
CONTEXT * ctxt)
{
  LOGGER::info_msg("SHGetFolderPathA:before");
  WINDOWS::HRESULT result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnSHGetFolderPathA, NULL,
      PIN_PARG(WINDOWS::HRESULT), &result,
      PIN_PARG(WINDOWS::HWND), hwnd,
      PIN_PARG(WINDOWS::INT), csidl,
      PIN_PARG(WINDOWS::HANDLE), hToken,
      PIN_PARG(WINDOWS::DWORD), dwFlags,
      PIN_PARG(WINDOWS::LPSTR), pszPath,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("SHGetFolderPathA:after");
  return result;
}

WINDOWS::HRESULT replacement_SHGetFolderPathW(AFUNPTR pfnSHGetFolderPathW, WINDOWS::HWND hwnd,
WINDOWS::INT csidl,
WINDOWS::HANDLE hToken,
WINDOWS::DWORD dwFlags,
WINDOWS::LPWSTR pszPath,
CONTEXT * ctxt)
{
  LOGGER::info_msg("SHGetFolderPathW:before");
  WINDOWS::HRESULT result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnSHGetFolderPathW, NULL,
      PIN_PARG(WINDOWS::HRESULT), &result,
      PIN_PARG(WINDOWS::HWND), hwnd,
      PIN_PARG(WINDOWS::INT), csidl,
      PIN_PARG(WINDOWS::HANDLE), hToken,
      PIN_PARG(WINDOWS::DWORD), dwFlags,
      PIN_PARG(WINDOWS::LPWSTR), pszPath,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("SHGetFolderPathW:after");
  return result;
}

WINDOWS::BOOL replacement_CopyFileA(AFUNPTR pfnCopyFileA, WINDOWS::LPCSTR lpExistingFileName,
WINDOWS::LPCSTR lpNewFileName,
WINDOWS::BOOL bFailIfExists,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CopyFileA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCopyFileA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpExistingFileName,
      PIN_PARG(WINDOWS::LPCSTR), lpNewFileName,
      PIN_PARG(WINDOWS::BOOL), bFailIfExists,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CopyFileA:after");
  return result;
}

WINDOWS::BOOL replacement_CopyFileW(AFUNPTR pfnCopyFileW, WINDOWS::LPCWSTR lpExistingFileName,
WINDOWS::LPCWSTR lpNewFileName,
WINDOWS::BOOL bFailIfExists,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CopyFileW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCopyFileW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpExistingFileName,
      PIN_PARG(WINDOWS::LPCWSTR), lpNewFileName,
      PIN_PARG(WINDOWS::BOOL), bFailIfExists,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CopyFileW:after");
  return result;
}

WINDOWS::BOOL replacement_CopyFileExA(AFUNPTR pfnCopyFileExA, WINDOWS::LPCSTR lpExistingFileName,
WINDOWS::LPCSTR lpNewFileName,
WINDOWS::LPPROGRESS_ROUTINE lpProgressRoutine,
WINDOWS::LPVOID lpData,
WINDOWS::LPBOOL pbCancel,
WINDOWS::DWORD dwCopyFlags,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CopyFileExA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCopyFileExA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpExistingFileName,
      PIN_PARG(WINDOWS::LPCSTR), lpNewFileName,
      PIN_PARG(WINDOWS::LPPROGRESS_ROUTINE), lpProgressRoutine,
      PIN_PARG(WINDOWS::LPVOID), lpData,
      PIN_PARG(WINDOWS::LPBOOL), pbCancel,
      PIN_PARG(WINDOWS::DWORD), dwCopyFlags,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CopyFileExA:after");
  return result;
}

WINDOWS::BOOL replacement_CopyFileExW(AFUNPTR pfnCopyFileExW, WINDOWS::LPCWSTR lpExistingFileName,
WINDOWS::LPCWSTR lpNewFileName,
WINDOWS::LPPROGRESS_ROUTINE lpProgressRoutine,
WINDOWS::LPVOID lpData,
WINDOWS::LPBOOL pbCancel,
WINDOWS::DWORD dwCopyFlags,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CopyFileExW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCopyFileExW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpExistingFileName,
      PIN_PARG(WINDOWS::LPCWSTR), lpNewFileName,
      PIN_PARG(WINDOWS::LPPROGRESS_ROUTINE), lpProgressRoutine,
      PIN_PARG(WINDOWS::LPVOID), lpData,
      PIN_PARG(WINDOWS::LPBOOL), pbCancel,
      PIN_PARG(WINDOWS::DWORD), dwCopyFlags,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CopyFileExW:after");
  return result;
}

WINDOWS::BOOL replacement_ReadFile(AFUNPTR pfnReadFile, WINDOWS::HANDLE hFile,
WINDOWS::LPVOID lpBuffer,
WINDOWS::DWORD nNumberOfBytesToRead,
WINDOWS::LPDWORD lpNumberOfBytesRead,
WINDOWS::LPOVERLAPPED lpOverlapped,
CONTEXT * ctxt)
{
  LOGGER::info_msg("ReadFile:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnReadFile, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::HANDLE), hFile,
      PIN_PARG(WINDOWS::LPVOID), lpBuffer,
      PIN_PARG(WINDOWS::DWORD), nNumberOfBytesToRead,
      PIN_PARG(WINDOWS::LPDWORD), lpNumberOfBytesRead,
      PIN_PARG(WINDOWS::LPOVERLAPPED), lpOverlapped,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("ReadFile:after");
  return result;
}

WINDOWS::BOOL replacement_WriteFile(AFUNPTR pfnWriteFile, WINDOWS::HANDLE hFile,
WINDOWS::LPCVOID lpBuffer,
WINDOWS::DWORD nNumberOfBytesToWrite,
WINDOWS::LPDWORD lpNumberOfBytesWritten,
WINDOWS::LPOVERLAPPED lpOverlapped,
CONTEXT * ctxt)
{
  LOGGER::info_msg("WriteFile:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnWriteFile, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::HANDLE), hFile,
      PIN_PARG(WINDOWS::LPCVOID), lpBuffer,
      PIN_PARG(WINDOWS::DWORD), nNumberOfBytesToWrite,
      PIN_PARG(WINDOWS::LPDWORD), lpNumberOfBytesWritten,
      PIN_PARG(WINDOWS::LPOVERLAPPED), lpOverlapped,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("WriteFile:after");
  return result;
}

WINDOWS::HFILE replacement_OpenFile(AFUNPTR pfnOpenFile, WINDOWS::LPCSTR lpFileName,
WINDOWS::LPOFSTRUCT lpReOpenBuff,
WINDOWS::UINT uStyle,
CONTEXT * ctxt)
{
  LOGGER::info_msg("OpenFile:before");
  WINDOWS::HFILE result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnOpenFile, NULL,
      PIN_PARG(WINDOWS::HFILE), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpFileName,
      PIN_PARG(WINDOWS::LPOFSTRUCT), lpReOpenBuff,
      PIN_PARG(WINDOWS::UINT), uStyle,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("OpenFile:after");
  return result;
}

WINDOWS::BOOL replacement_CreateDirectoryA(AFUNPTR pfnCreateDirectoryA, WINDOWS::LPCSTR lpPathName,
WINDOWS::LPSECURITY_ATTRIBUTES lpSecurityAttributes,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CreateDirectoryA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCreateDirectoryA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpPathName,
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES), lpSecurityAttributes,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CreateDirectoryA:after");
  return result;
}

WINDOWS::BOOL replacement_CreateDirectoryW(AFUNPTR pfnCreateDirectoryW, WINDOWS::LPCWSTR lpPathName,
WINDOWS::LPSECURITY_ATTRIBUTES lpSecurityAttributes,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CreateDirectoryW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCreateDirectoryW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpPathName,
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES), lpSecurityAttributes,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CreateDirectoryW:after");
  return result;
}

WINDOWS::BOOL replacement_CreateDirectoryExA(AFUNPTR pfnCreateDirectoryExA, WINDOWS::LPCSTR lpTemplateDirectory,
WINDOWS::LPCSTR lpNewDirectory,
WINDOWS::LPSECURITY_ATTRIBUTES lpSecurityAttributes,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CreateDirectoryExA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCreateDirectoryExA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpTemplateDirectory,
      PIN_PARG(WINDOWS::LPCSTR), lpNewDirectory,
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES), lpSecurityAttributes,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CreateDirectoryExA:after");
  return result;
}

WINDOWS::BOOL replacement_CreateDirectoryExW(AFUNPTR pfnCreateDirectoryExW, WINDOWS::LPCWSTR lpTemplateDirectory,
WINDOWS::LPCWSTR lpNewDirectory,
WINDOWS::LPSECURITY_ATTRIBUTES lpSecurityAttributes,
CONTEXT * ctxt)
{
  LOGGER::info_msg("CreateDirectoryExW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnCreateDirectoryExW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpTemplateDirectory,
      PIN_PARG(WINDOWS::LPCWSTR), lpNewDirectory,
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES), lpSecurityAttributes,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("CreateDirectoryExW:after");
  return result;
}

WINDOWS::BOOL replacement_DeleteFileA(AFUNPTR pfnDeleteFileA, WINDOWS::LPCSTR lpFileName,
CONTEXT * ctxt)
{
  LOGGER::info_msg("DeleteFileA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnDeleteFileA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpFileName,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("DeleteFileA:after");
  return result;
}

WINDOWS::BOOL replacement_DeleteFileW(AFUNPTR pfnDeleteFileW, WINDOWS::LPCWSTR lpFileName,
CONTEXT * ctxt)
{
  LOGGER::info_msg("DeleteFileW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnDeleteFileW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpFileName,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("DeleteFileW:after");
  return result;
}

WINDOWS::BOOL replacement_DeviceIoControl(AFUNPTR pfnDeviceIoControl, WINDOWS::HANDLE hDevice,
WINDOWS::DWORD dwIoControlCode,
WINDOWS::LPVOID lpInBuffer,
WINDOWS::DWORD nInBufferSize,
WINDOWS::LPVOID lpOutBuffer,
WINDOWS::DWORD nOutBufferSize,
WINDOWS::LPDWORD lpBytesReturned,
WINDOWS::LPOVERLAPPED lpOverlapped,
CONTEXT * ctxt)
{
  LOGGER::info_msg("DeviceIoControl:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnDeviceIoControl, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::HANDLE), hDevice,
      PIN_PARG(WINDOWS::DWORD), dwIoControlCode,
      PIN_PARG(WINDOWS::LPVOID), lpInBuffer,
      PIN_PARG(WINDOWS::DWORD), nInBufferSize,
      PIN_PARG(WINDOWS::LPVOID), lpOutBuffer,
      PIN_PARG(WINDOWS::DWORD), nOutBufferSize,
      PIN_PARG(WINDOWS::LPDWORD), lpBytesReturned,
      PIN_PARG(WINDOWS::LPOVERLAPPED), lpOverlapped,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("DeviceIoControl:after");
  return result;
}
      
WINDOWS::DWORD replacement_GetFileAttributesA(AFUNPTR pfnGetFileAttributesA, WINDOWS::LPCSTR lpFileName,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetFileAttributesA:before");
  WINDOWS::DWORD result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetFileAttributesA, NULL,
      PIN_PARG(WINDOWS::DWORD), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpFileName,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("GetFileAttributesA:after");
  return result;
}

WINDOWS::DWORD replacement_GetFileAttributesW(AFUNPTR pfnGetFileAttributesW, WINDOWS::LPCWSTR lpFileName,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetFileAttributesW:before");
  WINDOWS::DWORD result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetFileAttributesW, NULL,
      PIN_PARG(WINDOWS::DWORD), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpFileName,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("GetFileAttributesW:after");
  return result;
}

WINDOWS::BOOL replacement_GetFileAttributesExA(AFUNPTR pfnGetFileAttributesExA, WINDOWS::LPCSTR lpFileName,
WINDOWS::GET_FILEEX_INFO_LEVELS fInfoLevelId,
WINDOWS::LPVOID lpFileInformation,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetFileAttributesExA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetFileAttributesExA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpFileName,
      PIN_PARG(WINDOWS::GET_FILEEX_INFO_LEVELS), fInfoLevelId,
      PIN_PARG(WINDOWS::LPVOID), lpFileInformation,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetFileAttributesExA:after");
  return result;
}

WINDOWS::BOOL replacement_GetFileAttributesExW(AFUNPTR pfnGetFileAttributesExW, WINDOWS::LPCWSTR lpFileName,
WINDOWS::GET_FILEEX_INFO_LEVELS fInfoLevelId,
WINDOWS::LPVOID lpFileInformation,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetFileAttributesExW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetFileAttributesExW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpFileName,
      PIN_PARG(WINDOWS::GET_FILEEX_INFO_LEVELS), fInfoLevelId,
      PIN_PARG(WINDOWS::LPVOID), lpFileInformation,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetFileAttributesExW:after");
  return result;
}

WINDOWS::BOOL replacement_GetFileInformationByHandle(AFUNPTR pfnGetFileInformationByHandle, WINDOWS::HANDLE hFile,
WINDOWS::LPBY_HANDLE_FILE_INFORMATION lpFileInformation,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetFileInformationByHandle:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetFileInformationByHandle, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::HANDLE), hFile,
      PIN_PARG(WINDOWS::LPBY_HANDLE_FILE_INFORMATION), lpFileInformation,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetFileInformationByHandle:after");
  return result;
}

WINDOWS::BOOL replacement_GetFileInformationByHandleEx(AFUNPTR pfnGetFileInformationByHandleEx, WINDOWS::HANDLE hFile,
WINDOWS::FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
WINDOWS::LPVOID lpFileInformation,
WINDOWS::DWORD dwBufferSize,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetFileInformationByHandleEx:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetFileInformationByHandleEx, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::HANDLE), hFile,
      PIN_PARG(WINDOWS::FILE_INFO_BY_HANDLE_CLASS), FileInformationClass,
      PIN_PARG(WINDOWS::LPVOID), lpFileInformation,
      PIN_PARG(WINDOWS::DWORD), dwBufferSize,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetFileInformationByHandleEx:after");
  return result;
}

WINDOWS::DWORD replacement_GetFileSize(AFUNPTR pfnGetFileSize, WINDOWS::HANDLE hFile,
WINDOWS::LPDWORD lpFileSizeHigh,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetFileSize:before");
  WINDOWS::DWORD result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetFileSize, NULL,
      PIN_PARG(WINDOWS::DWORD), &result,
      PIN_PARG(WINDOWS::HANDLE), hFile,
      PIN_PARG(WINDOWS::LPDWORD), lpFileSizeHigh,
      PIN_PARG_END() );
  }else{
    result = 0;
  }
  LOGGER::info_msg("GetFileSize:after");
  return result;
}

WINDOWS::BOOL replacement_GetFileSizeEx(AFUNPTR pfnGetFileSizeEx, WINDOWS::HANDLE hFile,
WINDOWS::PLARGE_INTEGER lpFileSize,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetFileSizeEx:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetFileSizeEx, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::HANDLE), hFile,
      PIN_PARG(WINDOWS::PLARGE_INTEGER), lpFileSize,
      PIN_PARG_END() );
  }else{
    result = 0;
  }
  LOGGER::info_msg("GetFileSizeEx:after");
  return result;
}

WINDOWS::DWORD replacement_GetFileType(AFUNPTR pfnGetFileType, WINDOWS::HANDLE hFile,
CONTEXT * ctxt)
{   
  LOGGER::info_msg("GetFileType:before");
  WINDOWS::DWORD result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetFileType, NULL,
      PIN_PARG(WINDOWS::DWORD), &result,
      PIN_PARG(WINDOWS::HANDLE), hFile,
      PIN_PARG_END() );
  }else{
    result = -1;
  }
  LOGGER::info_msg("GetFileType:after");
  return result;
}

WINDOWS::DWORD replacement_GetShortPathNameA(AFUNPTR pfnGetShortPathNameA, WINDOWS::LPCSTR lpszLongPath,
WINDOWS::LPSTR lpszShortPath,
WINDOWS::DWORD cchBuffer,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetShortPathNameA:before");
  WINDOWS::DWORD result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetShortPathNameA, NULL,
      PIN_PARG(WINDOWS::DWORD), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpszLongPath,
      PIN_PARG(WINDOWS::LPSTR), lpszShortPath,
      PIN_PARG(WINDOWS::DWORD), cchBuffer,
      PIN_PARG_END() );
  }else{
    result = -1;
  }
  LOGGER::info_msg("GetShortPathNameA:after");
  return result;
}

WINDOWS::DWORD replacement_GetShortPathNameW(AFUNPTR pfnGetShortPathNameW, WINDOWS::LPCWSTR lpszLongPath,
WINDOWS::LPWSTR lpszShortPath,
WINDOWS::DWORD cchBuffer,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetShortPathNameW:before");
  WINDOWS::DWORD result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetShortPathNameW, NULL,
      PIN_PARG(WINDOWS::DWORD), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpszLongPath,
      PIN_PARG(WINDOWS::LPWSTR), lpszShortPath,
      PIN_PARG(WINDOWS::DWORD), cchBuffer,
      PIN_PARG_END() );
  }else{
    result = -1;
  }
  LOGGER::info_msg("GetShortPathNameW:after");
  return result;
}

WINDOWS::UINT replacement_GetSystemDirectoryA(AFUNPTR pfnGetSystemDirectoryA, WINDOWS::LPSTR lpBuffer,
WINDOWS::UINT uSize,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetSystemDirectoryA:before");
  WINDOWS::UINT result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetSystemDirectoryA, NULL,
      PIN_PARG(WINDOWS::UINT), &result,
      PIN_PARG(WINDOWS::LPSTR), lpBuffer,
      PIN_PARG(WINDOWS::UINT), uSize,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("GetSystemDirectoryA:after");
  return result;
}

WINDOWS::UINT replacement_GetSystemDirectoryW(AFUNPTR pfnGetSystemDirectoryW, WINDOWS::LPWSTR lpBuffer,
WINDOWS::UINT uSize,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetSystemDirectoryW:before");
  WINDOWS::UINT result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetSystemDirectoryW, NULL,
      PIN_PARG(WINDOWS::UINT), &result,
      PIN_PARG(WINDOWS::LPWSTR), lpBuffer,
      PIN_PARG(WINDOWS::UINT), uSize,
      PIN_PARG_END() );
  }else{
    result = 1234;
  }
  LOGGER::info_msg("GetSystemDirectoryW:after");
  return result;
}

WINDOWS::DWORD replacement_GetTempPathA(AFUNPTR pfnGetTempPathA, WINDOWS::DWORD nBufferLength,
WINDOWS::LPSTR lpBuffer,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetTempPathA:before");
  WINDOWS::DWORD result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetTempPathA, NULL,
      PIN_PARG(WINDOWS::DWORD), &result,
      PIN_PARG(WINDOWS::DWORD), nBufferLength,
      PIN_PARG(WINDOWS::LPSTR), lpBuffer,
      PIN_PARG_END() );
  }else{
    result = -1;
  }
  LOGGER::info_msg("GetTempPathA:after");
  return result;
}

WINDOWS::DWORD replacement_GetTempPathW(AFUNPTR pfnGetTempPathW, WINDOWS::DWORD nBufferLength,
WINDOWS::LPWSTR lpBuffer,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetTempPathW:before");
  WINDOWS::DWORD result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetTempPathW, NULL,
      PIN_PARG(WINDOWS::DWORD), &result,
      PIN_PARG(WINDOWS::DWORD), nBufferLength,
      PIN_PARG(WINDOWS::LPWSTR), lpBuffer,
      PIN_PARG_END() );
  }else{
    result = -1;
  }
  LOGGER::info_msg("GetTempPathW:after");
  return result;
}

WINDOWS::BOOL replacement_GetVolumeNameForVolumeMountPointA(AFUNPTR pfnGetVolumeNameForVolumeMountPointA, WINDOWS::LPCSTR lpszVolumeMountPoint,
WINDOWS::LPSTR lpszVolumeName,
WINDOWS::DWORD cchBufferLength,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetVolumeNameForVolumeMountPointA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetVolumeNameForVolumeMountPointA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpszVolumeMountPoint,
      PIN_PARG(WINDOWS::LPSTR), lpszVolumeName,
      PIN_PARG(WINDOWS::DWORD), cchBufferLength,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetVolumeNameForVolumeMountPointA:after");
  return result;
}

WINDOWS::BOOL replacement_GetVolumeNameForVolumeMountPointW(AFUNPTR pfnGetVolumeNameForVolumeMountPointW, WINDOWS::LPCWSTR lpszVolumeMountPoint,
WINDOWS::LPWSTR lpszVolumeName,
WINDOWS::DWORD cchBufferLength,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetVolumeNameForVolumeMountPointW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetVolumeNameForVolumeMountPointW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpszVolumeMountPoint,
      PIN_PARG(WINDOWS::LPWSTR), lpszVolumeName,
      PIN_PARG(WINDOWS::DWORD), cchBufferLength,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetVolumeNameForVolumeMountPointW:after");
  return result;
}

WINDOWS::BOOL replacement_GetVolumePathNameA(AFUNPTR pfnGetVolumePathNameA, WINDOWS::LPCSTR lpszFileName,
WINDOWS::LPSTR lpszVolumePathName,
WINDOWS::DWORD cchBufferLength,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetVolumePathNameA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetVolumePathNameA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpszFileName,
      PIN_PARG(WINDOWS::LPSTR), lpszVolumePathName,
      PIN_PARG(WINDOWS::DWORD), cchBufferLength,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetVolumePathNameA:after");
  return result;
}

WINDOWS::BOOL replacement_GetVolumePathNameW(AFUNPTR pfnGetVolumePathNameW, WINDOWS::LPCWSTR lpszFileName,
WINDOWS::LPWSTR lpszVolumePathName,
WINDOWS::DWORD cchBufferLength,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetVolumePathNameW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetVolumePathNameW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpszFileName,
      PIN_PARG(WINDOWS::LPWSTR), lpszVolumePathName,
      PIN_PARG(WINDOWS::DWORD), cchBufferLength,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetVolumePathNameW:after");
  return result;
}

WINDOWS::BOOL replacement_GetVolumePathNamesForVolumeNameA(AFUNPTR pfnGetVolumePathNamesForVolumeNameA, WINDOWS::LPCSTR lpszVolumeName,
WINDOWS::LPCH lpszVolumePathNames,
WINDOWS::DWORD cchBufferLength,
WINDOWS::PDWORD lpcchReturnLength,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetVolumePathNamesForVolumeNameA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetVolumePathNamesForVolumeNameA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpszVolumeName,
      PIN_PARG(WINDOWS::LPCH), lpszVolumePathNames,
      PIN_PARG(WINDOWS::DWORD), cchBufferLength,
      PIN_PARG(WINDOWS::PDWORD), lpcchReturnLength,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetVolumePathNamesForVolumeNameA:after");
  return result;
}
       
WINDOWS::BOOL replacement_GetVolumePathNamesForVolumeNameW(AFUNPTR pfnGetVolumePathNamesForVolumeNameW, WINDOWS::LPCWSTR lpszVolumeName,
WINDOWS::LPWCH lpszVolumePathNames,
WINDOWS::DWORD cchBufferLength,
WINDOWS::PDWORD lpcchReturnLength,
CONTEXT * ctxt)
{
  LOGGER::info_msg("GetVolumePathNamesForVolumeNameW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnGetVolumePathNamesForVolumeNameW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpszVolumeName,
      PIN_PARG(WINDOWS::LPWCH), lpszVolumePathNames,
      PIN_PARG(WINDOWS::DWORD), cchBufferLength,
      PIN_PARG(WINDOWS::PDWORD), lpcchReturnLength,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("GetVolumePathNamesForVolumeNameW:after");
  return result;
}

WINDOWS::BOOL replacement_MoveFileWithProgressA(AFUNPTR pfnMoveFileWithProgressA, WINDOWS::LPCSTR lpExistingFileName,
WINDOWS::LPCSTR lpNewFileName,
WINDOWS::LPPROGRESS_ROUTINE lpProgressRoutine,
WINDOWS::LPVOID lpData,
WINDOWS::DWORD dwFlags,
CONTEXT * ctxt)
{
  LOGGER::info_msg("MoveFileWithProgressA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnMoveFileWithProgressA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpExistingFileName,
      PIN_PARG(WINDOWS::LPCSTR), lpNewFileName,
      PIN_PARG(WINDOWS::LPPROGRESS_ROUTINE), lpProgressRoutine,
      PIN_PARG(WINDOWS::LPVOID), lpData,
      PIN_PARG(WINDOWS::DWORD), dwFlags,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("MoveFileWithProgressA:after");
  return result;
}

WINDOWS::BOOL replacement_MoveFileWithProgressW(AFUNPTR pfnMoveFileWithProgressW, WINDOWS::LPCWSTR lpExistingFileName,
WINDOWS::LPCWSTR lpNewFileName,
WINDOWS::LPPROGRESS_ROUTINE lpProgressRoutine,
WINDOWS::LPVOID lpData,
WINDOWS::DWORD dwFlags,
CONTEXT * ctxt)
{
  LOGGER::info_msg("MoveFileWithProgressW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnMoveFileWithProgressW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpExistingFileName,
      PIN_PARG(WINDOWS::LPCWSTR), lpNewFileName,
      PIN_PARG(WINDOWS::LPPROGRESS_ROUTINE), lpProgressRoutine,
      PIN_PARG(WINDOWS::LPVOID), lpData,
      PIN_PARG(WINDOWS::DWORD), dwFlags,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("MoveFileWithProgressW:after");
  return result;
}

WINDOWS::BOOL replacement_RemoveDirectoryA(AFUNPTR pfnRemoveDirectoryA, WINDOWS::LPCSTR lpPathName,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RemoveDirectoryA:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRemoveDirectoryA, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpPathName,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("RemoveDirectoryA:after");
  return result;
}

WINDOWS::BOOL replacement_RemoveDirectoryW(AFUNPTR pfnRemoveDirectoryW, WINDOWS::LPCWSTR lpPathName,
CONTEXT * ctxt)
{
  LOGGER::info_msg("RemoveDirectoryW:before");
  WINDOWS::BOOL result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnRemoveDirectoryW, NULL,
      PIN_PARG(WINDOWS::BOOL), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpPathName,
      PIN_PARG_END() );
  }else{
    result = FALSE;
  }
  LOGGER::info_msg("RemoveDirectoryW:after");
  return result;
}

WINDOWS::DWORD replacement_SearchPathA(AFUNPTR pfnSearchPathA, WINDOWS::LPCSTR lpPath,
WINDOWS::LPCSTR lpFileName,
WINDOWS::LPCSTR lpExtension,
WINDOWS::DWORD nBufferLength,
WINDOWS::LPSTR lpBuffer,
WINDOWS::LPSTR *lpFilePart,
CONTEXT * ctxt)
{
  LOGGER::info_msg("SearchPathA:before");
  WINDOWS::DWORD result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnSearchPathA, NULL,
      PIN_PARG(WINDOWS::DWORD), &result,
      PIN_PARG(WINDOWS::LPCSTR), lpPath,
      PIN_PARG(WINDOWS::LPCSTR), lpFileName,
      PIN_PARG(WINDOWS::LPCSTR), lpExtension,
      PIN_PARG(WINDOWS::DWORD), nBufferLength,
      PIN_PARG(WINDOWS::LPSTR), lpBuffer,
      PIN_PARG(WINDOWS::LPSTR*), lpFilePart,
      PIN_PARG_END() );
  }else{
    result = -1;
  }
  LOGGER::info_msg("SearchPathA:after");
  return result;
}

WINDOWS::DWORD replacement_SearchPathW(AFUNPTR pfnSearchPathW, WINDOWS::LPCWSTR lpPath,
WINDOWS::LPCWSTR lpFileName,
WINDOWS::LPCWSTR lpExtension,
WINDOWS::DWORD nBufferLength,
WINDOWS::LPWSTR lpBuffer,
WINDOWS::LPWSTR *lpFilePart,
CONTEXT * ctxt)
{
  LOGGER::info_msg("SearchPathW:before");
  WINDOWS::DWORD result;
  if(RANDOM){
    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),
      CALLINGSTD_STDCALL, pfnSearchPathW, NULL,
      PIN_PARG(WINDOWS::DWORD), &result,
      PIN_PARG(WINDOWS::LPCWSTR), lpPath,
      PIN_PARG(WINDOWS::LPCWSTR), lpFileName,
      PIN_PARG(WINDOWS::LPCWSTR), lpExtension,
      PIN_PARG(WINDOWS::DWORD), nBufferLength,
      PIN_PARG(WINDOWS::LPWSTR), lpBuffer,
      PIN_PARG(WINDOWS::LPWSTR*), lpFilePart,
      PIN_PARG_END() );
  }else{
    result = -1;
  }
  LOGGER::info_msg("SearchPathW:after");
  return result;
}



void ImageLoad(IMG img, VOID *v)
{
	RTN rtn;
	rtn = RTN_FindByName(img, "IsProcessorFeaturePresent");
	rtn = RTN_FindByName(img, "IsProcessorFeaturePresent");
	if(RTN_Invalid() != rtn)
	{
		PROTO protoIsProcessorFeaturePresent = 
			PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
			CALLINGSTD_STDCALL,
			"IsProcessorFeaturePresent",
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG_END());

		RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_IsProcessorFeaturePresent,
			IARG_PROTOTYPE, protoIsProcessorFeaturePresent,
			IARG_ORIG_FUNCPTR,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
			IARG_CONTEXT,
			IARG_END);
		PROTO_Free (protoIsProcessorFeaturePresent);
	}
	rtn = RTN_FindByName(img, "CryptEncrypt");
	if(RTN_Invalid() != rtn)
	{
		PROTO protoCryptEncrypt = 
			PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
			CALLINGSTD_STDCALL,
			"CryptEncrypt",
			PIN_PARG(WINDOWS::HCRYPTKEY),
			PIN_PARG(WINDOWS::HCRYPTHASH),
			PIN_PARG(WINDOWS::BOOL),
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG(WINDOWS::PBYTE),
			PIN_PARG(WINDOWS::PDWORD),
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG_END());

		RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CryptEncrypt,
			IARG_PROTOTYPE, protoCryptEncrypt,
			IARG_ORIG_FUNCPTR,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
			IARG_CONTEXT,
			IARG_END);
		PROTO_Free (protoCryptEncrypt);
	}

	rtn = RTN_FindByName(img, "CryptDecrypt");
	if(RTN_Invalid() != rtn)
	{
		PROTO protoCryptDecrypt =
			PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
			CALLINGSTD_STDCALL,
			"CryptDecrypt",
			PIN_PARG(WINDOWS::HCRYPTKEY),
			PIN_PARG(WINDOWS::HCRYPTHASH),
			PIN_PARG(WINDOWS::BOOL),
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG(WINDOWS::BYTE),
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG_END());

		RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CryptDecrypt,
			IARG_PROTOTYPE, protoCryptDecrypt,
			IARG_ORIG_FUNCPTR,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
			IARG_CONTEXT,
			IARG_END);
		PROTO_Free (protoCryptDecrypt);
	}

	rtn = RTN_FindByName(img, "CertControlStore");
	if(RTN_Invalid() != rtn)
	{
		PROTO protoCertControlStore = 
			PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
			CALLINGSTD_STDCALL,
			"CertControlStore",
			PIN_PARG(WINDOWS::HCERTSTORE),
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG(WINDOWS::PVOID),
			PIN_PARG_END());

		RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CertControlStore,
			IARG_PROTOTYPE, protoCertControlStore,
			IARG_ORIG_FUNCPTR,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
			IARG_CONTEXT,
			IARG_END);
		PROTO_Free (protoCertControlStore);
	}

	rtn = RTN_FindByName(img, "CertCreateCertificateContext");
	if(RTN_Invalid() != rtn)
	{
		PROTO protoCertCreateCertificateContext = 
			PROTO_Allocate (PIN_PARG(WINDOWS::PCCERT_CONTEXT),
			CALLINGSTD_STDCALL,
			"CertCreateCertificateContext",
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG(WINDOWS::BYTE),
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG_END());

		RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CertCreateCertificateContext,
			IARG_PROTOTYPE, protoCertCreateCertificateContext,
			IARG_ORIG_FUNCPTR,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
			IARG_CONTEXT,
			IARG_END);
		PROTO_Free (protoCertCreateCertificateContext);
	}

	rtn = RTN_FindByName(img, "CertOpenStore");
	if(RTN_Invalid() != rtn)
	{
		PROTO protoCertOpenStore = 
			PROTO_Allocate (PIN_PARG(WINDOWS::HCERTSTORE),
			CALLINGSTD_STDCALL,
			"CertOpenStore",
			PIN_PARG(WINDOWS::LPCSTR),
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG(WINDOWS::HCRYPTPROV_LEGACY),
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG(WINDOWS::PVOID),
			PIN_PARG_END());

		RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CertOpenStore,
			IARG_PROTOTYPE, protoCertOpenStore,
			IARG_ORIG_FUNCPTR,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
			IARG_CONTEXT,
			IARG_END);
		PROTO_Free (protoCertOpenStore);
	}

	rtn = RTN_FindByName(img, "CertOpenSystemStoreA");
	if(RTN_Invalid() != rtn)
	{
		PROTO protoCertOpenSystemStoreA = 
			PROTO_Allocate (PIN_PARG(WINDOWS::HCERTSTORE),
			CALLINGSTD_STDCALL,
			"CertOpenSystemStoreA",
			PIN_PARG(WINDOWS::HCRYPTPROV_LEGACY),
			PIN_PARG(WINDOWS::LPCSTR),
			PIN_PARG_END());

		RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CertOpenSystemStoreA,
			IARG_PROTOTYPE, protoCertOpenSystemStoreA,
			IARG_ORIG_FUNCPTR,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
			IARG_CONTEXT,
			IARG_END);
		PROTO_Free (protoCertOpenSystemStoreA);
	}

	rtn = RTN_FindByName(img, "CertOpenSystemStoreW");
	if(RTN_Invalid() != rtn)
	{
		PROTO protoCertOpenSystemStoreW = 
			PROTO_Allocate (PIN_PARG(WINDOWS::HCERTSTORE),
			CALLINGSTD_STDCALL,
			"CertOpenSystemStoreW",
			PIN_PARG(WINDOWS::HCRYPTPROV_LEGACY),
			PIN_PARG(WINDOWS::LPCWSTR),
			PIN_PARG_END());

		RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CertOpenSystemStoreW,
			IARG_PROTOTYPE, protoCertOpenSystemStoreW,
			IARG_ORIG_FUNCPTR,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
			IARG_CONTEXT,
			IARG_END);
		PROTO_Free (protoCertOpenSystemStoreW);
	}

	rtn = RTN_FindByName(img, "CryptAcquireContextA");
	if(RTN_Invalid() != rtn)
	{
		PROTO protoCryptAcquireContextA = 
			PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
			CALLINGSTD_STDCALL,
			"CryptAcquireContextA",
			PIN_PARG(WINDOWS::HCRYPTPROV),
			PIN_PARG(WINDOWS::LPCSTR),
			PIN_PARG(WINDOWS::LPCSTR),
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG_END());

		RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CryptAcquireContextA,
			IARG_PROTOTYPE, protoCryptAcquireContextA,
			IARG_ORIG_FUNCPTR,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
			IARG_CONTEXT,
			IARG_END);
		PROTO_Free (protoCryptAcquireContextA);
	}

	rtn = RTN_FindByName(img, "CryptAcquireContextW");
	if(RTN_Invalid() != rtn)
	{
		PROTO protoCryptAcquireContextW = 
			PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
			CALLINGSTD_STDCALL,
			"CryptAcquireContextW",
			PIN_PARG(WINDOWS::HCRYPTPROV),
			PIN_PARG(WINDOWS::LPCWSTR),
			PIN_PARG(WINDOWS::LPCWSTR),
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG_END());

		RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CryptAcquireContextW,
			IARG_PROTOTYPE, protoCryptAcquireContextW,
			IARG_ORIG_FUNCPTR,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
			IARG_CONTEXT,
			IARG_END);
		PROTO_Free (protoCryptAcquireContextW);
	}

	rtn = RTN_FindByName(img, "CryptCreateHash");
	if(RTN_Invalid() != rtn)
	{
		PROTO protoCryptCreateHash =
			PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
			CALLINGSTD_STDCALL,
			"CryptCreateHash",
			PIN_PARG(WINDOWS::HCRYPTPROV),
			PIN_PARG(WINDOWS::ALG_ID),
			PIN_PARG(WINDOWS::HCRYPTKEY),
			PIN_PARG(WINDOWS::DWORD),
			PIN_PARG(WINDOWS::HCRYPTHASH),
			PIN_PARG_END());

		RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CryptCreateHash,
			IARG_PROTOTYPE, protoCryptCreateHash,
			IARG_ORIG_FUNCPTR,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
			IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
			IARG_CONTEXT,
			IARG_END);
		PROTO_Free (protoCryptCreateHash);
	}

	rtn = RTN_FindByName(img, "CryptExportKey");
if(RTN_Invalid() != rtn)
{
  PROTO protoCryptExportKey =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CryptExportKey",
      PIN_PARG(WINDOWS::HCRYPTKEY),
      PIN_PARG(WINDOWS::HCRYPTKEY),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::PBYTE),
      PIN_PARG(WINDOWS::PDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CryptExportKey,
    IARG_PROTOTYPE, protoCryptExportKey,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCryptExportKey);
}

rtn = RTN_FindByName(img, "CryptGenKey");
if(RTN_Invalid() != rtn)
{
  PROTO protoCryptGenKey = 
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CryptGenKey",
      PIN_PARG(WINDOWS::HCRYPTPROV),
      PIN_PARG(WINDOWS::ALG_ID),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::HCRYPTKEY),
      PIN_PARG_END());
  
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CryptGenKey,
    IARG_PROTOTYPE, protoCryptGenKey,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCryptGenKey);
}

rtn = RTN_FindByName(img, "CryptHashData");
if(RTN_Invalid() != rtn)
{
  PROTO protoCryptHashData =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CryptHashData",
      PIN_PARG(WINDOWS::HCRYPTHASH),
      PIN_PARG(WINDOWS::PBYTE),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END()); 
    
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CryptHashData,
    IARG_PROTOTYPE, protoCryptHashData,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCryptHashData);
}

rtn = RTN_FindByName(img, "CryptDecodeMessage");
if(RTN_Invalid() != rtn)
{
  PROTO protoCryptDecodeMessage =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CryptDecodeMessage",
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::PCRYPT_DECRYPT_MESSAGE_PARA),
      PIN_PARG(WINDOWS::PCRYPT_VERIFY_MESSAGE_PARA),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::PBYTE),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::PDWORD),
      PIN_PARG(WINDOWS::PDWORD),
      PIN_PARG(WINDOWS::PBYTE),
      PIN_PARG(WINDOWS::PDWORD),
      PIN_PARG(WINDOWS::PCCERT_CONTEXT*),
      PIN_PARG(WINDOWS::PCCERT_CONTEXT*),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CryptDecodeMessage,
    IARG_PROTOTYPE, protoCryptDecodeMessage,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 7,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 8,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 9,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 10,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 11,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 12,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCryptDecodeMessage);
}

rtn = RTN_FindByName(img, "CryptDecodeObjectEx");
if(RTN_Invalid() != rtn)
{
  PROTO protoCryptDecodeObjectEx =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CryptDecodeObjectEx",
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::PBYTE),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::PCRYPT_DECODE_PARA),
      PIN_PARG(WINDOWS::PVOID),
      PIN_PARG(WINDOWS::PDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CryptDecodeObjectEx,
    IARG_PROTOTYPE, protoCryptDecodeObjectEx,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 7,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCryptDecodeObjectEx);
}

rtn = RTN_FindByName(img, "CryptDecryptMessage");
if(RTN_Invalid() != rtn)
{
  PROTO protoCryptDecryptMessage = 
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CryptDecryptMessage",
      PIN_PARG(WINDOWS::PCRYPT_DECRYPT_MESSAGE_PARA),
      PIN_PARG(WINDOWS::PBYTE),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::PBYTE),
      PIN_PARG(WINDOWS::PDWORD),
      PIN_PARG(WINDOWS::PCCERT_CONTEXT*),
      PIN_PARG_END());
  
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CryptDecryptMessage,
    IARG_PROTOTYPE, protoCryptDecryptMessage,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCryptDecryptMessage);
}

rtn = RTN_FindByName(img, "CryptEncryptMessage");
if(RTN_Invalid() != rtn)
{
  PROTO protoCryptEncryptMessage = 
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CryptEncryptMessage",
      PIN_PARG(WINDOWS::PCRYPT_ENCRYPT_MESSAGE_PARA),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::PCCERT_CONTEXT*),
      PIN_PARG(WINDOWS::PBYTE),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::PBYTE),
      PIN_PARG(WINDOWS::PDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CryptEncryptMessage,
    IARG_PROTOTYPE, protoCryptEncryptMessage,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCryptEncryptMessage);
}

rtn = RTN_FindByName(img, "CryptHashMessage");
if(RTN_Invalid() != rtn)
{
  PROTO protoCryptHashMessage =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CryptHashMessage",
      PIN_PARG(WINDOWS::PCRYPT_HASH_MESSAGE_PARA),
      PIN_PARG(WINDOWS::BOOL),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::PBYTE),
      PIN_PARG(WINDOWS::PDWORD),
      PIN_PARG(WINDOWS::PBYTE),
      PIN_PARG(WINDOWS::PDWORD),
      PIN_PARG(WINDOWS::PBYTE),
      PIN_PARG(WINDOWS::PDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CryptHashMessage,
    IARG_PROTOTYPE, protoCryptHashMessage,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 7,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 8,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCryptHashMessage);
}

rtn = RTN_FindByName(img, "NetGetJoinInformation");
if(RTN_Invalid() != rtn)
{
  PROTO protoNetGetJoinInformation = 
    PROTO_Allocate (PIN_PARG(WINDOWS::NET_API_STATUS),
      CALLINGSTD_STDCALL,
      "NetGetJoinInformation",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPWSTR*),
      PIN_PARG(WINDOWS::PNETSETUP_JOIN_STATUS),
      PIN_PARG_END());
  
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_NetGetJoinInformation,
    IARG_PROTOTYPE, protoNetGetJoinInformation,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoNetGetJoinInformation);
}

rtn = RTN_FindByName(img, "NetShareEnum");
if(RTN_Invalid() != rtn)
{
  PROTO protoNetShareEnum = 
    PROTO_Allocate (PIN_PARG(WINDOWS::NET_API_STATUS),
      CALLINGSTD_STDCALL,
      "NetShareEnum",
      PIN_PARG(WINDOWS::LMSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPBYTE*),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_NetShareEnum,
    IARG_PROTOTYPE, protoNetShareEnum,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoNetShareEnum);
}

rtn = RTN_FindByName(img, "NetUserGetInfo");
if(RTN_Invalid() != rtn)
{
  PROTO protoNetUserGetInfo = 
    PROTO_Allocate (PIN_PARG(WINDOWS::NET_API_STATUS),
      CALLINGSTD_STDCALL,
      "NetUserGetInfo",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPBYTE*),
      PIN_PARG_END());
  
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_NetUserGetInfo,
    IARG_PROTOTYPE, protoNetUserGetInfo,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoNetUserGetInfo);
}

rtn = RTN_FindByName(img, "NetUserGetLocalGroups");
if(RTN_Invalid() != rtn)
{
  PROTO protoNetUserGetLocalGroups =
    PROTO_Allocate (PIN_PARG(WINDOWS::NET_API_STATUS),
      CALLINGSTD_STDCALL,
      "NetUserGetLocalGroups",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPBYTE*),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_NetUserGetLocalGroups,
    IARG_PROTOTYPE, protoNetUserGetLocalGroups,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 7,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoNetUserGetLocalGroups);
}

rtn = RTN_FindByName(img, "FindResourceA");
if(RTN_Invalid() != rtn)
{
  PROTO protoFindResourceA = 
    PROTO_Allocate (PIN_PARG(WINDOWS::HRSRC),
      CALLINGSTD_STDCALL,
      "FindResourceA",
      PIN_PARG(WINDOWS::HMODULE),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_FindResourceA,
    IARG_PROTOTYPE, protoFindResourceA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoFindResourceA);
}

rtn = RTN_FindByName(img, "FindResourceExA");
if(RTN_Invalid() != rtn)
{
  PROTO protoFindResourceExA =
    PROTO_Allocate (PIN_PARG(WINDOWS::HRSRC),
      CALLINGSTD_STDCALL,
      "FindResourceExA",
      PIN_PARG(WINDOWS::HMODULE),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::WORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_FindResourceExA,
    IARG_PROTOTYPE, protoFindResourceExA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoFindResourceExA);
}

rtn = RTN_FindByName(img, "LoadResource");
if(RTN_Invalid() != rtn)
{
  PROTO protoLoadResource =
    PROTO_Allocate (PIN_PARG(WINDOWS::HGLOBAL),
      CALLINGSTD_STDCALL,
      "LoadResource",
      PIN_PARG(WINDOWS::HMODULE),
      PIN_PARG(WINDOWS::HRSRC),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_LoadResource,
    IARG_PROTOTYPE, protoLoadResource,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoLoadResource);
}

rtn = RTN_FindByName(img, "ControlService");
if(RTN_Invalid() != rtn)
{
  PROTO protoControlService =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "ControlService",
      PIN_PARG(WINDOWS::SC_HANDLE),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPSERVICE_STATUS),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_ControlService,
    IARG_PROTOTYPE, protoControlService,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoControlService);
}

rtn = RTN_FindByName(img, "CreateServiceA");
if(RTN_Invalid() != rtn)
{
  PROTO protoCreateServiceA = 
    PROTO_Allocate (PIN_PARG(WINDOWS::SC_HANDLE),
      CALLINGSTD_STDCALL,
      "CreateServiceA",
      PIN_PARG(WINDOWS::SC_HANDLE),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CreateServiceA,
    IARG_PROTOTYPE, protoCreateServiceA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 7,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 8,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 9,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 10,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 11,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 12,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCreateServiceA);
}

rtn = RTN_FindByName(img, "CreateServiceW");
if(RTN_Invalid() != rtn)
{
  PROTO protoCreateServiceW =
    PROTO_Allocate (PIN_PARG(WINDOWS::SC_HANDLE),
      CALLINGSTD_STDCALL,
      "CreateServiceW",
      PIN_PARG(WINDOWS::SC_HANDLE),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CreateServiceW,
    IARG_PROTOTYPE, protoCreateServiceW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 7,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 8,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 9,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 10,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 11,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 12,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCreateServiceW);
}

rtn = RTN_FindByName(img, "DeleteService");
if(RTN_Invalid() != rtn)
{
  PROTO protoDeleteService = 
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "DeleteService",
      PIN_PARG(WINDOWS::SC_HANDLE),
      PIN_PARG_END());
  
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_DeleteService,
    IARG_PROTOTYPE, protoDeleteService,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoDeleteService);
}

rtn = RTN_FindByName(img, "EnumServicesStatusA");
if(RTN_Invalid() != rtn)
{
  PROTO protoEnumServicesStatusA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "EnumServicesStatusA",
      PIN_PARG(WINDOWS::SC_HANDLE),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPENUM_SERVICE_STATUSA),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_EnumServicesStatusA,
    IARG_PROTOTYPE, protoEnumServicesStatusA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 7,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoEnumServicesStatusA);
}

rtn = RTN_FindByName(img, "EnumServicesStatusW");
if(RTN_Invalid() != rtn)
{
  PROTO protoEnumServicesStatusW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "EnumServicesStatusW",
      PIN_PARG(WINDOWS::SC_HANDLE),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPENUM_SERVICE_STATUSW),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_EnumServicesStatusW,
    IARG_PROTOTYPE, protoEnumServicesStatusW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 7,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoEnumServicesStatusW);
}

rtn = RTN_FindByName(img, "OpenSCManagerA");
if(RTN_Invalid() != rtn)
{
  PROTO protoOpenSCManagerA = 
    PROTO_Allocate (PIN_PARG(WINDOWS::SC_HANDLE),
      CALLINGSTD_STDCALL,
      "OpenSCManagerA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());
  
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_OpenSCManagerA,
    IARG_PROTOTYPE, protoOpenSCManagerA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoOpenSCManagerA);
}

rtn = RTN_FindByName(img, "OpenSCManagerW");
if(RTN_Invalid() != rtn)
{
  PROTO protoOpenSCManagerW =
    PROTO_Allocate (PIN_PARG(WINDOWS::SC_HANDLE),
      CALLINGSTD_STDCALL,
      "OpenSCManagerW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_OpenSCManagerW,
    IARG_PROTOTYPE, protoOpenSCManagerW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoOpenSCManagerW);
}

rtn = RTN_FindByName(img, "OpenServiceA");
if(RTN_Invalid() != rtn)
{
  PROTO protoOpenServiceA =
    PROTO_Allocate (PIN_PARG(WINDOWS::SC_HANDLE),
      CALLINGSTD_STDCALL,
      "OpenServiceA",
      PIN_PARG(WINDOWS::SC_HANDLE),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_OpenServiceA,
    IARG_PROTOTYPE, protoOpenServiceA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoOpenServiceA);
}

rtn = RTN_FindByName(img, "OpenServiceW");
if(RTN_Invalid() != rtn)
{
  PROTO protoOpenServiceW =
    PROTO_Allocate (PIN_PARG(WINDOWS::SC_HANDLE),
      CALLINGSTD_STDCALL,
      "OpenServiceW",
      PIN_PARG(WINDOWS::SC_HANDLE),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_OpenServiceW,
    IARG_PROTOTYPE, protoOpenServiceW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoOpenServiceW);
}

rtn = RTN_FindByName(img, "StartServiceA");
if(RTN_Invalid() != rtn)
{
  PROTO protoStartServiceA = 
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "StartServiceA",
      PIN_PARG(WINDOWS::SC_HANDLE),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPCSTR*),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_StartServiceA,
    IARG_PROTOTYPE, protoStartServiceA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoStartServiceA);
}

rtn = RTN_FindByName(img, "StartServiceW");
if(RTN_Invalid() != rtn)
{
  PROTO protoStartServiceW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "StartServiceW",
      PIN_PARG(WINDOWS::SC_HANDLE),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPCWSTR*),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_StartServiceW,
    IARG_PROTOTYPE, protoStartServiceW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoStartServiceW);
}

rtn = RTN_FindByName(img, "LookupPrivilegeValueA");
if(RTN_Invalid() != rtn)
{
  PROTO protoLookupPrivilegeValueA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "LookupPrivilegeValueA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::PLUID),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_LookupPrivilegeValueA,
    IARG_PROTOTYPE, protoLookupPrivilegeValueA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoLookupPrivilegeValueA);
}

rtn = RTN_FindByName(img, "LookupPrivilegeValueW");
if(RTN_Invalid() != rtn)
{
  PROTO protoLookupPrivilegeValueW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "LookupPrivilegeValueW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::PLUID),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_LookupPrivilegeValueW,
    IARG_PROTOTYPE, protoLookupPrivilegeValueW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoLookupPrivilegeValueW);
}

rtn = RTN_FindByName(img, "ExitWindowsEx");
if(RTN_Invalid() != rtn)
{
  PROTO protoExitWindowsEx = 
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "ExitWindowsEx",
      PIN_PARG(WINDOWS::UINT),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());
  
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_ExitWindowsEx,
    IARG_PROTOTYPE, protoExitWindowsEx,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoExitWindowsEx);
}

rtn = RTN_FindByName(img, "SetWindowsHookExA");
if(RTN_Invalid() != rtn)
{
  PROTO protoSetWindowsHookExA =
    PROTO_Allocate (PIN_PARG(WINDOWS::HHOOK),
      CALLINGSTD_STDCALL,
      "SetWindowsHookExA",
      PIN_PARG(WINDOWS::INT),
      PIN_PARG(WINDOWS::HOOKPROC),
      PIN_PARG(WINDOWS::HINSTANCE),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_SetWindowsHookExA,
    IARG_PROTOTYPE, protoSetWindowsHookExA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoSetWindowsHookExA);
}

rtn = RTN_FindByName(img, "SetWindowsHookExW");
if(RTN_Invalid() != rtn)
{
  PROTO protoSetWindowsHookExW =
    PROTO_Allocate (PIN_PARG(WINDOWS::HHOOK),
      CALLINGSTD_STDCALL,
      "SetWindowsHookExW",
      PIN_PARG(WINDOWS::INT),
      PIN_PARG(WINDOWS::HOOKPROC),
      PIN_PARG(WINDOWS::HINSTANCE),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_SetWindowsHookExW,
    IARG_PROTOTYPE, protoSetWindowsHookExW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoSetWindowsHookExW);
}

rtn = RTN_FindByName(img, "UnhookWindowsHookEx");
if(RTN_Invalid() != rtn)
{
  PROTO protoUnhookWindowsHookEx =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "UnhookWindowsHookEx",
      PIN_PARG(WINDOWS::HHOOK),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_UnhookWindowsHookEx,
    IARG_PROTOTYPE, protoUnhookWindowsHookEx,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoUnhookWindowsHookEx);
}

rtn = RTN_FindByName(img, "CreateProcessA");
if(RTN_Invalid() != rtn)
{
  PROTO protoCreateProcessA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CreateProcessA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPSTR),
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES),
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES),
      PIN_PARG(WINDOWS::BOOL),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPVOID),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPSTARTUPINFOA),
      PIN_PARG(WINDOWS::LPPROCESS_INFORMATION),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CreateProcessA,
    IARG_PROTOTYPE, protoCreateProcessA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 7,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 8,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 9,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCreateProcessA);
}

rtn = RTN_FindByName(img, "CreateProcessW");
if(RTN_Invalid() != rtn)
{
  PROTO protoCreateProcessW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CreateProcessW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPWSTR),
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES),
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES),
      PIN_PARG(WINDOWS::BOOL),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPVOID),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPSTARTUPINFOW),
      PIN_PARG(WINDOWS::LPPROCESS_INFORMATION),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CreateProcessW,
    IARG_PROTOTYPE, protoCreateProcessW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 7,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 8,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 9,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCreateProcessW);
}

rtn = RTN_FindByName(img, "CreateRemoteThread");
if(RTN_Invalid() != rtn)
{
  PROTO protoCreateRemoteThread =
    PROTO_Allocate (PIN_PARG(WINDOWS::HANDLE),
      CALLINGSTD_STDCALL,
      "CreateRemoteThread",
      PIN_PARG(WINDOWS::HANDLE),
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES),
      PIN_PARG(WINDOWS::SIZE_T),
      PIN_PARG(WINDOWS::LPTHREAD_START_ROUTINE),
      PIN_PARG(WINDOWS::LPVOID),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CreateRemoteThread,
    IARG_PROTOTYPE, protoCreateRemoteThread,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCreateRemoteThread);
}

rtn = RTN_FindByName(img, "CreateThread");
if(RTN_Invalid() != rtn)
{
  PROTO protoCreateThread =
    PROTO_Allocate (PIN_PARG(WINDOWS::HANDLE),
      CALLINGSTD_STDCALL,
      "CreateThread",
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES),
      PIN_PARG(WINDOWS::SIZE_T),
      PIN_PARG(WINDOWS::LPTHREAD_START_ROUTINE),
      PIN_PARG(WINDOWS::LPVOID),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CreateThread,
    IARG_PROTOTYPE, protoCreateThread,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCreateThread);
}

rtn = RTN_FindByName(img, "CreateToolhelp32Snapshot");
if(RTN_Invalid() != rtn)
{
  PROTO protoCreateToolhelp32Snapshot =
    PROTO_Allocate (PIN_PARG(WINDOWS::HANDLE),
      CALLINGSTD_STDCALL,
      "CreateToolhelp32Snapshot",
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CreateToolhelp32Snapshot,
    IARG_PROTOTYPE, protoCreateToolhelp32Snapshot,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCreateToolhelp32Snapshot);
}

rtn = RTN_FindByName(img, "Toolhelp32ReadProcessMemory");
if(RTN_Invalid() != rtn)
{
  PROTO protoToolhelp32ReadProcessMemory =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "Toolhelp32ReadProcessMemory",
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPCVOID),
      PIN_PARG(WINDOWS::LPVOID),
      PIN_PARG(WINDOWS::SIZE_T),
      PIN_PARG(WINDOWS::SIZE_T*),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_Toolhelp32ReadProcessMemory,
    IARG_PROTOTYPE, protoToolhelp32ReadProcessMemory,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoToolhelp32ReadProcessMemory);
}

rtn = RTN_FindByName(img, "WriteProcessMemory");
if(RTN_Invalid() != rtn)
{
  PROTO protoWriteProcessMemory =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "WriteProcessMemory",
      PIN_PARG(WINDOWS::HANDLE),
      PIN_PARG(WINDOWS::LPVOID),
      PIN_PARG(WINDOWS::LPCVOID),
      PIN_PARG(WINDOWS::SIZE_T),
      PIN_PARG(WINDOWS::SIZE_T*),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_WriteProcessMemory,
    IARG_PROTOTYPE, protoWriteProcessMemory,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoWriteProcessMemory);
}

rtn = RTN_FindByName(img, "ShellExecuteExA");
if(RTN_Invalid() != rtn)
{
  PROTO protoShellExecuteExA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "ShellExecuteExA",
      PIN_PARG(WINDOWS::SHELLEXECUTEINFOA*),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_ShellExecuteExA,
    IARG_PROTOTYPE, protoShellExecuteExA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoShellExecuteExA);
}

rtn = RTN_FindByName(img, "ShellExecuteExW");
if(RTN_Invalid() != rtn)
{
  PROTO protoShellExecuteExW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "ShellExecuteExW",
      PIN_PARG(WINDOWS::SHELLEXECUTEINFOW*),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_ShellExecuteExW,
    IARG_PROTOTYPE, protoShellExecuteExW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoShellExecuteExW);
}

rtn = RTN_FindByName(img, "RegCreateKeyExA");
if(RTN_Invalid() != rtn)
{
  PROTO protoRegCreateKeyExA =
    PROTO_Allocate (PIN_PARG(WINDOWS::LSTATUS),
      CALLINGSTD_STDCALL,
      "RegCreateKeyExA",
      PIN_PARG(WINDOWS::HKEY),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::REGSAM),
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES),
      PIN_PARG(WINDOWS::PHKEY),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RegCreateKeyExA,
    IARG_PROTOTYPE, protoRegCreateKeyExA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 7,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 8,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRegCreateKeyExA);
}

rtn = RTN_FindByName(img, "RegCreateKeyExW");
if(RTN_Invalid() != rtn)
{
  PROTO protoRegCreateKeyExW =
    PROTO_Allocate (PIN_PARG(WINDOWS::LSTATUS),
      CALLINGSTD_STDCALL,
      "RegCreateKeyExW",
      PIN_PARG(WINDOWS::HKEY),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPWSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::REGSAM),
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES),
      PIN_PARG(WINDOWS::PHKEY),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RegCreateKeyExW,
    IARG_PROTOTYPE, protoRegCreateKeyExW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 7,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 8,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRegCreateKeyExW);
}

rtn = RTN_FindByName(img, "RegDeleteKeyA");
if(RTN_Invalid() != rtn)
{
  PROTO protoRegDeleteKeyA =
    PROTO_Allocate (PIN_PARG(WINDOWS::LSTATUS),
      CALLINGSTD_STDCALL,
      "RegDeleteKeyA",
      PIN_PARG(WINDOWS::HKEY),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RegDeleteKeyA,
    IARG_PROTOTYPE, protoRegDeleteKeyA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRegDeleteKeyA);
}

rtn = RTN_FindByName(img, "RegDeleteKeyW");
if(RTN_Invalid() != rtn)
{
  PROTO protoRegDeleteKeyW =
    PROTO_Allocate (PIN_PARG(WINDOWS::LSTATUS),
      CALLINGSTD_STDCALL,
      "RegDeleteKeyW",
      PIN_PARG(WINDOWS::HKEY),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RegDeleteKeyW,
    IARG_PROTOTYPE, protoRegDeleteKeyW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRegDeleteKeyW);
}

rtn = RTN_FindByName(img, "RegDeleteValueA");
if(RTN_Invalid() != rtn)
{
  PROTO protoRegDeleteValueA =
    PROTO_Allocate (PIN_PARG(WINDOWS::LSTATUS),
      CALLINGSTD_STDCALL,
      "RegDeleteValueA",
      PIN_PARG(WINDOWS::HKEY),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RegDeleteValueA,
    IARG_PROTOTYPE, protoRegDeleteValueA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRegDeleteValueA);
}

rtn = RTN_FindByName(img, "RegDeleteValueW");
if(RTN_Invalid() != rtn)
{
  PROTO protoRegDeleteValueW =
    PROTO_Allocate (PIN_PARG(WINDOWS::LSTATUS),
      CALLINGSTD_STDCALL,
      "RegDeleteValueW",
      PIN_PARG(WINDOWS::HKEY),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RegDeleteValueW,
    IARG_PROTOTYPE, protoRegDeleteValueW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRegDeleteValueW);
}

rtn = RTN_FindByName(img, "RegOpenKeyExA");
if(RTN_Invalid() != rtn)
{
  PROTO protoRegOpenKeyExA = 
    PROTO_Allocate (PIN_PARG(WINDOWS::LSTATUS),
      CALLINGSTD_STDCALL,
      "RegOpenKeyExA",
      PIN_PARG(WINDOWS::HKEY),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::REGSAM),
      PIN_PARG(WINDOWS::PHKEY),
      PIN_PARG_END());
  
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RegOpenKeyExA,
    IARG_PROTOTYPE, protoRegOpenKeyExA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRegOpenKeyExA);
}

rtn = RTN_FindByName(img, "RegOpenKeyExW");
if(RTN_Invalid() != rtn)
{
  PROTO protoRegOpenKeyExW =
    PROTO_Allocate (PIN_PARG(WINDOWS::LSTATUS),
      CALLINGSTD_STDCALL,
      "RegOpenKeyExW",
      PIN_PARG(WINDOWS::HKEY),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::REGSAM),
      PIN_PARG(WINDOWS::PHKEY),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RegOpenKeyExW,
    IARG_PROTOTYPE, protoRegOpenKeyExW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRegOpenKeyExW);
}

rtn = RTN_FindByName(img, "RegQueryInfoKeyA");
if(RTN_Invalid() != rtn)
{
  PROTO protoRegQueryInfoKeyA =
    PROTO_Allocate (PIN_PARG(WINDOWS::LSTATUS),
      CALLINGSTD_STDCALL,
      "RegQueryInfoKeyA",
      PIN_PARG(WINDOWS::HKEY),
      PIN_PARG(WINDOWS::LPSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::PFILETIME),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RegQueryInfoKeyA,
    IARG_PROTOTYPE, protoRegQueryInfoKeyA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 7,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 8,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 9,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 10,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 11,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRegQueryInfoKeyA);
}

rtn = RTN_FindByName(img, "RegQueryInfoKeyW");
if(RTN_Invalid() != rtn)
{
  PROTO protoRegQueryInfoKeyW =
    PROTO_Allocate (PIN_PARG(WINDOWS::LSTATUS),
      CALLINGSTD_STDCALL,
      "RegQueryInfoKeyW",
      PIN_PARG(WINDOWS::HKEY),
      PIN_PARG(WINDOWS::LPWSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::PFILETIME),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RegQueryInfoKeyW,
    IARG_PROTOTYPE, protoRegQueryInfoKeyW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 7,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 8,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 9,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 10,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 11,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRegQueryInfoKeyW);
}

rtn = RTN_FindByName(img, "RegQueryValueExA");
if(RTN_Invalid() != rtn)
{
  PROTO protoRegQueryValueExA =
    PROTO_Allocate (PIN_PARG(WINDOWS::LSTATUS),
      CALLINGSTD_STDCALL,
      "RegQueryValueExA",
      PIN_PARG(WINDOWS::HKEY),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPBYTE),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RegQueryValueExA,
    IARG_PROTOTYPE, protoRegQueryValueExA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRegQueryValueExA);
}

rtn = RTN_FindByName(img, "RegQueryValueExW");
if(RTN_Invalid() != rtn)
{
  PROTO protoRegQueryValueExW =
    PROTO_Allocate (PIN_PARG(WINDOWS::LSTATUS),
      CALLINGSTD_STDCALL,
      "RegQueryValueExW",
      PIN_PARG(WINDOWS::HKEY),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPBYTE),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RegQueryValueExW,
    IARG_PROTOTYPE, protoRegQueryValueExW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRegQueryValueExW);
}

rtn = RTN_FindByName(img, "RegSetValueExA");
if(RTN_Invalid() != rtn)
{
  PROTO protoRegSetValueExA = 
    PROTO_Allocate (PIN_PARG(WINDOWS::LSTATUS),
      CALLINGSTD_STDCALL,
      "RegSetValueExA",
      PIN_PARG(WINDOWS::HKEY),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::BYTE*),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());
  
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RegSetValueExA,
    IARG_PROTOTYPE, protoRegSetValueExA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRegSetValueExA);
}

rtn = RTN_FindByName(img, "RegSetValueExW");
if(RTN_Invalid() != rtn)
{
  PROTO protoRegSetValueExW = 
    PROTO_Allocate (PIN_PARG(WINDOWS::LSTATUS),
      CALLINGSTD_STDCALL,
      "RegSetValueExW",
      PIN_PARG(WINDOWS::HKEY),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::BYTE*),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());
  
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RegSetValueExW,
    IARG_PROTOTYPE, protoRegSetValueExW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRegSetValueExW);
}

rtn = RTN_FindByName(img, "GetUserNameA");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetUserNameA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetUserNameA",
      PIN_PARG(WINDOWS::LPSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetUserNameA,
    IARG_PROTOTYPE, protoGetUserNameA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetUserNameA);
}

rtn = RTN_FindByName(img, "GetUserNameW");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetUserNameW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetUserNameW",
      PIN_PARG(WINDOWS::LPWSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetUserNameW,
    IARG_PROTOTYPE, protoGetUserNameW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetUserNameW);
}

rtn = RTN_FindByName(img, "LookupAccountSidA");
if(RTN_Invalid() != rtn)
{
  PROTO protoLookupAccountSidA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "LookupAccountSidA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::PSID),
      PIN_PARG(WINDOWS::LPSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::PSID_NAME_USE),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_LookupAccountSidA,
    IARG_PROTOTYPE, protoLookupAccountSidA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoLookupAccountSidA);
}

rtn = RTN_FindByName(img, "LookupAccountSidW");
if(RTN_Invalid() != rtn)
{
  PROTO protoLookupAccountSidW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "LookupAccountSidW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::PSID),
      PIN_PARG(WINDOWS::LPWSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPWSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::PSID_NAME_USE),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_LookupAccountSidW,
    IARG_PROTOTYPE, protoLookupAccountSidW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoLookupAccountSidW);
}

rtn = RTN_FindByName(img, "GetComputerNameA");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetComputerNameA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetComputerNameA",
      PIN_PARG(WINDOWS::LPSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetComputerNameA,
    IARG_PROTOTYPE, protoGetComputerNameA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetComputerNameA);
}

rtn = RTN_FindByName(img, "GetComputerNameW");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetComputerNameW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetComputerNameW",
      PIN_PARG(WINDOWS::LPWSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetComputerNameW,
    IARG_PROTOTYPE, protoGetComputerNameW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetComputerNameW);
}

rtn = RTN_FindByName(img, "GetDiskFreeSpaceExA");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetDiskFreeSpaceExA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetDiskFreeSpaceExA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::PULARGE_INTEGER),
      PIN_PARG(WINDOWS::PULARGE_INTEGER),
      PIN_PARG(WINDOWS::PULARGE_INTEGER),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetDiskFreeSpaceExA,
    IARG_PROTOTYPE, protoGetDiskFreeSpaceExA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetDiskFreeSpaceExA);
}

rtn = RTN_FindByName(img, "GetDiskFreeSpaceExW");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetDiskFreeSpaceExW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetDiskFreeSpaceExW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::PULARGE_INTEGER),
      PIN_PARG(WINDOWS::PULARGE_INTEGER),
      PIN_PARG(WINDOWS::PULARGE_INTEGER),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetDiskFreeSpaceExW,
    IARG_PROTOTYPE, protoGetDiskFreeSpaceExW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetDiskFreeSpaceExW);
}

rtn = RTN_FindByName(img, "GetDiskFreeSpaceA");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetDiskFreeSpaceA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetDiskFreeSpaceA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetDiskFreeSpaceA,
    IARG_PROTOTYPE, protoGetDiskFreeSpaceA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetDiskFreeSpaceA);
}

rtn = RTN_FindByName(img, "GetDiskFreeSpaceW");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetDiskFreeSpaceW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetDiskFreeSpaceW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetDiskFreeSpaceW,
    IARG_PROTOTYPE, protoGetDiskFreeSpaceW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetDiskFreeSpaceW);
}

rtn = RTN_FindByName(img, "GetTimeZoneInformation");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetTimeZoneInformation =
    PROTO_Allocate (PIN_PARG(WINDOWS::DWORD),
      CALLINGSTD_STDCALL,
      "GetTimeZoneInformation",
      PIN_PARG(WINDOWS::LPTIME_ZONE_INFORMATION),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetTimeZoneInformation,
    IARG_PROTOTYPE, protoGetTimeZoneInformation,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetTimeZoneInformation);
}

rtn = RTN_FindByName(img, "SHGetFolderPathA");
if(RTN_Invalid() != rtn)
{
  PROTO protoSHGetFolderPathA =
    PROTO_Allocate (PIN_PARG(WINDOWS::HRESULT),
      CALLINGSTD_STDCALL,
      "SHGetFolderPathA",
      PIN_PARG(WINDOWS::HWND),
      PIN_PARG(WINDOWS::INT),
      PIN_PARG(WINDOWS::HANDLE),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_SHGetFolderPathA,
    IARG_PROTOTYPE, protoSHGetFolderPathA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoSHGetFolderPathA);
}

rtn = RTN_FindByName(img, "SHGetFolderPathW");
if(RTN_Invalid() != rtn)
{
  PROTO protoSHGetFolderPathW = 
    PROTO_Allocate (PIN_PARG(WINDOWS::HRESULT),
      CALLINGSTD_STDCALL,
      "SHGetFolderPathW",
      PIN_PARG(WINDOWS::HWND),
      PIN_PARG(WINDOWS::INT),
      PIN_PARG(WINDOWS::HANDLE),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPWSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_SHGetFolderPathW,
    IARG_PROTOTYPE, protoSHGetFolderPathW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoSHGetFolderPathW);
}

rtn = RTN_FindByName(img, "CopyFileA");
if(RTN_Invalid() != rtn)
{
  PROTO protoCopyFileA = 
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CopyFileA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::BOOL),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CopyFileA,
    IARG_PROTOTYPE, protoCopyFileA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCopyFileA);
}

rtn = RTN_FindByName(img, "CopyFileW");
if(RTN_Invalid() != rtn)
{
  PROTO protoCopyFileW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CopyFileW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::BOOL),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CopyFileW,
    IARG_PROTOTYPE, protoCopyFileW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCopyFileW);
}

rtn = RTN_FindByName(img, "CopyFileExA");
if(RTN_Invalid() != rtn)
{
  PROTO protoCopyFileExA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CopyFileExA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPPROGRESS_ROUTINE),
      PIN_PARG(WINDOWS::LPVOID),
      PIN_PARG(WINDOWS::LPBOOL),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CopyFileExA,
    IARG_PROTOTYPE, protoCopyFileExA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCopyFileExA);
}

rtn = RTN_FindByName(img, "CopyFileExW");
if(RTN_Invalid() != rtn)
{
  PROTO protoCopyFileExW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CopyFileExW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPPROGRESS_ROUTINE),
      PIN_PARG(WINDOWS::LPVOID),
      PIN_PARG(WINDOWS::LPBOOL),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CopyFileExW,
    IARG_PROTOTYPE, protoCopyFileExW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCopyFileExW);
}

rtn = RTN_FindByName(img, "ReadFile");
if(RTN_Invalid() != rtn)
{
  PROTO protoReadFile =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "ReadFile",
      PIN_PARG(WINDOWS::HANDLE),
      PIN_PARG(WINDOWS::LPVOID),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPOVERLAPPED),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_ReadFile,
    IARG_PROTOTYPE, protoReadFile,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoReadFile);
}

rtn = RTN_FindByName(img, "WriteFile");
if(RTN_Invalid() != rtn)
{
  PROTO protoWriteFile =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "WriteFile",
      PIN_PARG(WINDOWS::HANDLE),
      PIN_PARG(WINDOWS::LPCVOID),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPOVERLAPPED),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_WriteFile,
    IARG_PROTOTYPE, protoWriteFile,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoWriteFile);
}

rtn = RTN_FindByName(img, "OpenFile");
if(RTN_Invalid() != rtn)
{
  PROTO protoOpenFile =
    PROTO_Allocate (PIN_PARG(WINDOWS::HFILE),
      CALLINGSTD_STDCALL,
      "OpenFile",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPOFSTRUCT),
      PIN_PARG(WINDOWS::UINT),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_OpenFile,
    IARG_PROTOTYPE, protoOpenFile,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoOpenFile);
}

rtn = RTN_FindByName(img, "CreateDirectoryA");
if(RTN_Invalid() != rtn)
{
  PROTO protoCreateDirectoryA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CreateDirectoryA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CreateDirectoryA,
    IARG_PROTOTYPE, protoCreateDirectoryA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCreateDirectoryA);
}

rtn = RTN_FindByName(img, "CreateDirectoryW");
if(RTN_Invalid() != rtn)
{
  PROTO protoCreateDirectoryW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CreateDirectoryW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CreateDirectoryW,
    IARG_PROTOTYPE, protoCreateDirectoryW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCreateDirectoryW);
}

rtn = RTN_FindByName(img, "CreateDirectoryExA");
if(RTN_Invalid() != rtn)
{
  PROTO protoCreateDirectoryExA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CreateDirectoryExA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CreateDirectoryExA,
    IARG_PROTOTYPE, protoCreateDirectoryExA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCreateDirectoryExA);
}

rtn = RTN_FindByName(img, "CreateDirectoryExW");
if(RTN_Invalid() != rtn)
{
  PROTO protoCreateDirectoryExW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "CreateDirectoryExW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPSECURITY_ATTRIBUTES),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_CreateDirectoryExW,
    IARG_PROTOTYPE, protoCreateDirectoryExW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoCreateDirectoryExW);
}

rtn = RTN_FindByName(img, "DeleteFileA");
if(RTN_Invalid() != rtn)
{
  PROTO protoDeleteFileA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "DeleteFileA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_DeleteFileA,
    IARG_PROTOTYPE, protoDeleteFileA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoDeleteFileA);
}

rtn = RTN_FindByName(img, "DeleteFileW");
if(RTN_Invalid() != rtn)
{
  PROTO protoDeleteFileW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "DeleteFileW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_DeleteFileW,
    IARG_PROTOTYPE, protoDeleteFileW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoDeleteFileW);
}

rtn = RTN_FindByName(img, "DeviceIoControl");
if(RTN_Invalid() != rtn)
{
  PROTO protoDeviceIoControl =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "DeviceIoControl",
      PIN_PARG(WINDOWS::HANDLE),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPVOID),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPVOID),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG(WINDOWS::LPOVERLAPPED),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_DeviceIoControl,
    IARG_PROTOTYPE, protoDeviceIoControl,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 6,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 7,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoDeviceIoControl);
}


rtn = RTN_FindByName(img, "GetFileAttributesA");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetFileAttributesA =
    PROTO_Allocate (PIN_PARG(WINDOWS::DWORD),
      CALLINGSTD_STDCALL,
      "GetFileAttributesA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetFileAttributesA,
    IARG_PROTOTYPE, protoGetFileAttributesA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetFileAttributesA);
}

rtn = RTN_FindByName(img, "GetFileAttributesW");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetFileAttributesW =
    PROTO_Allocate (PIN_PARG(WINDOWS::DWORD),
      CALLINGSTD_STDCALL,
      "GetFileAttributesW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetFileAttributesW,
    IARG_PROTOTYPE, protoGetFileAttributesW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetFileAttributesW);
}

rtn = RTN_FindByName(img, "GetFileInformationByHandle");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetFileInformationByHandle =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetFileInformationByHandle",
      PIN_PARG(WINDOWS::HANDLE),
      PIN_PARG(WINDOWS::LPBY_HANDLE_FILE_INFORMATION),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetFileInformationByHandle,
    IARG_PROTOTYPE, protoGetFileInformationByHandle,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetFileInformationByHandle);
}

rtn = RTN_FindByName(img, "GetFileSize");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetFileSize =
    PROTO_Allocate (PIN_PARG(WINDOWS::DWORD),
      CALLINGSTD_STDCALL,
      "GetFileSize",
      PIN_PARG(WINDOWS::HANDLE),
      PIN_PARG(WINDOWS::LPDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetFileSize,
    IARG_PROTOTYPE, protoGetFileSize,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetFileSize);
}

rtn = RTN_FindByName(img, "GetFileSizeEx");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetFileSizeEx = 
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetFileSizeEx",
      PIN_PARG(WINDOWS::HANDLE),
      PIN_PARG(WINDOWS::PLARGE_INTEGER),
      PIN_PARG_END());
  
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetFileSizeEx,
    IARG_PROTOTYPE, protoGetFileSizeEx,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetFileSizeEx);
}

rtn = RTN_FindByName(img, "GetFileType");
if(RTN_Invalid() != rtn)
{ 
  PROTO protoGetFileType =
    PROTO_Allocate (PIN_PARG(WINDOWS::DWORD),
      CALLINGSTD_STDCALL,
      "GetFileType",
      PIN_PARG(WINDOWS::HANDLE),
      PIN_PARG_END());
  
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetFileType,
    IARG_PROTOTYPE, protoGetFileType,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetFileType);
}   

rtn = RTN_FindByName(img, "GetShortPathNameA");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetShortPathNameA = 
    PROTO_Allocate (PIN_PARG(WINDOWS::DWORD),
      CALLINGSTD_STDCALL,
      "GetShortPathNameA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());
  
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetShortPathNameA,
    IARG_PROTOTYPE, protoGetShortPathNameA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetShortPathNameA);
}

rtn = RTN_FindByName(img, "GetShortPathNameW");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetShortPathNameW = 
    PROTO_Allocate (PIN_PARG(WINDOWS::DWORD),
      CALLINGSTD_STDCALL,
      "GetShortPathNameW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPWSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());
  
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetShortPathNameW,
    IARG_PROTOTYPE, protoGetShortPathNameW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetShortPathNameW);
}

rtn = RTN_FindByName(img, "GetSystemDirectoryA");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetSystemDirectoryA =
    PROTO_Allocate (PIN_PARG(WINDOWS::UINT),
      CALLINGSTD_STDCALL,
      "GetSystemDirectoryA",
      PIN_PARG(WINDOWS::LPSTR),
      PIN_PARG(WINDOWS::UINT),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetSystemDirectoryA,
    IARG_PROTOTYPE, protoGetSystemDirectoryA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetSystemDirectoryA);
}

rtn = RTN_FindByName(img, "GetSystemDirectoryW");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetSystemDirectoryW = 
    PROTO_Allocate (PIN_PARG(WINDOWS::UINT),
      CALLINGSTD_STDCALL,
      "GetSystemDirectoryW",
      PIN_PARG(WINDOWS::LPWSTR),
      PIN_PARG(WINDOWS::UINT),
      PIN_PARG_END());
  
  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetSystemDirectoryW,
    IARG_PROTOTYPE, protoGetSystemDirectoryW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetSystemDirectoryW);
}

rtn = RTN_FindByName(img, "GetTempPathA");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetTempPathA =
    PROTO_Allocate (PIN_PARG(WINDOWS::DWORD),
      CALLINGSTD_STDCALL,
      "GetTempPathA",
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetTempPathA,
    IARG_PROTOTYPE, protoGetTempPathA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetTempPathA);
}

rtn = RTN_FindByName(img, "GetTempPathW");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetTempPathW =
    PROTO_Allocate (PIN_PARG(WINDOWS::DWORD),
      CALLINGSTD_STDCALL,
      "GetTempPathW",
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPWSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetTempPathW,
    IARG_PROTOTYPE, protoGetTempPathW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetTempPathW);
}

rtn = RTN_FindByName(img, "GetVolumeNameForVolumeMountPointA");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetVolumeNameForVolumeMountPointA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetVolumeNameForVolumeMountPointA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetVolumeNameForVolumeMountPointA,
    IARG_PROTOTYPE, protoGetVolumeNameForVolumeMountPointA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetVolumeNameForVolumeMountPointA);
}

rtn = RTN_FindByName(img, "GetVolumeNameForVolumeMountPointW");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetVolumeNameForVolumeMountPointW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetVolumeNameForVolumeMountPointW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPWSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetVolumeNameForVolumeMountPointW,
    IARG_PROTOTYPE, protoGetVolumeNameForVolumeMountPointW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetVolumeNameForVolumeMountPointW);
}

rtn = RTN_FindByName(img, "GetVolumePathNameA");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetVolumePathNameA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetVolumePathNameA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetVolumePathNameA,
    IARG_PROTOTYPE, protoGetVolumePathNameA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetVolumePathNameA);
}

rtn = RTN_FindByName(img, "GetVolumePathNameW");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetVolumePathNameW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetVolumePathNameW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPWSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetVolumePathNameW,
    IARG_PROTOTYPE, protoGetVolumePathNameW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetVolumePathNameW);
}

rtn = RTN_FindByName(img, "GetVolumePathNamesForVolumeNameA");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetVolumePathNamesForVolumeNameA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetVolumePathNamesForVolumeNameA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPCH),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::PDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetVolumePathNamesForVolumeNameA,
    IARG_PROTOTYPE, protoGetVolumePathNamesForVolumeNameA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetVolumePathNamesForVolumeNameA);
}

rtn = RTN_FindByName(img, "GetVolumePathNamesForVolumeNameW");
if(RTN_Invalid() != rtn)
{
  PROTO protoGetVolumePathNamesForVolumeNameW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "GetVolumePathNamesForVolumeNameW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPWCH),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::PDWORD),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_GetVolumePathNamesForVolumeNameW,
    IARG_PROTOTYPE, protoGetVolumePathNamesForVolumeNameW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoGetVolumePathNamesForVolumeNameW);
}

rtn = RTN_FindByName(img, "RemoveDirectoryA");
if(RTN_Invalid() != rtn)
{
  PROTO protoRemoveDirectoryA =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "RemoveDirectoryA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RemoveDirectoryA,
    IARG_PROTOTYPE, protoRemoveDirectoryA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRemoveDirectoryA);
}

rtn = RTN_FindByName(img, "RemoveDirectoryW");
if(RTN_Invalid() != rtn)
{
  PROTO protoRemoveDirectoryW =
    PROTO_Allocate (PIN_PARG(WINDOWS::BOOL),
      CALLINGSTD_STDCALL,
      "RemoveDirectoryW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_RemoveDirectoryW,
    IARG_PROTOTYPE, protoRemoveDirectoryW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoRemoveDirectoryW);
}

rtn = RTN_FindByName(img, "SearchPathA");
if(RTN_Invalid() != rtn)
{
  PROTO protoSearchPathA =
    PROTO_Allocate (PIN_PARG(WINDOWS::DWORD),
      CALLINGSTD_STDCALL,
      "SearchPathA",
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::LPCSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPSTR),
      PIN_PARG(WINDOWS::LPSTR*),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_SearchPathA,
    IARG_PROTOTYPE, protoSearchPathA,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoSearchPathA);
}

rtn = RTN_FindByName(img, "SearchPathW");
if(RTN_Invalid() != rtn)
{
  PROTO protoSearchPathW =
    PROTO_Allocate (PIN_PARG(WINDOWS::DWORD),
      CALLINGSTD_STDCALL,
      "SearchPathW",
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::LPCWSTR),
      PIN_PARG(WINDOWS::DWORD),
      PIN_PARG(WINDOWS::LPWSTR),
      PIN_PARG(WINDOWS::LPWSTR*),
      PIN_PARG_END());

  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_SearchPathW,
    IARG_PROTOTYPE, protoSearchPathW,
    IARG_ORIG_FUNCPTR,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 0,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 1,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 2,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 3,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 4,
    IARG_FUNCARG_ENTRYPOINT_VALUE, 5,
    IARG_CONTEXT,
    IARG_END);
  PROTO_Free (protoSearchPathW);
}



}

int main(int argc, char *argv[])
{
	PIN_InitSymbols();

	PIN_Init(argc,argv);   

	IMG_AddInstrumentFunction(ImageLoad,NULL);
	INS_AddInstrumentFunction(Instruction, 0);
	PIN_AddFiniFunction(Fini, 0);

	srand(time(NULL));

	LOGGER::start_logger();
	LOGGER::starting_banner();

	FUZZER::start_fuzzer();
	FUZZER::get_next(&number,&direction);

	// Never returns
	PIN_StartProgram();

	return 0;
}