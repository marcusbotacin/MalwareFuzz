#include<stdio.h>
#include"logger.h"

extern FILE *logfile;

namespace WINDOWS{
#define _WINDOWS_H_PATH_
#include <windows.h>
#include <wincrypt.h>	
#include <LM.h>
#include <shellapi.h>
}

namespace LOGGER
{
	void start_logger(){
		char logname[1024];
		sprintf(logname,"C:\\Logs\\%d.log",WINDOWS::GetCurrentProcessId());
		logfile = fopen(logname,"w");
	}

	void stats_instr(UINT64 data)
	{
		fprintf(logfile,"TOTAL INSTRS: %d\r\n",data);
	}

	void stats_branch(UINT64 data)
	{
		fprintf(logfile,"TOTAL BRANCHES: %d\r\n",data);
	}

	void log_dll(const char *msg)
	{
		fprintf(logfile,"%s\r\n",msg);
	}

	void log_PC(UINT32 data)
	{
		fprintf(logfile,"%x\r\n",data);
	}

	void log_Branch(UINT32 data, UINT64 idx, int btype)
	{
		char msg[1024];
		if(btype)
		{
			sprintf(msg,"Branch %x %d [OK]\r\n", data, idx);
		}else{
			sprintf(msg,"Branch %x %d [INV]\r\n", data, idx);
		}
		fprintf(logfile,msg);
	}

	void info_msg(char msg[])
	{
		fprintf(logfile,"[INFO] %s\r\n",msg);
	}

	void timeout_msg(char msg[])
	{
		fprintf(logfile,"[TIMEOUT] %s\r\n",msg);
	}

	void info_return(char api[], int ret){
		fprintf(logfile,"[INFO] %s = %x\r\n",api, ret);
	}
}