// Fuzzer: DLL that randomize some API function's outputs when injected into a process
// Developed by Marcus Botacin - UFPR - 2021
// Based on the VS12 sample project
// dllmain.cpp : Defines the entry point for the DLL application.
#include "stdafx.h"		// standard includes
#include <easyhook.h>	// hooking library
#include<stdlib.h>		// use rand
#include<time.h>		// use time
#include<stdio.h>		// logging to file
#include<wincrypt.h>
#include<LM.h>
#include<tlhelp32.h>
#include<shellapi.h>
#include<ShlObj.h>
#include<WinDNS.h>
#include<WinInet.h>
#include<WinSock2.h>
#include<ws2tcpip.h>
#define LEAN_AND_MEAN

// don't forget to link the hooking library
// distinct lib's versions must be linked if process is 32 or 64 bits
#if _WIN64
#pragma comment(lib, "EasyHook64.lib")
#else
#pragma comment(lib, "EasyHook32.lib")
#endif

#pragma comment(lib, "Crypt32.lib")
#pragma comment(lib, "Netapi32.lib")
#pragma comment(lib, "Shell32.lib")
#pragma comment(lib, "Dnsapi.lib")
#pragma comment(lib, "Wininet.lib")
#pragma comment(lib, "Ws2_32.lib")

// random criteria
// 50% chance
#define RANDOM (rand()%10)>=5

// My PID (for logging)
DWORD mypid;
// Log File
FILE *log;
HANDLE ghMutex; 

void logger(char msg[])
{
	WaitForSingleObject( 
            ghMutex,    // handle to mutex
            INFINITE); 
	fprintf(log,msg);
	fflush(log);
	ReleaseMutex(ghMutex);
}

//MessageBox Hook
//Used for testing purposes
int __stdcall MyMessageBoxA(
  HWND   hWnd,
  LPCSTR lpText,
  LPCSTR lpCaption,
  UINT   uType
){
	// log its call (are there concurrency issues?)
	logger("MessageBox:TRUE\n");
	//call the original function
	//adjust caption to warn it is hooked
	return MessageBoxA(hWnd,lpText,"Hooked",uType);
}

// IsDebuggerPresent hook
BOOL __stdcall MyIsDebuggerPresent()
{
	// If matching the random criteria
	//if(RANDOM){
	//	logger("IsDebuggerPresent:TRUE\n");
	//	return TRUE;
	//}
	logger("IsDebuggerPresent:FALSE\n");
	// usual return
	return FALSE;
}

BOOL __stdcall MyCryptEncrypt(
  HCRYPTKEY  hKey,
  HCRYPTHASH hHash,
  BOOL       Final,
  DWORD      dwFlags,
  BYTE       *pbData,
  DWORD      *pdwDataLen,
  DWORD      dwBufLen
){
	logger("CryptEncrypt:TRUE\n");
	return CryptEncrypt(hKey,hHash,Final,dwFlags,pbData,pdwDataLen,dwBufLen);
}

BOOL __stdcall MyCryptDecrypt(
  HCRYPTKEY  hKey,
  HCRYPTHASH hHash,
  BOOL       Final,
  DWORD      dwFlags,
  BYTE       *pbData,
  DWORD      *pdwDataLen
){
	logger("CryptDecrypt:TRUE\n");
	return CryptDecrypt(hKey,hHash,Final,dwFlags,pbData,pdwDataLen);
}

BOOL __stdcall MyCertControlStore(
  HCERTSTORE hCertStore,
  DWORD      dwFlags,
  DWORD      dwCtrlType,
  void const *pvCtrlPara
)
{
	logger("CertControlStore:TRUE\n");
	return CertControlStore(hCertStore,dwFlags,dwCtrlType,pvCtrlPara);
}

PCCERT_CONTEXT __stdcall MyCertCreateCertificateContext(
  DWORD      dwCertEncodingType,
  const BYTE *pbCertEncoded,
  DWORD      cbCertEncoded
){
	logger("CertCreateCertificateContext:TRUE\n");
	return CertCreateCertificateContext(dwCertEncodingType,pbCertEncoded,cbCertEncoded);
}

HCERTSTORE __stdcall MyCertOpenStore(
  LPCSTR            lpszStoreProvider,
  DWORD             dwEncodingType,
  HCRYPTPROV_LEGACY hCryptProv,
  DWORD             dwFlags,
  const void        *pvPara
){
	logger("CertOpenStore:TRUE\n");
	return CertOpenStore(lpszStoreProvider,dwEncodingType,hCryptProv,dwFlags,pvPara);
}

HCERTSTORE __stdcall MyCertOpenSystemStoreA(
  HCRYPTPROV_LEGACY hProv,
  LPCSTR            szSubsystemProtocol
){
	logger("CertOpenSystemStoreA:TRUE\n");
	return CertOpenSystemStoreA(hProv,szSubsystemProtocol);
}

HCERTSTORE __stdcall MyCertOpenSystemStoreW(
  HCRYPTPROV_LEGACY hProv,
  LPCWSTR           szSubsystemProtocol
){
	logger("CertOpenSystemStoreW:TRUE\n");
	return CertOpenSystemStoreW(hProv,szSubsystemProtocol);
}

BOOL __stdcall MyCryptAcquireContextA(
  HCRYPTPROV *phProv,
  LPCSTR     szContainer,
  LPCSTR     szProvider,
  DWORD      dwProvType,
  DWORD      dwFlags
){
	logger("CryptAcquireContextA:TRUE\n");
	return CryptAcquireContextA(phProv,szContainer,szProvider,dwProvType,dwFlags);
}

BOOL __stdcall MyCryptAcquireContextW(
  HCRYPTPROV *phProv,
  LPCWSTR    szContainer,
  LPCWSTR    szProvider,
  DWORD      dwProvType,
  DWORD      dwFlags
){
	logger("CryptAcquireContextW:TRUE\n");
	return CryptAcquireContextW(phProv,szContainer,szProvider,dwProvType,dwFlags);
}

BOOL __stdcall MyCryptCreateHash(
  HCRYPTPROV hProv,
  ALG_ID     Algid,
  HCRYPTKEY  hKey,
  DWORD      dwFlags,
  HCRYPTHASH *phHash
){
	logger("CryptCreateHash:TRUE\n");
	return CryptCreateHash(hProv,Algid,hKey,dwFlags,phHash);
}

BOOL __stdcall MyCryptExportKey(
  HCRYPTKEY hKey,
  HCRYPTKEY hExpKey,
  DWORD     dwBlobType,
  DWORD     dwFlags,
  BYTE      *pbData,
  DWORD     *pdwDataLen
){
	logger("CryptExportKey:TRUE\n");
	return CryptExportKey(hKey,hExpKey,dwBlobType,dwFlags,pbData,pdwDataLen);
}

BOOL __stdcall MyCryptGenKey(
  HCRYPTPROV hProv,
  ALG_ID     Algid,
  DWORD      dwFlags,
  HCRYPTKEY  *phKey
){
	logger("CryptGenKey:TRUE\n");
	return CryptGenKey(hProv,Algid,dwFlags,phKey);
}

BOOL __stdcall MyCryptHashData(
  HCRYPTHASH hHash,
  const BYTE *pbData,
  DWORD      dwDataLen,
  DWORD      dwFlags
){
	logger("CryptHashData:TRUE\n");
	return CryptHashData(hHash,pbData,dwDataLen,dwFlags);
}

BOOL __stdcall MyCryptDecodeMessage(
  DWORD                       dwMsgTypeFlags,
  PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
  PCRYPT_VERIFY_MESSAGE_PARA  pVerifyPara,
  DWORD                       dwSignerIndex,
  const BYTE                  *pbEncodedBlob,
  DWORD                       cbEncodedBlob,
  DWORD                       dwPrevInnerContentType,
  DWORD                       *pdwMsgType,
  DWORD                       *pdwInnerContentType,
  BYTE                        *pbDecoded,
  DWORD                       *pcbDecoded,
  PCCERT_CONTEXT              *ppXchgCert,
  PCCERT_CONTEXT              *ppSignerCert
){
	logger("CryptDecodeMessage:TRUE\n");
	return CryptDecodeMessage(dwMsgTypeFlags,pDecryptPara,pVerifyPara,dwSignerIndex,pbEncodedBlob,cbEncodedBlob,dwPrevInnerContentType,pdwMsgType,pdwInnerContentType,pbDecoded,pcbDecoded,ppXchgCert,ppSignerCert);
}

BOOL __stdcall MyCryptDecodeObjectEx(
  DWORD              dwCertEncodingType,
  LPCSTR             lpszStructType,
  const BYTE         *pbEncoded,
  DWORD              cbEncoded,
  DWORD              dwFlags,
  PCRYPT_DECODE_PARA pDecodePara,
  void               *pvStructInfo,
  DWORD              *pcbStructInfo
){
	logger("CryptDecodeObjectEx:TRUE\n");
	return CryptDecodeObjectEx(dwCertEncodingType,lpszStructType,pbEncoded,cbEncoded,dwFlags,pDecodePara,pvStructInfo,pcbStructInfo);
}

BOOL __stdcall MyCryptDecryptMessage(
  PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
  const BYTE                  *pbEncryptedBlob,
  DWORD                       cbEncryptedBlob,
  BYTE                        *pbDecrypted,
  DWORD                       *pcbDecrypted,
  PCCERT_CONTEXT              *ppXchgCert
){
	logger("CryptDecryptMessage:TRUE\n");
	return CryptDecryptMessage(pDecryptPara,pbEncryptedBlob,cbEncryptedBlob,pbDecrypted,pcbDecrypted,ppXchgCert);
}

BOOL __stdcall MyCryptEncryptMessage(
  PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
  DWORD                       cRecipientCert,
  PCCERT_CONTEXT			  *rgpRecipientCert,
  const BYTE                  *pbToBeEncrypted,
  DWORD                       cbToBeEncrypted,
  BYTE                        *pbEncryptedBlob,
  DWORD                       *pcbEncryptedBlob
){
	logger("CryptEncryptMessage:TRUE\n");
	return CryptEncryptMessage(pEncryptPara,cRecipientCert,rgpRecipientCert,pbToBeEncrypted,cbToBeEncrypted,pbEncryptedBlob,pcbEncryptedBlob);
}

BOOL __stdcall MyCryptHashMessage(
  PCRYPT_HASH_MESSAGE_PARA pHashPara,
  BOOL                     fDetachedHash,
  DWORD                    cToBeHashed,
  const BYTE **           rgpbToBeHashed,
  DWORD*                  rgcbToBeHashed,
  BYTE                     *pbHashedBlob,
  DWORD                    *pcbHashedBlob,
  BYTE                     *pbComputedHash,
  DWORD                    *pcbComputedHash
){
	logger("CryptHashMessage:TRUE\n");
	return CryptHashMessage(pHashPara,fDetachedHash,cToBeHashed,rgpbToBeHashed,rgcbToBeHashed,pbHashedBlob,pcbHashedBlob,pbComputedHash,pcbComputedHash);
}

BOOL __stdcall MyCryptProtectData(
  DATA_BLOB                 *pDataIn,
  LPCWSTR                   szDataDescr,
  DATA_BLOB                 *pOptionalEntropy,
  PVOID                     pvReserved,
  CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct,
  DWORD                     dwFlags,
  DATA_BLOB                 *pDataOut
){
	logger("CryptProtectData:TRUE\n");
	return CryptProtectData(pDataIn,szDataDescr,pOptionalEntropy,pvReserved,pPromptStruct,dwFlags,pDataOut);
}

BOOL __stdcall MyCryptProtectMemory(
  LPVOID pDataIn,
  DWORD  cbDataIn,
  DWORD  dwFlags
){
	logger("CryptProtectMemory:TRUE\n");
	return CryptProtectMemory(pDataIn,cbDataIn,dwFlags);
}

BOOL __stdcall MyCryptUnprotectData(
  DATA_BLOB                 *pDataIn,
  LPWSTR                    *ppszDataDescr,
  DATA_BLOB                 *pOptionalEntropy,
  PVOID                     pvReserved,
  CRYPTPROTECT_PROMPTSTRUCT *pPromptStruct,
  DWORD                     dwFlags,
  DATA_BLOB                 *pDataOut
){
	logger("CryptUnprotectData:TRUE\n");
	return CryptUnprotectData(pDataIn,ppszDataDescr,pOptionalEntropy,pvReserved,pPromptStruct,dwFlags,pDataOut);
}

 BOOL __stdcall MyCryptUnprotectMemory(
  LPVOID pDataIn,
  DWORD  cbDataIn,
  DWORD  dwFlags
){
	logger("CryptUnprotectMemory:TRUE\n");
	return CryptUnprotectMemory(pDataIn,cbDataIn,dwFlags);
 }

 NET_API_STATUS __stdcall MyNetGetJoinInformation(
  LPCWSTR               lpServer,
  LPWSTR                *lpNameBuffer,
  PNETSETUP_JOIN_STATUS BufferType
){
	logger("NetGetJoinInformation:TRUE\n");
	return NetGetJoinInformation(lpServer,lpNameBuffer,BufferType);
 }

 NET_API_STATUS __stdcall MyNetShareEnum(
  LMSTR   servername,
  DWORD   level,
  LPBYTE  *bufptr,
  DWORD   prefmaxlen,
  LPDWORD entriesread,
  LPDWORD totalentries,
  LPDWORD resume_handle
){
	logger("NetShareEnum:TRUE\n");
	return NetShareEnum(servername,level,bufptr,prefmaxlen,entriesread,totalentries,resume_handle);
 }

 NET_API_STATUS __stdcall MyNetUserGetInfo(
  LPCWSTR servername,
  LPCWSTR username,
  DWORD   level,
  LPBYTE  *bufptr
){
	logger("NetUserGetInfo:TRUE\n");
	return NetUserGetInfo(servername,username,level,bufptr);
}

NET_API_STATUS __stdcall MyNetUserGetLocalGroups(
  LPCWSTR servername,
  LPCWSTR username,
  DWORD   level,
  DWORD   flags,
  LPBYTE  *bufptr,
  DWORD   prefmaxlen,
  LPDWORD entriesread,
  LPDWORD totalentries
){
	logger("NetUserGetLocalGroup:TRUE\n");
	return NetUserGetLocalGroups(servername,username,level,flags,bufptr,prefmaxlen, entriesread,totalentries);
}

HRSRC __stdcall MyFindResourceA(
  HMODULE hModule,
  LPCSTR  lpName,
  LPCSTR  lpType
){
	logger("FindResourceA:TRUE\n");
	return FindResourceA(hModule,lpName,lpType);
}

HRSRC __stdcall MyFindResourceW(
  HMODULE hModule,
  LPCWSTR  lpName,
  LPCWSTR  lpType
){
	logger("FindResourceW:TRUE\n");
	return FindResourceW(hModule,lpName,lpType);
}

HRSRC __stdcall MyFindResourceExA(
  HMODULE hModule,
  LPCSTR  lpType,
  LPCSTR  lpName,
  WORD    wLanguage
)
{
	logger("FindResourceExA\n");
	return FindResourceExA(hModule,lpType,lpName,wLanguage);
}

HRSRC __stdcall MyFindResourceExW(
  HMODULE hModule,
  LPCWSTR  lpType,
  LPCWSTR  lpName,
  WORD    wLanguage
)
{
	logger("FindResourceExW\n");
	return FindResourceExW(hModule,lpType,lpName,wLanguage);
}

HGLOBAL __stdcall MyLoadResource(
  HMODULE hModule,
  HRSRC   hResInfo
)
{
	logger("LoadResource\n");
	return LoadResource(hModule,hResInfo);
}

void __stdcall MyGetLocalTime(
  LPSYSTEMTIME lpSystemTime
)
{
	logger("GetLocalTime\n");
	return GetLocalTime(lpSystemTime);
}

void __stdcall MyGetSystemTime(
  LPSYSTEMTIME lpSystemTime
)
{
	logger("GetSystemTime\n");
	return GetSystemTime(lpSystemTime);
}

void __stdcall MyGetSystemTimeAsFileTime(
  LPFILETIME lpSystemTimeAsFileTime
)
{
	logger("GetSystemTimeAsFileTime\n");
	return GetSystemTimeAsFileTime(lpSystemTimeAsFileTime);
}

DWORD __stdcall MyGetTickCount()
{
	logger("GetTickCount\n");
	return GetTickCount();
}

BOOL __stdcall MyControlService(
  SC_HANDLE        hService,
  DWORD            dwControl,
  LPSERVICE_STATUS lpServiceStatus
)
{
	logger("ControlService\n");
	return ControlService(hService,dwControl,lpServiceStatus);
}

SC_HANDLE __stdcall MyCreateServiceA(
  SC_HANDLE hSCManager,
  LPCSTR    lpServiceName,
  LPCSTR    lpDisplayName,
  DWORD     dwDesiredAccess,
  DWORD     dwServiceType,
  DWORD     dwStartType,
  DWORD     dwErrorControl,
  LPCSTR    lpBinaryPathName,
  LPCSTR    lpLoadOrderGroup,
  LPDWORD   lpdwTagId,
  LPCSTR    lpDependencies,
  LPCSTR    lpServiceStartName,
  LPCSTR    lpPassword
)
{
	logger("CreateServiceA\n");
	return CreateServiceA(hSCManager,lpServiceName,lpDisplayName,dwDesiredAccess,dwServiceType,dwStartType,dwErrorControl,lpBinaryPathName,lpLoadOrderGroup,lpdwTagId,lpDependencies,lpServiceStartName,lpPassword);
}

SC_HANDLE __stdcall MyCreateServiceW(
  SC_HANDLE hSCManager,
  LPCWSTR   lpServiceName,
  LPCWSTR   lpDisplayName,
  DWORD     dwDesiredAccess,
  DWORD     dwServiceType,
  DWORD     dwStartType,
  DWORD     dwErrorControl,
  LPCWSTR   lpBinaryPathName,
  LPCWSTR   lpLoadOrderGroup,
  LPDWORD   lpdwTagId,
  LPCWSTR   lpDependencies,
  LPCWSTR   lpServiceStartName,
  LPCWSTR   lpPassword
)
{
	logger("CreateServiceW\n");
	return CreateServiceW(hSCManager,lpServiceName,lpDisplayName,dwDesiredAccess,dwServiceType,dwStartType,dwErrorControl,lpBinaryPathName,lpLoadOrderGroup,lpdwTagId,lpDependencies,lpServiceStartName,lpPassword);
}

BOOL __stdcall MyDeleteService(
  SC_HANDLE hService
)
{
	logger("DeleteService\n");
	return DeleteService(hService);
}

BOOL __stdcall MyEnumServicesStatusA(
  SC_HANDLE              hSCManager,
  DWORD                  dwServiceType,
  DWORD                  dwServiceState,
  LPENUM_SERVICE_STATUSA lpServices,
  DWORD                  cbBufSize,
  LPDWORD                pcbBytesNeeded,
  LPDWORD                lpServicesReturned,
  LPDWORD                lpResumeHandle
)
{
	logger("EnumServicesStatusA\n");
	return EnumServicesStatusA(hSCManager,dwServiceType,dwServiceState,lpServices,cbBufSize,pcbBytesNeeded,lpServicesReturned,lpResumeHandle);
}

BOOL __stdcall MyEnumServicesStatusW(
  SC_HANDLE              hSCManager,
  DWORD                  dwServiceType,
  DWORD                  dwServiceState,
  LPENUM_SERVICE_STATUSW lpServices,
  DWORD                  cbBufSize,
  LPDWORD                pcbBytesNeeded,
  LPDWORD                lpServicesReturned,
  LPDWORD                lpResumeHandle
)
{
	logger("EnumServicesStatusW\n");
	return EnumServicesStatusW(hSCManager,dwServiceType,dwServiceState,lpServices,cbBufSize,pcbBytesNeeded,lpServicesReturned,lpResumeHandle);
}

SC_HANDLE __stdcall MyOpenSCManagerA(
  LPCSTR lpMachineName,
  LPCSTR lpDatabaseName,
  DWORD  dwDesiredAccess
)
{
	logger("OpenSCManagerA\n");
	return OpenSCManagerA(lpMachineName,lpDatabaseName,dwDesiredAccess);
}

SC_HANDLE __stdcall MyOpenSCManagerW(
  LPCWSTR lpMachineName,
  LPCWSTR lpDatabaseName,
  DWORD   dwDesiredAccess
)
{
	logger("OpenSCManagerW\n");
	return OpenSCManagerW(lpMachineName,lpDatabaseName,dwDesiredAccess);
}

SC_HANDLE __stdcall MyOpenServiceA(
  SC_HANDLE hSCManager,
  LPCSTR    lpServiceName,
  DWORD     dwDesiredAccess
)
{
	logger("OpenServiceA\n");
	return OpenServiceA(hSCManager,lpServiceName,dwDesiredAccess);
}

SC_HANDLE __stdcall MyOpenServiceW(
  SC_HANDLE hSCManager,
  LPCWSTR   lpServiceName,
  DWORD     dwDesiredAccess
)
{
	logger("OpenServiceW\n");
	return OpenServiceW(hSCManager,lpServiceName,dwDesiredAccess);
}

BOOL __stdcall MyStartServiceA(
  SC_HANDLE hService,
  DWORD     dwNumServiceArgs,
  LPCSTR    *lpServiceArgVectors
)
{
	logger("StartServiceA\n");
	return StartServiceA(hService,dwNumServiceArgs,lpServiceArgVectors);
}

BOOL __stdcall MyStartServiceW(
  SC_HANDLE hService,
  DWORD     dwNumServiceArgs,
  LPCWSTR   *lpServiceArgVectors
)
{
	logger("StartServiceW\n");
	return StartServiceW(hService,dwNumServiceArgs,lpServiceArgVectors);
}

BOOL __stdcall MyLookupPrivilegeValueA(
  LPCSTR lpSystemName,
  LPCSTR lpName,
  PLUID  lpLuid
)
{
	logger("LookupPrivilegeValueA\n");
	return LookupPrivilegeValueA(lpSystemName,lpName,lpLuid);
}

BOOL __stdcall MyLookupPrivilegeValueW(
  LPCWSTR lpSystemName,
  LPCWSTR lpName,
  PLUID   lpLuid
)
{
	logger("LookupPrivilegeValueW\n");
	return LookupPrivilegeValueW(lpSystemName,lpName,lpLuid);
}

void __stdcall MyGetNativeSystemInfo(
  LPSYSTEM_INFO lpSystemInfo
)
{
	logger("GetNativeSystemInfo\n");
	GetNativeSystemInfo(lpSystemInfo);
}

void __stdcall MyGetSystemInfo(
  LPSYSTEM_INFO lpSystemInfo
)
{
	logger("GetSystemInfo\n");
	return GetSystemInfo(lpSystemInfo);
}

BOOL __stdcall MyExitWindowsEx(
  UINT  uFlags,
  DWORD dwReason
)
{
	logger("ExitWindowsEx\n");
	return ExitWindowsEx(uFlags,dwReason);
}

SHORT __stdcall MyGetAsyncKeyState(
  int vKey
)
{
	logger("GetAsyncKeyState\n");
	return GetAsyncKeyState(vKey);
}

SHORT __stdcall MyGetKeyState(
  int nVirtKey
)
{
	logger("GetKeyState\n");
	return GetKeyState(nVirtKey);
}

BOOL __stdcall MyGetKeyboardState(
  PBYTE lpKeyState
)
{
	logger("GetKeyboardState\n");
	return GetKeyboardState(lpKeyState);
}

HHOOK __stdcall MySetWindowsHookExA(
  int       idHook,
  HOOKPROC  lpfn,
  HINSTANCE hmod,
  DWORD     dwThreadId
)
{
	logger("SetWindowsHookExA\n");
	return SetWindowsHookExA(idHook,lpfn,hmod,dwThreadId);
}

HHOOK __stdcall MySetWindowsHookExW(
  int       idHook,
  HOOKPROC  lpfn,
  HINSTANCE hmod,
  DWORD     dwThreadId
)
{
	logger("SetWindowsHookExW\n");
	return SetWindowsHookExW(idHook,lpfn,hmod,dwThreadId);
}

BOOL __stdcall MyUnhookWindowsHookEx(
  HHOOK hhk
)
{
	logger("UnhookWindowsHookEx\n");
	return UnhookWindowsHookEx(hhk);
}

BOOL __stdcall MyCreateProcessA(
  LPCSTR                lpApplicationName,
  LPSTR                 lpCommandLine,
  LPSECURITY_ATTRIBUTES lpProcessAttributes,
  LPSECURITY_ATTRIBUTES lpThreadAttributes,
  BOOL                  bInheritHandles,
  DWORD                 dwCreationFlags,
  LPVOID                lpEnvironment,
  LPCSTR                lpCurrentDirectory,
  LPSTARTUPINFOA        lpStartupInfo,
  LPPROCESS_INFORMATION lpProcessInformation
)
{
	logger("CreateProcessA\n");
	return CreateProcessA(lpApplicationName,lpCommandLine,lpProcessAttributes,lpThreadAttributes,bInheritHandles,dwCreationFlags,lpEnvironment,lpCurrentDirectory,lpStartupInfo,lpProcessInformation);
}

BOOL __stdcall MyCreateProcessW(
  LPCWSTR               lpApplicationName,
  LPWSTR                lpCommandLine,
  LPSECURITY_ATTRIBUTES lpProcessAttributes,
  LPSECURITY_ATTRIBUTES lpThreadAttributes,
  BOOL                  bInheritHandles,
  DWORD                 dwCreationFlags,
  LPVOID                lpEnvironment,
  LPCWSTR               lpCurrentDirectory,
  LPSTARTUPINFOW        lpStartupInfo,
  LPPROCESS_INFORMATION lpProcessInformation
)
{
	logger("CreateProcessW\n");
	return CreateProcessW(lpApplicationName,lpCommandLine,lpProcessAttributes,lpThreadAttributes,bInheritHandles,dwCreationFlags,lpEnvironment,lpCurrentDirectory,lpStartupInfo,lpProcessInformation);
}

HANDLE __stdcall MyCreateRemoteThread(
  HANDLE                 hProcess,
  LPSECURITY_ATTRIBUTES  lpThreadAttributes,
  SIZE_T                 dwStackSize,
  LPTHREAD_START_ROUTINE lpStartAddress,
  LPVOID                 lpParameter,
  DWORD                  dwCreationFlags,
  LPDWORD                lpThreadId
)
{
	logger("CreateRemoteThread\n");
	return CreateRemoteThread(hProcess,lpThreadAttributes,dwStackSize,lpStartAddress,lpParameter,dwCreationFlags,lpThreadId);
}

HANDLE __stdcall MyCreateThread(
  LPSECURITY_ATTRIBUTES   lpThreadAttributes,
  SIZE_T                  dwStackSize,
  LPTHREAD_START_ROUTINE  lpStartAddress,
  __drv_aliasesMem LPVOID lpParameter,
  DWORD                   dwCreationFlags,
  LPDWORD                 lpThreadId
)
{
	logger("CreateThread\n");
	return CreateThread(lpThreadAttributes,dwStackSize,lpStartAddress,lpParameter,dwCreationFlags,lpThreadId);
}

HANDLE __stdcall MyCreateToolhelp32Snapshot(
  DWORD dwFlags,
  DWORD th32ProcessID
)
{
	logger("CreateToolhelp32Snapshot\n");
	return CreateToolhelp32Snapshot(dwFlags,th32ProcessID);
}

BOOL __stdcall MyReadProcessMemory(
  HANDLE  hProcess,
  LPCVOID lpBaseAddress,
  LPVOID  lpBuffer,
  SIZE_T  nSize,
  SIZE_T  *lpNumberOfBytesRead
)
{
	logger("ReadProcessMemory\n");
	return ReadProcessMemory(hProcess,lpBaseAddress,lpBuffer,nSize,lpNumberOfBytesRead);
}

BOOL __stdcall MyWriteProcessMemory(
  HANDLE  hProcess,
  LPVOID  lpBaseAddress,
  LPCVOID lpBuffer,
  SIZE_T  nSize,
  SIZE_T  *lpNumberOfBytesWritten
)
{
	logger("WriteProcessMemory\n");
	return WriteProcessMemory(hProcess,lpBaseAddress,lpBuffer,nSize,lpNumberOfBytesWritten);
}

BOOL __stdcall MyShellExecuteExA(
  SHELLEXECUTEINFOA *pExecInfo
)
{
	logger("ShellExecuteExA\n");
	return ShellExecuteExA(pExecInfo);
}

BOOL __stdcall MyShellExecuteExW(
  SHELLEXECUTEINFOW *pExecInfo
)
{
	logger("ShellExecuteExW\n");
	return ShellExecuteExW(pExecInfo);
}

LSTATUS __stdcall MyRegCreateKeyExA(
  HKEY                        hKey,
  LPCSTR                      lpSubKey,
  DWORD                       Reserved,
  LPSTR                       lpClass,
  DWORD                       dwOptions,
  REGSAM                      samDesired,
  const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  PHKEY                       phkResult,
  LPDWORD                     lpdwDisposition
)
{
	logger("RegCreateKeyExA\n");
	return RegCreateKeyExA(hKey,lpSubKey,Reserved,lpClass,dwOptions,samDesired,lpSecurityAttributes,phkResult,lpdwDisposition);
}

LSTATUS __stdcall MyRegCreateKeyExW(
  HKEY                        hKey,
  LPCWSTR                     lpSubKey,
  DWORD                       Reserved,
  LPWSTR                      lpClass,
  DWORD                       dwOptions,
  REGSAM                      samDesired,
  const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
  PHKEY                       phkResult,
  LPDWORD                     lpdwDisposition
)
{
	logger("RegCreateKeyExW\n");
	return RegCreateKeyExW(hKey,lpSubKey,Reserved,lpClass,dwOptions,samDesired,lpSecurityAttributes,phkResult,lpdwDisposition);
}

LSTATUS __stdcall MyRegDeleteKeyA(
  HKEY   hKey,
  LPCSTR lpSubKey
)
{
	logger("RegDeleteKeyA\n");
	return RegDeleteKeyA(hKey,lpSubKey);
}

LSTATUS __stdcall MyRegDeleteKeyW(
  HKEY    hKey,
  LPCWSTR lpSubKey
)
{
	logger("RegDeleteKeyW\n");
	return RegDeleteKeyW(hKey,lpSubKey);
}

LSTATUS __stdcall MyRegDeleteValueA(
  HKEY   hKey,
  LPCSTR lpValueName
)
{
	logger("RegDeleteValueA\n");
	return RegDeleteValueA(hKey,lpValueName);
}

LSTATUS __stdcall MyRegDeleteValueW(
  HKEY    hKey,
  LPCWSTR lpValueName
)
{
	logger("RegDeleteValueW\n");
	return RegDeleteValueW(hKey,lpValueName);
}

LSTATUS __stdcall MyRegOpenKeyExA(
  HKEY   hKey,
  LPCSTR lpSubKey,
  DWORD  ulOptions,
  REGSAM samDesired,
  PHKEY  phkResult
)
{
	logger("RegOpenKeyExA\n");
	return RegOpenKeyExA(hKey,lpSubKey,ulOptions,samDesired,phkResult);
}

LSTATUS __stdcall MyRegOpenKeyExW(
  HKEY    hKey,
  LPCWSTR lpSubKey,
  DWORD   ulOptions,
  REGSAM  samDesired,
  PHKEY   phkResult
)
{
	logger("RegOpenKeyExW\n");
	return RegOpenKeyExW(hKey,lpSubKey,ulOptions,samDesired,phkResult);
}

LSTATUS __stdcall MyRegQueryInfoKeyA(
  HKEY      hKey,
  LPSTR     lpClass,
  LPDWORD   lpcchClass,
  LPDWORD   lpReserved,
  LPDWORD   lpcSubKeys,
  LPDWORD   lpcbMaxSubKeyLen,
  LPDWORD   lpcbMaxClassLen,
  LPDWORD   lpcValues,
  LPDWORD   lpcbMaxValueNameLen,
  LPDWORD   lpcbMaxValueLen,
  LPDWORD   lpcbSecurityDescriptor,
  PFILETIME lpftLastWriteTime
)
{
	logger("RegQueryInfoKeyA\n");
	return RegQueryInfoKeyA(hKey,lpClass,lpcchClass,lpReserved,lpcSubKeys,lpcbMaxSubKeyLen,lpcbMaxClassLen,lpcValues,lpcbMaxValueNameLen,lpcbMaxValueLen,lpcbSecurityDescriptor,lpftLastWriteTime);
}

LSTATUS __stdcall MyRegQueryInfoKeyW(
  HKEY      hKey,
  LPWSTR    lpClass,
  LPDWORD   lpcchClass,
  LPDWORD   lpReserved,
  LPDWORD   lpcSubKeys,
  LPDWORD   lpcbMaxSubKeyLen,
  LPDWORD   lpcbMaxClassLen,
  LPDWORD   lpcValues,
  LPDWORD   lpcbMaxValueNameLen,
  LPDWORD   lpcbMaxValueLen,
  LPDWORD   lpcbSecurityDescriptor,
  PFILETIME lpftLastWriteTime
)
{
	logger("RegQueryInfoKeyW\n");
	return RegQueryInfoKeyW(hKey,lpClass,lpcchClass,lpReserved,lpcSubKeys,lpcbMaxSubKeyLen,lpcbMaxClassLen,lpcValues,lpcbMaxValueNameLen,lpcbMaxValueLen,lpcbSecurityDescriptor,lpftLastWriteTime);
}

LSTATUS __stdcall MyRegQueryValueExA(
  HKEY    hKey,
  LPCSTR  lpValueName,
  LPDWORD lpReserved,
  LPDWORD lpType,
  LPBYTE  lpData,
  LPDWORD lpcbData
)
{
	logger("RegQueryValueExA\n");
	return RegQueryValueExA(hKey,lpValueName,lpReserved,lpType,lpData,lpcbData);
}

LSTATUS __stdcall MyRegQueryValueExW(
  HKEY    hKey,
  LPCWSTR lpValueName,
  LPDWORD lpReserved,
  LPDWORD lpType,
  LPBYTE  lpData,
  LPDWORD lpcbData
)
{
	logger("RegQueryValueExW\n");
	return RegQueryValueExW(hKey,lpValueName,lpReserved,lpType,lpData,lpcbData);
}

LSTATUS __stdcall MyRegSetValueExA(
  HKEY       hKey,
  LPCSTR     lpValueName,
  DWORD      Reserved,
  DWORD      dwType,
  const BYTE *lpData,
  DWORD      cbData
)
{
	logger("RegSetValueExA\n");
	return RegSetValueExA(hKey,lpValueName,Reserved,dwType,lpData,cbData);
}

LSTATUS __stdcall MyRegSetValueExW(
  HKEY       hKey,
  LPCWSTR    lpValueName,
  DWORD      Reserved,
  DWORD      dwType,
  const BYTE *lpData,
  DWORD      cbData
)
{
	logger("RegSetValueExW\n");
	return RegSetValueExW(hKey,lpValueName,Reserved,dwType,lpData,cbData);
}

BOOL __stdcall MyGetUserNameA(
  LPSTR   lpBuffer,
  LPDWORD pcbBuffer
)
{
	logger("GetUserNameA\n");
	return GetUserNameA(lpBuffer,pcbBuffer);
}

BOOL __stdcall MyGetUserNameW(
  LPWSTR  lpBuffer,
  LPDWORD pcbBuffer
)
{
	logger("GetUserNameW\n");
	return GetUserNameW(lpBuffer,pcbBuffer);
}

BOOL __stdcall MyLookupAccountSidA(
  LPCSTR        lpSystemName,
  PSID          Sid,
  LPSTR         Name,
  LPDWORD       cchName,
  LPSTR         ReferencedDomainName,
  LPDWORD       cchReferencedDomainName,
  PSID_NAME_USE peUse
)
{
	logger("LookupAccountSidA\n");
	return LookupAccountSidA(lpSystemName,Sid,Name,cchName,ReferencedDomainName,cchReferencedDomainName,peUse);
}

BOOL __stdcall MyLookupAccountSidW(
  LPCWSTR       lpSystemName,
  PSID          Sid,
  LPWSTR        Name,
  LPDWORD       cchName,
  LPWSTR        ReferencedDomainName,
  LPDWORD       cchReferencedDomainName,
  PSID_NAME_USE peUse
)
{
	logger("LookupAccountSidW\n");
	return LookupAccountSidW(lpSystemName,Sid,Name,cchName,ReferencedDomainName,cchReferencedDomainName,peUse);
}

BOOL __stdcall MyGetComputerNameA(
  LPSTR   lpBuffer,
  LPDWORD nSize
)
{
	logger("GetComputerNameA\n");
	return GetComputerNameA(lpBuffer,nSize);
}

BOOL __stdcall MyGetComputerNameW(
  LPWSTR  lpBuffer,
  LPDWORD nSize
)
{
	logger("GetComputerNameW\n");
	return GetComputerNameW(lpBuffer,nSize);
}

BOOL __stdcall MyGetDiskFreeSpaceExA(
  LPCSTR          lpDirectoryName,
  PULARGE_INTEGER lpFreeBytesAvailableToCaller,
  PULARGE_INTEGER lpTotalNumberOfBytes,
  PULARGE_INTEGER lpTotalNumberOfFreeBytes
)
{
	logger("GetDiskFreeSpaceExA\n");
	return GetDiskFreeSpaceExA(lpDirectoryName,lpFreeBytesAvailableToCaller,lpTotalNumberOfBytes,lpTotalNumberOfFreeBytes);
}

BOOL __stdcall MyGetDiskFreeSpaceExW(
  LPCWSTR         lpDirectoryName,
  PULARGE_INTEGER lpFreeBytesAvailableToCaller,
  PULARGE_INTEGER lpTotalNumberOfBytes,
  PULARGE_INTEGER lpTotalNumberOfFreeBytes
)
{
	logger("GetDiskFreeSpaceExW\n");
	return GetDiskFreeSpaceExW(lpDirectoryName,lpFreeBytesAvailableToCaller,lpTotalNumberOfBytes,lpTotalNumberOfFreeBytes);
}

BOOL __stdcall MyGetDiskFreeSpaceA(
  LPCSTR  lpRootPathName,
  LPDWORD lpSectorsPerCluster,
  LPDWORD lpBytesPerSector,
  LPDWORD lpNumberOfFreeClusters,
  LPDWORD lpTotalNumberOfClusters
)
{
	logger("GetDiskFreeSpaceA\n");
	return GetDiskFreeSpaceA(lpRootPathName,lpSectorsPerCluster,lpBytesPerSector,lpNumberOfFreeClusters,lpTotalNumberOfClusters);
}

BOOL __stdcall MyGetDiskFreeSpaceW(
  LPCWSTR lpRootPathName,
  LPDWORD lpSectorsPerCluster,
  LPDWORD lpBytesPerSector,
  LPDWORD lpNumberOfFreeClusters,
  LPDWORD lpTotalNumberOfClusters
)
{
	logger("GetDiskFreeSpaceW\n");
	return GetDiskFreeSpaceW(lpRootPathName,lpSectorsPerCluster,lpBytesPerSector,lpNumberOfFreeClusters,lpTotalNumberOfClusters);
}

DWORD __stdcall MyGetTimeZoneInformation(
  LPTIME_ZONE_INFORMATION lpTimeZoneInformation
)
{
	logger("GetTimeZoneInformation\n");
	return GetTimeZoneInformation(lpTimeZoneInformation);
}

HRESULT __stdcall MySHGetFolderPathA(
  HWND   hwnd,
  int    csidl,
  HANDLE hToken,
  DWORD  dwFlags,
  LPSTR  pszPath
)
{
	logger("SHGetFolderPathA\n");
	return SHGetFolderPathA(hwnd,csidl,hToken,dwFlags,pszPath);
}

HRESULT __stdcall MySHGetFolderPathW(
  HWND   hwnd,
  int    csidl,
  HANDLE hToken,
  DWORD  dwFlags,
  LPWSTR  pszPath
)
{
	logger("SHGetFolderPathA\n");
	return SHGetFolderPathW(hwnd,csidl,hToken,dwFlags,pszPath);
}

HRESULT __stdcall MySHGetSpecialFolderLocation(
  HWND             hwnd,
  int              csidl,
  PIDLIST_ABSOLUTE *ppidl
)
{
	logger("SHGetSpecialFolderLocation\n");
	return SHGetSpecialFolderLocation(hwnd,csidl,ppidl);
}

BOOL __stdcall MyGetCursorPos(
  LPPOINT lpPoint
)
{
	logger("GetCursorPos\n");
	return GetCursorPos(lpPoint);
}

int __stdcall MyGetSystemMetrics(
  int nIndex
)
{
	logger("GetSystemMetrics\n");
	return GetSystemMetrics(nIndex);
}

BOOL __stdcall MyCopyFileA(
  LPCSTR lpExistingFileName,
  LPCSTR lpNewFileName,
  BOOL   bFailIfExists
)
{
    logger("CopyFileA\n");
    return CopyFileA(lpExistingFileName,lpNewFileName,bFailIfExists);
}

BOOL __stdcall MyCopyFileW(
  LPCWSTR lpExistingFileName,
  LPCWSTR lpNewFileName,
  BOOL    bFailIfExists
)
{
    logger("CopyFileW\n");
    return CopyFileW(lpExistingFileName,lpNewFileName,bFailIfExists);
}

BOOL __stdcall MyCopyFileExA(
  LPCSTR             lpExistingFileName,
  LPCSTR             lpNewFileName,
  LPPROGRESS_ROUTINE lpProgressRoutine,
  LPVOID             lpData,
  LPBOOL             pbCancel,
  DWORD              dwCopyFlags
)
{
    logger("CopyFileExA\n");
    return CopyFileExA(lpExistingFileName,lpNewFileName,lpProgressRoutine,lpData,pbCancel,dwCopyFlags);
}

BOOL __stdcall MyCopyFileExW(
  LPCWSTR            lpExistingFileName,
  LPCWSTR            lpNewFileName,
  LPPROGRESS_ROUTINE lpProgressRoutine,
  LPVOID             lpData,
  LPBOOL             pbCancel,
  DWORD              dwCopyFlags
)
{
    logger("CopyFileExW\n");
    return CopyFileExW(lpExistingFileName,lpNewFileName,lpProgressRoutine,lpData,pbCancel,dwCopyFlags);
}

BOOL __stdcall MyCreateDirectoryA(
  LPCSTR                lpPathName,
  LPSECURITY_ATTRIBUTES lpSecurityAttributes
)
{
    logger("CreateDirectoryA\n");
    return CreateDirectoryA(lpPathName,lpSecurityAttributes);
}

BOOL __stdcall MyCreateDirectoryW(
  LPCWSTR               lpPathName,
  LPSECURITY_ATTRIBUTES lpSecurityAttributes
)
{
    logger("CreateDirectoryW\n");
    return CreateDirectoryW(lpPathName,lpSecurityAttributes);
}

BOOL __stdcall MyCreateDirectoryExA(
  LPCSTR                lpTemplateDirectory,
  LPCSTR                lpNewDirectory,
  LPSECURITY_ATTRIBUTES lpSecurityAttributes
)
{
    logger("CreateDirectoryExA\n");
    return CreateDirectoryExA(lpTemplateDirectory,lpNewDirectory,lpSecurityAttributes);
}

BOOL __stdcall MyCreateDirectoryExW(
  LPCWSTR               lpTemplateDirectory,
  LPCWSTR               lpNewDirectory,
  LPSECURITY_ATTRIBUTES lpSecurityAttributes
)
{
    logger("CreateDirectoryExW\n");
    return CreateDirectoryExW(lpTemplateDirectory,lpNewDirectory,lpSecurityAttributes);
}

BOOL __stdcall MyDeleteFileA(
  LPCSTR lpFileName
)
{
    logger("DeleteFileA\n");
    return DeleteFileA(lpFileName);
}

BOOL __stdcall MyDeleteFileW(
  LPCWSTR lpFileName
)
{
    logger("DeleteFileW\n");
    return DeleteFileW(lpFileName);
}

BOOL __stdcall MyDeviceIoControl(
  HANDLE       hDevice,
  DWORD        dwIoControlCode,
  LPVOID       lpInBuffer,
  DWORD        nInBufferSize,
  LPVOID       lpOutBuffer,
  DWORD        nOutBufferSize,
  LPDWORD      lpBytesReturned,
  LPOVERLAPPED lpOverlapped
)
{
    logger("DeviceIoControl\n");
    return DeviceIoControl(hDevice,dwIoControlCode,lpInBuffer,nInBufferSize,lpOutBuffer,nOutBufferSize,lpBytesReturned,lpOverlapped);
}

DWORD __stdcall MyGetFileAttributesA(
  LPCSTR lpFileName
)
{
    logger("GetFileAttributesA\n");
    return GetFileAttributesA(lpFileName);
}

DWORD __stdcall MyGetFileAttributesW(
  LPCWSTR lpFileName
)
{
    logger("GetFileAttributesW\n");
    return GetFileAttributesW(lpFileName);
}

BOOL __stdcall MyGetFileAttributesExA(
  LPCSTR                 lpFileName,
  GET_FILEEX_INFO_LEVELS fInfoLevelId,
  LPVOID                 lpFileInformation
)
{
    logger("GetFileAttributesExA\n");
    return GetFileAttributesExA(lpFileName,fInfoLevelId,lpFileInformation);
}

BOOL __stdcall MyGetFileAttributesExW(
  LPCWSTR                lpFileName,
  GET_FILEEX_INFO_LEVELS fInfoLevelId,
  LPVOID                 lpFileInformation
)
{
    logger("GetFileAttributesExW\n");
    return GetFileAttributesExW(lpFileName,fInfoLevelId,lpFileInformation);
}

BOOL __stdcall MyGetFileInformationByHandle(
  HANDLE                       hFile,
  LPBY_HANDLE_FILE_INFORMATION lpFileInformation
)
{
    logger("GetFileInformationByHandle\n");
    return GetFileInformationByHandle(hFile,lpFileInformation);
}

BOOL __stdcall MyGetFileInformationByHandleEx(
  HANDLE                    hFile,
  FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
  LPVOID                    lpFileInformation,
  DWORD                     dwBufferSize
)
{
    logger("GetFileInformationByHandleEx\n");
    return GetFileInformationByHandleEx(hFile,FileInformationClass,lpFileInformation,dwBufferSize);
}

DWORD __stdcall MyGetFileSize(
  HANDLE  hFile,
  LPDWORD lpFileSizeHigh
)
{
    logger("GetFileSize\n");
    return GetFileSize(hFile,lpFileSizeHigh);
}

BOOL __stdcall MyGetFileSizeEx(
  HANDLE         hFile,
  PLARGE_INTEGER lpFileSize
)
{
    logger("GetFileSizeEx\n");
    return GetFileSizeEx(hFile,lpFileSize);
}

DWORD __stdcall MyGetFileType(
  HANDLE hFile
)
{
    logger("GetFileType\n");
    return GetFileType(hFile);
}

DWORD __stdcall MyGetShortPathNameA(
  LPCSTR lpszLongPath,
  LPSTR  lpszShortPath,
  DWORD  cchBuffer
)
{
    logger("GetShortPathNameA\n");
    return GetShortPathNameA(lpszLongPath,lpszShortPath,cchBuffer);
}

DWORD __stdcall MyGetShortPathNameW(
  LPCWSTR lpszLongPath,
  LPWSTR  lpszShortPath,
  DWORD   cchBuffer
)
{
    logger("GetShortPathNameW\n");
    return GetShortPathNameW(lpszLongPath,lpszShortPath,cchBuffer);
}

UINT __stdcall MyGetSystemDirectoryA(
  LPSTR lpBuffer,
  UINT  uSize
)
{
    logger("GetSystemDirectoryA\n");
    return GetSystemDirectoryA(lpBuffer,uSize);
}

UINT __stdcall MyGetSystemDirectoryW(
  LPWSTR lpBuffer,
  UINT   uSize
)
{
    logger("GetSystemDirectoryW\n");
    return GetSystemDirectoryW(lpBuffer,uSize);
}

DWORD __stdcall MyGetTempPathA(
  DWORD nBufferLength,
  LPSTR lpBuffer
)
{
    logger("GetTempPathA\n");
    return GetTempPathA(nBufferLength,lpBuffer);
}

DWORD __stdcall MyGetTempPathW(
  DWORD  nBufferLength,
  LPWSTR lpBuffer
)
{
    logger("GetTempPathW\n");
    return GetTempPathW(nBufferLength,lpBuffer);
}

BOOL __stdcall MyGetVolumeNameForVolumeMountPointA(
  LPCSTR lpszVolumeMountPoint,
  LPSTR  lpszVolumeName,
  DWORD  cchBufferLength
)
{
    logger("GetVolumeNameForVolumeMountPointA\n");
    return GetVolumeNameForVolumeMountPointA(lpszVolumeMountPoint,lpszVolumeName,cchBufferLength);
}

BOOL __stdcall MyGetVolumeNameForVolumeMountPointW(
  LPCWSTR lpszVolumeMountPoint,
  LPWSTR  lpszVolumeName,
  DWORD   cchBufferLength
)
{
    logger("GetVolumeNameForVolumeMountPointW\n");
    return GetVolumeNameForVolumeMountPointW(lpszVolumeMountPoint,lpszVolumeName,cchBufferLength);
}

BOOL __stdcall MyGetVolumePathNameA(
  LPCSTR lpszFileName,
  LPSTR  lpszVolumePathName,
  DWORD  cchBufferLength
)
{
    logger("GetVolumePathNameA\n");
    return GetVolumePathNameA(lpszFileName,lpszVolumePathName,cchBufferLength);
}

BOOL __stdcall MyGetVolumePathNameW(
  LPCWSTR lpszFileName,
  LPWSTR  lpszVolumePathName,
  DWORD   cchBufferLength
)
{
    logger("GetVolumePathNameW\n");
    return GetVolumePathNameW(lpszFileName,lpszVolumePathName,cchBufferLength);
}

BOOL __stdcall MyGetVolumePathNamesForVolumeNameA(
  LPCSTR lpszVolumeName,
  LPCH   lpszVolumePathNames,
  DWORD  cchBufferLength,
  PDWORD lpcchReturnLength
)
{
    logger("GetVolumePathNamesForVolumeNameA\n");
    return GetVolumePathNamesForVolumeNameA(lpszVolumeName,lpszVolumePathNames,cchBufferLength,lpcchReturnLength);
}

BOOL __stdcall MyGetVolumePathNamesForVolumeNameW(
  LPCWSTR lpszVolumeName,
  LPWCH   lpszVolumePathNames,
  DWORD   cchBufferLength,
  PDWORD  lpcchReturnLength
)
{
    logger("GetVolumePathNamesForVolumeNameW\n");
    return GetVolumePathNamesForVolumeNameW(lpszVolumeName,lpszVolumePathNames,cchBufferLength,lpcchReturnLength);
}

BOOL __stdcall MyMoveFileWithProgressA(
  LPCSTR             lpExistingFileName,
  LPCSTR             lpNewFileName,
  LPPROGRESS_ROUTINE lpProgressRoutine,
  LPVOID             lpData,
  DWORD              dwFlags
)
{
    logger("MoveFileWithProgressA\n");
    return MoveFileWithProgressA(lpExistingFileName,lpNewFileName,lpProgressRoutine,lpData,dwFlags);
}

BOOL __stdcall MyMoveFileWithProgressW(
  LPCWSTR            lpExistingFileName,
  LPCWSTR            lpNewFileName,
  LPPROGRESS_ROUTINE lpProgressRoutine,
  LPVOID             lpData,
  DWORD              dwFlags
)
{
    logger("MoveFileWithProgressW\n");
    return MoveFileWithProgressW(lpExistingFileName,lpNewFileName,lpProgressRoutine,lpData,dwFlags);
}

BOOL __stdcall MyRemoveDirectoryA(
  LPCSTR lpPathName
)
{
    logger("RemoveDirectoryA\n");
    return RemoveDirectoryA(lpPathName);
}

BOOL __stdcall MyRemoveDirectoryW(
  LPCWSTR lpPathName
)
{
    logger("RemoveDirectoryW\n");
    return RemoveDirectoryW(lpPathName);
}

DWORD __stdcall MySearchPathA(
  LPCSTR lpPath,
  LPCSTR lpFileName,
  LPCSTR lpExtension,
  DWORD  nBufferLength,
  LPSTR  lpBuffer,
  LPSTR  *lpFilePart
)
{
    logger("SearchPathA\n");
    return SearchPathA(lpPath,lpFileName,lpExtension,nBufferLength,lpBuffer,lpFilePart);
}

DWORD __stdcall MySearchPathW(
  LPCWSTR lpPath,
  LPCWSTR lpFileName,
  LPCWSTR lpExtension,
  DWORD   nBufferLength,
  LPWSTR  lpBuffer,
  LPWSTR  *lpFilePart
)
{
    logger("SearchPathW\n");
    return SearchPathW(lpPath,lpFileName,lpExtension,nBufferLength,lpBuffer,lpFilePart);
}

DNS_STATUS __stdcall MyDnsQuery_A(
  PCSTR       pszName,
  WORD        wType,
  DWORD       Options,
  PVOID       pExtra,
  PDNS_RECORD *ppQueryResults,
  PVOID       *pReserved
)
{
	logger("DnsQuery_A\n");
	return DnsQuery_A(pszName,wType,Options,pExtra,ppQueryResults,pReserved);
}

DNS_STATUS __stdcall MyDnsQuery_UTF8(
  PCSTR       pszName,
  WORD        wType,
  DWORD       Options,
  PVOID       pExtra,
  PDNS_RECORD *ppQueryResults,
  PVOID       *pReserved
)
{
    logger("DnsQuery_UTF8\n");
    return DnsQuery_UTF8(pszName,wType,Options,pExtra,ppQueryResults,pReserved);
}

DNS_STATUS __stdcall MyDnsQuery_W(
  PCWSTR      pszName,
  WORD        wType,
  DWORD       Options,
  PVOID       pExtra,
  PDNS_RECORD *ppQueryResults,
  PVOID       *pReserved
)
{
    logger("DnsQuery_W\n");
    return DnsQuery_W(pszName,wType,Options,pExtra,ppQueryResults,pReserved);
}

BOOL __stdcall MyDeleteUrlCacheEntryA(
  LPCSTR lpszUrlName
)
{
    logger("DeleteUrlCacheEntryA\n");
    return DeleteUrlCacheEntryA(lpszUrlName);
}

BOOL __stdcall MyDeleteUrlCacheEntryW(
  LPCWSTR lpszUrlName
)
{
    logger("DeleteUrlCacheEntryW\n");
    return DeleteUrlCacheEntryW(lpszUrlName);
}

void __stdcall MyHttpOpenRequestA(
  HINTERNET hConnect,
  LPCSTR    lpszVerb,
  LPCSTR    lpszObjectName,
  LPCSTR    lpszVersion,
  LPCSTR    lpszReferrer,
  LPCSTR    *lplpszAcceptTypes,
  DWORD     dwFlags,
  DWORD_PTR dwContext
)
{
    logger("HttpOpenRequestA\n");
    HttpOpenRequestA(hConnect,lpszVerb,lpszObjectName,lpszVersion,lpszReferrer,lplpszAcceptTypes,dwFlags,dwContext);
}

void __stdcall MyHttpOpenRequestW(
  HINTERNET hConnect,
  LPCWSTR   lpszVerb,
  LPCWSTR   lpszObjectName,
  LPCWSTR   lpszVersion,
  LPCWSTR   lpszReferrer,
  LPCWSTR   *lplpszAcceptTypes,
  DWORD     dwFlags,
  DWORD_PTR dwContext
)
{
    logger("HttpOpenRequestW\n");
    HttpOpenRequestW(hConnect,lpszVerb,lpszObjectName,lpszVersion,lpszReferrer,lplpszAcceptTypes,dwFlags,dwContext);
}

BOOL __stdcall MyHttpQueryInfoA(
  HINTERNET hRequest,
  DWORD     dwInfoLevel,
  LPVOID    lpBuffer,
  LPDWORD   lpdwBufferLength,
  LPDWORD   lpdwIndex
)
{
    logger("HttpQueryInfoA\n");
    return HttpQueryInfoA(hRequest,dwInfoLevel,lpBuffer,lpdwBufferLength,lpdwIndex);
}

BOOL __stdcall MyHttpSendRequestA(
  HINTERNET hRequest,
  LPCSTR    lpszHeaders,
  DWORD     dwHeadersLength,
  LPVOID    lpOptional,
  DWORD     dwOptionalLength
)
{
    logger("HttpSendRequestA\n");
    return HttpSendRequestA(hRequest,lpszHeaders,dwHeadersLength,lpOptional,dwOptionalLength);
}

BOOL __stdcall MyHttpSendRequestW(
  HINTERNET hRequest,
  LPCWSTR   lpszHeaders,
  DWORD     dwHeadersLength,
  LPVOID    lpOptional,
  DWORD     dwOptionalLength
)
{
    logger("HttpSendRequestW\n");
    return HttpSendRequestW(hRequest,lpszHeaders,dwHeadersLength,lpOptional,dwOptionalLength);
}

void __stdcall MyInternetConnectA(
  HINTERNET     hInternet,
  LPCSTR        lpszServerName,
  INTERNET_PORT nServerPort,
  LPCSTR        lpszUserName,
  LPCSTR        lpszPassword,
  DWORD         dwService,
  DWORD         dwFlags,
  DWORD_PTR     dwContext
)
{
    logger("InternetConnectA\n");
    InternetConnectA(hInternet,lpszServerName,nServerPort,lpszUserName,lpszPassword,dwService,dwFlags,dwContext);
}

void __stdcall MyInternetConnectW(
  HINTERNET     hInternet,
  LPCWSTR       lpszServerName,
  INTERNET_PORT nServerPort,
  LPCWSTR       lpszUserName,
  LPCWSTR       lpszPassword,
  DWORD         dwService,
  DWORD         dwFlags,
  DWORD_PTR     dwContext
)
{
    logger("InternetConnectW\n");
    InternetConnectW(hInternet,lpszServerName,nServerPort,lpszUserName,lpszPassword,dwService,dwFlags,dwContext);
}

BOOL __stdcall MyInternetGetConnectedState(
  LPDWORD lpdwFlags,
  DWORD   dwReserved
)
{
    logger("InternetGetConnectedState\n");
    return InternetGetConnectedState(lpdwFlags,dwReserved);
}

BOOL __stdcall MyInternetGetConnectedStateExA(
  LPDWORD lpdwFlags,
  LPSTR   lpszConnectionName,
  DWORD   cchNameLen,
  DWORD   dwReserved
)
{
    logger("InternetGetConnectedStateExA\n");
    return InternetGetConnectedStateExA(lpdwFlags,lpszConnectionName,cchNameLen,dwReserved);
}

BOOL __stdcall MyInternetGetConnectedStateExW(
  LPDWORD lpdwFlags,
  LPWSTR  lpszConnectionName,
  DWORD   cchNameLen,
  DWORD   dwReserved
)
{
    logger("InternetGetConnectedStateExW\n");
    return InternetGetConnectedStateExW(lpdwFlags,lpszConnectionName,cchNameLen,dwReserved);
}

void __stdcall MyInternetOpenA(
  LPCSTR lpszAgent,
  DWORD  dwAccessType,
  LPCSTR lpszProxy,
  LPCSTR lpszProxyBypass,
  DWORD  dwFlags
)
{
    logger("InternetOpenA\n");
    InternetOpenA(lpszAgent,dwAccessType,lpszProxy,lpszProxyBypass,dwFlags);
}

void __stdcall MyInternetOpenW(
  LPCWSTR lpszAgent,
  DWORD   dwAccessType,
  LPCWSTR lpszProxy,
  LPCWSTR lpszProxyBypass,
  DWORD   dwFlags
)
{
    logger("InternetOpenW\n");
    InternetOpenW(lpszAgent,dwAccessType,lpszProxy,lpszProxyBypass,dwFlags);
}

void __stdcall MyInternetOpenUrlA(
  HINTERNET hInternet,
  LPCSTR    lpszUrl,
  LPCSTR    lpszHeaders,
  DWORD     dwHeadersLength,
  DWORD     dwFlags,
  DWORD_PTR dwContext
)
{
    logger("InternetOpenUrlA\n");
    InternetOpenUrlA(hInternet,lpszUrl,lpszHeaders,dwHeadersLength,dwFlags,dwContext);
}

void __stdcall MyInternetOpenUrlW(
  HINTERNET hInternet,
  LPCWSTR   lpszUrl,
  LPCWSTR   lpszHeaders,
  DWORD     dwHeadersLength,
  DWORD     dwFlags,
  DWORD_PTR dwContext
)
{
    logger("InternetOpenUrlW\n");
    InternetOpenUrlW(hInternet,lpszUrl,lpszHeaders,dwHeadersLength,dwFlags,dwContext);
}

BOOL __stdcall MyInternetReadFile(
  HINTERNET hFile,
  LPVOID    lpBuffer,
  DWORD     dwNumberOfBytesToRead,
  LPDWORD   lpdwNumberOfBytesRead
)
{
    logger("InternetReadFile\n");
    return InternetReadFile(hFile,lpBuffer,dwNumberOfBytesToRead,lpdwNumberOfBytesRead);
}

BOOL __stdcall MyInternetWriteFile(
  HINTERNET hFile,
  LPCVOID   lpBuffer,
  DWORD     dwNumberOfBytesToWrite,
  LPDWORD   lpdwNumberOfBytesWritten
)
{
    logger("InternetWriteFile\n");
    return InternetWriteFile(hFile,lpBuffer,dwNumberOfBytesToWrite,lpdwNumberOfBytesWritten);
}

SOCKET __stdcall MyWSAAccept(
  SOCKET          s,
  sockaddr        *addr,
  LPINT           addrlen,
  LPCONDITIONPROC lpfnCondition,
  DWORD_PTR       dwCallbackData
)
{
	logger("WSAAccept\n");
	return WSAAccept(s,addr,addrlen,lpfnCondition,dwCallbackData);
}

int __stdcall MyWSAConnect(
  SOCKET         s,
  const sockaddr *name,
  int            namelen,
  LPWSABUF       lpCallerData,
  LPWSABUF       lpCalleeData,
  LPQOS          lpSQOS,
  LPQOS          lpGQOS
)
{
    logger("WSAConnect\n");
    return WSAConnect(s,name,namelen,lpCallerData,lpCalleeData,lpSQOS,lpGQOS);
}

int __stdcall MyWSARecv(
  SOCKET                             s,
  LPWSABUF                           lpBuffers,
  DWORD                              dwBufferCount,
  LPDWORD                            lpNumberOfBytesRecvd,
  LPDWORD                            lpFlags,
  LPWSAOVERLAPPED                    lpOverlapped,
  LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
)
{
    logger("WSARecv\n");
    return WSARecv(s,lpBuffers,dwBufferCount,lpNumberOfBytesRecvd,lpFlags,lpOverlapped,lpCompletionRoutine);
}

int __stdcall MyWSARecvFrom(
  SOCKET                             s,
  LPWSABUF                           lpBuffers,
  DWORD                              dwBufferCount,
  LPDWORD                            lpNumberOfBytesRecvd,
  LPDWORD                            lpFlags,
  sockaddr                           *lpFrom,
  LPINT                              lpFromlen,
  LPWSAOVERLAPPED                    lpOverlapped,
  LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
)
{
    logger("WSARecvFrom\n");
    return WSARecvFrom(s,lpBuffers,dwBufferCount,lpNumberOfBytesRecvd,lpFlags,lpFrom,lpFromlen,lpOverlapped,lpCompletionRoutine);
}

int __stdcall MyWSASend(
  SOCKET                             s,
  LPWSABUF                           lpBuffers,
  DWORD                              dwBufferCount,
  LPDWORD                            lpNumberOfBytesSent,
  DWORD                              dwFlags,
  LPWSAOVERLAPPED                    lpOverlapped,
  LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
)
{
    logger("WSASend\n");
    return WSASend(s,lpBuffers,dwBufferCount,lpNumberOfBytesSent,dwFlags,lpOverlapped,lpCompletionRoutine);
}

int __stdcall MyWSASendTo(
  SOCKET                             s,
  LPWSABUF                           lpBuffers,
  DWORD                              dwBufferCount,
  LPDWORD                            lpNumberOfBytesSent,
  DWORD                              dwFlags,
  const sockaddr                     *lpTo,
  int                                iTolen,
  LPWSAOVERLAPPED                    lpOverlapped,
  LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
)
{
    logger("WSASendTo\n");
    return WSASendTo(s,lpBuffers,dwBufferCount,lpNumberOfBytesSent,dwFlags,lpTo,iTolen,lpOverlapped,lpCompletionRoutine);
}

SOCKET __stdcall MyWSASocketA(
  int                 af,
  int                 type,
  int                 protocol,
  LPWSAPROTOCOL_INFOA lpProtocolInfo,
  GROUP               g,
  DWORD               dwFlags
)
{
    logger("WSASocketA\n");
    return WSASocketA(af,type,protocol,lpProtocolInfo,g,dwFlags);
}

SOCKET __stdcall MyWSASocketW(
  int                 af,
  int                 type,
  int                 protocol,
  LPWSAPROTOCOL_INFOW lpProtocolInfo,
  GROUP               g,
  DWORD               dwFlags
)
{
    logger("WSASocketW\n");
    return WSASocketW(af,type,protocol,lpProtocolInfo,g,dwFlags);
}

int __stdcall MyWSAStartup(
  WORD      wVersionRequested,
  LPWSADATA lpWSAData
)
{
    logger("WSAStartup\n");
    return WSAStartup(wVersionRequested,lpWSAData);
}

SOCKET __stdcall Myaccept(
  SOCKET   s,
  sockaddr *addr,
  int      *addrlen
)
{
    logger("accept\n");
    return accept(s,addr,addrlen);
}

int __stdcall Mybind(
  SOCKET         s,
  const sockaddr *addr,
  int            namelen
)
{
    logger("bind\n");
    return bind(s,addr,namelen);
}

int __stdcall Myconnect(
  SOCKET         s,
  const sockaddr *name,
  int            namelen
)
{
    logger("connect\n");
    return connect(s,name,namelen);
}

INT __stdcall Mygetaddrinfo(
  PCSTR           pNodeName,
  PCSTR           pServiceName,
  const ADDRINFOA *pHints,
  PADDRINFOA      *ppResult
)
{
    logger("getaddrinfo\n");
    return getaddrinfo(pNodeName,pServiceName,pHints,ppResult);
}

int __stdcall Mygetsockname(
  SOCKET   s,
  sockaddr *name,
  int      *namelen
)
{
    logger("getsockname\n");
    return getsockname(s,name,namelen);
}

int __stdcall Myioctlsocket(
  SOCKET s,
  long   cmd,
  u_long *argp
)
{
    logger("ioctlsocket\n");
    return ioctlsocket(s,cmd,argp);
}

int __stdcall Mylisten(
  SOCKET s,
  int    backlog
)
{
    logger("listen\n");
    return listen(s,backlog);
}

int __stdcall Myrecv(
  SOCKET s,
  char   *buf,
  int    len,
  int    flags
)
{
    logger("recv\n");
    return recv(s,buf,len,flags);
}

int __stdcall Myrecvfrom(
  SOCKET   s,
  char     *buf,
  int      len,
  int      flags,
  sockaddr *from,
  int      *fromlen
)
{
    logger("recvfrom\n");
    return recvfrom(s,buf,len,flags,from,fromlen);
}

int __stdcall Myselect(
  int           nfds,
  fd_set        *readfds,
  fd_set        *writefds,
  fd_set        *exceptfds,
  const timeval *timeout
)
{
    logger("select\n");
    return select(nfds,readfds,writefds,exceptfds,timeout);
}

int __stdcall Mysend(
  SOCKET     s,
  const char *buf,
  int        len,
  int        flags
)
{
    logger("send\n");
    return send(s,buf,len,flags);
}

int __stdcall Mysendto(
  SOCKET         s,
  const char     *buf,
  int            len,
  int            flags,
  const sockaddr *to,
  int            tolen
)
{
    logger("sendto\n");
    return sendto(s,buf,len,flags,to,tolen);
}

SOCKET __stdcall Mysocket(
  int af,
  int type,
  int protocol
)
{
    logger("socket\n");
    return socket(af,type,protocol);
}

HANDLE __stdcall MyOpenProcess(
  DWORD dwDesiredAccess,
  BOOL  bInheritHandle,
  DWORD dwProcessId
)
{
    logger("OpenProcess\n");
    return OpenProcess(dwDesiredAccess,bInheritHandle,dwProcessId);
}

HANDLE __stdcall MyOpenThread(
  DWORD dwDesiredAccess,
  BOOL  bInheritHandle,
  DWORD dwThreadId
){
    logger("OpenThread\n");
    return OpenThread(dwDesiredAccess, bInheritHandle, dwThreadId);
}

BOOL __stdcall MyReadFile(
  HANDLE       hFile,
  LPVOID       lpBuffer,
  DWORD        nNumberOfBytesToRead,
  LPDWORD      lpNumberOfBytesRead,
  LPOVERLAPPED lpOverlapped
)
{
    logger("ReadFile\n");
    return ReadFile(hFile,lpBuffer,nNumberOfBytesToRead,lpNumberOfBytesRead,lpOverlapped);
}

BOOL __stdcall MyWriteFile(
  HANDLE       hFile,
  LPCVOID      lpBuffer,
  DWORD        nNumberOfBytesToWrite,
  LPDWORD      lpNumberOfBytesWritten,
  LPOVERLAPPED lpOverlapped
)
{
    logger("WriteFile\n");
    return WriteFile(hFile,lpBuffer,nNumberOfBytesToWrite,lpNumberOfBytesWritten,lpOverlapped);
}

HFILE __stdcall MyOpenFile(
  LPCSTR     lpFileName,
  LPOFSTRUCT lpReOpenBuff,
  UINT       uStyle
){
    logger("OpenFile\n");
    return OpenFile(lpFileName,lpReOpenBuff,uStyle);
}


// Hook struct definition
#define MAX_STR 512
#define MAX_HOOKS 185
typedef struct _myhook{
    char lib[MAX_STR];	// library target function is placed
    char func[MAX_STR]; // targeted function
    void *hook_addr;	// hook function
}myhook,*pmyhook;

// hook handlers
HOOK_TRACE_INFO hooks[MAX_HOOKS];

// Hook Functions
void hook()
{
	// What will be hooked by which function
	myhook hooklist[MAX_HOOKS] = {
		{"User32", "MessageBoxA", MyMessageBoxA},
		{"Kernel32", "IsDebuggerPresent", MyIsDebuggerPresent},
		{"Advapi32","CryptEncrypt",MyCryptEncrypt},
		{"Advapi32","CryptDecrypt",MyCryptDecrypt},
		{"Crypt32","CertControlStore",MyCertControlStore},
		{"Crypt32","CertCreateCertificateContext",MyCertCreateCertificateContext},
		{"Crypt32","CertOpenStore",MyCertOpenStore},
		{"Crypt32","CertOpenSystemStoreA",MyCertOpenSystemStoreA},
		{"Crypt32","CertOpenSystemStoreW",MyCertOpenSystemStoreW},
		{"Advapi32","CryptAcquireContextA",MyCryptAcquireContextA},
		{"Advapi32","CryptAcquireContextW",MyCryptAcquireContextW},
		{"Advapi32","CryptCreateHash",MyCryptCreateHash},
		{"Advapi32","CryptExportKey",MyCryptExportKey},
		{"Advapi32","CryptGenKey",MyCryptGenKey},
		{"Advapi32","CryptHashData",MyCryptHashData},
		{"Crypt32","CryptDecodeMessage",MyCryptDecodeMessage},
		{"Crypt32","CryptDecodeObjectEx",MyCryptDecodeObjectEx},
		{"Crypt32","CryptDecryptMessage",MyCryptDecryptMessage},
		{"Crypt32","CryptEncryptMessage",MyCryptEncryptMessage},
		{"Crypt32","CryptHashMessage",MyCryptHashMessage},
		{"Crypt32","CryptProtectData",MyCryptProtectData},
		{"Crypt32","CryptProtectMemory",MyCryptProtectMemory},
		{"Crypt32","CryptUnprotectData",MyCryptUnprotectData},
		{"Crypt32","CryptUnprotectMemory",MyCryptUnprotectMemory},
		{"Netapi32","NetGetJoinInformation",MyNetGetJoinInformation},
		{"Netapi32","NetShareEnum",MyNetShareEnum},
		{"Netapi32","NetUserGetInfo",MyNetUserGetInfo},
		{"Netapi32","NetUserGetLocalGroups",MyNetUserGetLocalGroups},
		{"Kernel32","FindResourceA",MyFindResourceA},
		{"Kernel32","FindResourceW",MyFindResourceW},
		{"Kernel32","FindResourceExA",MyFindResourceExA},
		{"Kernel32","FindResourceExW",MyFindResourceExW},
		{"Kernel32","LoadResource",MyLoadResource},
		{"Kernel32","GetLocalTime",MyGetLocalTime},
		{"Kernel32","GetSystemTime",MyGetSystemTime},
		{"Kernel32","GetSystemTimeAsFileTime",MyGetSystemTimeAsFileTime},
		{"Kernel32","GetTickCount",MyGetTickCount},
		{"AdvApi32","ControlService",MyControlService},
		{"Advapi32","CreateServiceA",MyCreateServiceA},
		{"Advapi32","CreateServiceW",MyCreateServiceW},
		{"Advapi32","DeleteService",MyDeleteService},
		{"Advapi32","EnumServicesStatusA",MyEnumServicesStatusA},
		{"Advapi32","EnumServicesStatusW",MyEnumServicesStatusW},
		{"Advapi32","OpenSCManagerA",MyOpenSCManagerA},
		{"Advapi32","OpenSCManagerW",MyOpenSCManagerW},
		{"Advapi32","OpenServiceA",MyOpenServiceA},
		{"Advapi32","OpenServiceW",MyOpenServiceW},
		{"Advapi32","StartServiceA",MyStartServiceA},
		{"Advapi32","StartServiceW",MyStartServiceW},
		{"Advapi32","LookupPrivilegeValueA",MyLookupPrivilegeValueA},
		{"Advapi32","LookupPrivilegeValueW",MyLookupPrivilegeValueW},
		{"Kernel32","GetNativeSystemInfo",MyGetNativeSystemInfo},
		{"Kernel32","GetSystemInfo",MyGetSystemInfo},
		{"User32","ExitWindowsEx",MyExitWindowsEx},
		{"User32","GetAsyncKeyState",MyGetAsyncKeyState},
		{"User32","GetKeyState",MyGetKeyState},
		{"User32","GetKeyboardState",MyGetKeyboardState},
		{"User32","SetWindowsHookExA",MySetWindowsHookExA},
		{"User32","SetWindowsHookExW",MySetWindowsHookExW},
		{"User32","UnhookWindowsHookEx",MyUnhookWindowsHookEx},
		{"Kernel32","CreateProcessA",MyCreateProcessA},
		{"Kernel32","CreateProcessW",MyCreateProcessW},
		{"Kernel32","CreateRemoteThread",MyCreateRemoteThread},
		{"Kernel32","CreateThread",MyCreateThread},
		{"Kernel32","CreateToolhelp32Snapshot",MyCreateToolhelp32Snapshot},
		{"Kernel32","ReadProcessMemory",MyReadProcessMemory},
		{"Kernel32","WriteProcessMemory",MyWriteProcessMemory},
		{"Shell32","ShellExecuteExA",MyShellExecuteExA},
		{"Shell32","ShellExecuteExW",MyShellExecuteExW},
		{"Advapi32","RegCreateKeyExA",MyRegCreateKeyExA},
		{"Advapi32","RegCreateKeyExW",MyRegCreateKeyExW},
		{"Advapi32","RegDeleteKeyA",MyRegDeleteKeyA},
		{"Advapi32","RegDeleteKeyW",MyRegDeleteKeyW},
		{"Advapi32","RegDeleteValueA",MyRegDeleteValueA},
		{"Advapi32","RegDeleteValueW",MyRegDeleteValueW},
		{"Advapi32","RegOpenKeyExA",MyRegOpenKeyExA},
		{"Advapi32","RegOpenKeyExW",MyRegOpenKeyExW},
		{"Advapi32","RegQueryInfoKeyA",MyRegQueryInfoKeyA},
		{"Advapi32","RegQueryInfoKeyW",MyRegQueryInfoKeyW},
		{"Advapi32","RegQueryValueExA",MyRegQueryValueExA},
		{"Advapi32","RegQueryValueExW",MyRegQueryValueExW},
		{"Advapi32","RegSetValueExA",MyRegSetValueExA},
		{"Advapi32","RegSetValueExW",MyRegSetValueExW},
		{"Advapi32","GetUserNameA",MyGetUserNameA},
		{"Advapi32","GetUserNameW",MyGetUserNameW},
		{"Advapi32","LookupAccountSidA",MyLookupAccountSidA},
		{"Advapi32","LookupAccountSidW",MyLookupAccountSidW},
		{"Kernel32","GetComputerNameA",MyGetComputerNameA},
		{"Kernel32","GetComputerNameW",MyGetComputerNameW},
		{"Kernel32","GetDiskFreeSpaceExA",MyGetDiskFreeSpaceExA},
		{"Kernel32","GetDiskFreeSpaceExW",MyGetDiskFreeSpaceExW},
		{"Kernel32","GetDiskFreeSpaceA",MyGetDiskFreeSpaceA},
		{"Kernel32","GetDiskFreeSpaceW",MyGetDiskFreeSpaceW},
		{"Kernel32","GetTimeZoneInformation",MyGetTimeZoneInformation},
		{"Shell32","SHGetFolderPathA",MySHGetFolderPathA},
		{"Shell32","SHGetFolderPathW",MySHGetFolderPathW},
		{"Shell32","SHGetSpecialFolderLocation",MySHGetSpecialFolderLocation},
		{"User32","GetCursorPos",MyGetCursorPos},
		{"User32","GetSystemMetrics",MyGetSystemMetrics},
		{"Kernel32","CopyFileA",MyCopyFileA},
		{"Kernel32","CopyFileW",MyCopyFileW},
		{"Kernel32","CopyFileExA",MyCopyFileExA},
		{"Kernel32","CopyFileExW",MyCopyFileExW},
		{"Kernel32","CreateDirectoryA",MyCreateDirectoryA},
		{"Kernel32","CreateDirectoryW",MyCreateDirectoryW},
		{"Kernel32","CreateDirectoryExA",MyCreateDirectoryExA},
		{"Kernel32","CreateDirectoryExW",MyCreateDirectoryExW},
		{"Kernel32","DeleteFileA",MyDeleteFileA},
		{"Kernel32","DeleteFileW",MyDeleteFileW},
		{"Kernel32","DeviceIoControl",MyDeviceIoControl},
		{"Kernel32","GetFileAttributesA",MyGetFileAttributesA},
		{"Kernel32","GetFileAttributesW",MyGetFileAttributesW},
		{"Kernel32","GetFileAttributesExA",MyGetFileAttributesExA},
		{"Kernel32","GetFileAttributesExW",MyGetFileAttributesExW},
		{"Kernel32","GetFileInformationByHandle",MyGetFileInformationByHandle},
		{"Kernel32","GetFileInformationByHandleEx",MyGetFileInformationByHandleEx},
		{"Kernel32","GetFileSize",MyGetFileSize},
		{"Kernel32","GetFileSizeEx",MyGetFileSizeEx},
		{"Kernel32","GetFileType",MyGetFileType},
		{"Kernel32","GetShortPathNameA",MyGetShortPathNameA},
		{"Kernel32","GetShortPathNameW",MyGetShortPathNameW},
		{"Kernel32","GetSystemDirectoryA",MyGetSystemDirectoryA},
		{"Kernel32","GetSystemDirectoryW",MyGetSystemDirectoryW},
		{"Kernel32","GetTempPathA",MyGetTempPathA},
		{"Kernel32","GetTempPathW",MyGetTempPathW},
		{"Kernel32","GetVolumeNameForVolumeMountPointA",MyGetVolumeNameForVolumeMountPointA},
		{"Kernel32","GetVolumeNameForVolumeMountPointW",MyGetVolumeNameForVolumeMountPointW},
		{"Kernel32","GetVolumePathNameA",MyGetVolumePathNameA},
		{"Kernel32","GetVolumePathNameW",MyGetVolumePathNameW},
		{"Kernel32","GetVolumePathNamesForVolumeNameA",MyGetVolumePathNamesForVolumeNameA},
		{"Kernel32","GetVolumePathNamesForVolumeNameW",MyGetVolumePathNamesForVolumeNameW},
		{"Kernel32","MoveFileWithProgressA",MyMoveFileWithProgressA},
		{"Kernel32","MoveFileWithProgressW",MyMoveFileWithProgressW},
		{"Kernel32","RemoveDirectoryA",MyRemoveDirectoryA},
		{"Kernel32","RemoveDirectoryW",MyRemoveDirectoryW},
		{"Kernel32","SearchPathA",MySearchPathA},
		{"Kernel32","SearchPathW",MySearchPathW},
		{"Dnsapi","DnsQuery_A",MyDnsQuery_A},
		{"Dnsapi","DnsQuery_UTF8",MyDnsQuery_UTF8},
		{"Dnsapi","DnsQuery_W",MyDnsQuery_W},
		{"Wininet","DeleteUrlCacheEntryA",MyDeleteUrlCacheEntryA},
		{"Wininet","DeleteUrlCacheEntryW",MyDeleteUrlCacheEntryW},
		{"Wininet","HttpOpenRequestA",MyHttpOpenRequestA},
		{"Wininet","HttpOpenRequestW",MyHttpOpenRequestW},
		{"Wininet","HttpQueryInfoA",MyHttpQueryInfoA},
		{"Wininet","HttpSendRequestA",MyHttpSendRequestA},
		{"Wininet","HttpSendRequestW",MyHttpSendRequestW},
		{"Wininet","InternetConnectA",MyInternetConnectA},
		{"Wininet","InternetConnectW",MyInternetConnectW},
		{"Wininet","InternetGetConnectedState",MyInternetGetConnectedState},
		{"Wininet","InternetGetConnectedStateExA",MyInternetGetConnectedStateExA},
		{"Wininet","InternetGetConnectedStateExW",MyInternetGetConnectedStateExW},
		{"Wininet","InternetOpenA",MyInternetOpenA},
		{"Wininet","InternetOpenW",MyInternetOpenW},
		{"Wininet","InternetOpenUrlA",MyInternetOpenUrlA},
		{"Wininet","InternetOpenUrlW",MyInternetOpenUrlW},
        {"Wininet","InternetReadFile",MyInternetReadFile},
		{"Wininet","InternetWriteFile",MyInternetWriteFile},                                             
		{"Ws2_32","WSAAccept",MyWSAAccept},
		{"Ws2_32","WSAConnect",MyWSAConnect},
		{"Ws2_32","WSARecv",MyWSARecv},
		{"Ws2_32","WSARecvFrom",MyWSARecvFrom},
		{"Ws2_32","WSASend",MyWSASend},
		{"Ws2_32","WSASendTo",MyWSASendTo},
		{"Ws2_32","WSASocketA",MyWSASocketA},
		{"Ws2_32","WSASocketW",MyWSASocketW},
		{"Ws2_32","WSAStartup",MyWSAStartup},
		{"Ws2_32","accept",Myaccept},
		{"Ws2_32","bind",Mybind},
		{"Ws2_32","connect",Myconnect},
		{"Ws2_32","getaddrinfo",Mygetaddrinfo},
		{"Ws2_32","getsockname",Mygetsockname},
		{"Ws2_32","ioctlsocket",Myioctlsocket},
		{"Ws2_32","listen",Mylisten},
		{"Ws2_32","recv",Myrecv},
		{"Ws2_32","recvfrom",Myrecvfrom},
		{"Ws2_32","select",Myselect},
		{"Ws2_32","send",Mysend},
		{"Ws2_32","sendto",Mysendto},
		{"Ws2_32","socket",Mysocket},
		{"Kernel32","OpenProcess",MyOpenProcess},
		{"Kernel32","OpenThread",MyOpenThread},
		{"Kernel32","ReadFile",MyReadFile},
		{"Kernel32","WriteFile",MyWriteFile},
		{"Kernel32","OpenFile",MyOpenFile},

	};
	
	// Install al the hooks
	for(int i=0;i<MAX_HOOKS;i++)
	{
		// I'm not caring about returns bc this is a PoC
		LhInstallHook(
		GetProcAddress(GetModuleHandleA(hooklist[i].lib), hooklist[i].func), 
		hooklist[i].hook_addr, 
        NULL, 
        &hooks[i]);
	// After hook was set, we must enforce their usage
	// To hook all (current and future) threads, we must set inclusive and exclusive ACLs
	ULONG ACLEntries[1] = { 0 };
    LhSetInclusiveACL(ACLEntries, 1, &hooks[i]);
	LhSetExclusiveACL(ACLEntries, 0, &hooks[i]);
	}
}

// Remove Hooks
void unhook()
{
	// Remove all hooks at once
	LhUninstallAllHooks();
	// Block until original entry points are restored
	LhWaitForPendingRemovals();
}

// DLL Main
BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
					 )
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
		// seed rand for future use
		srand(time(NULL));
		// getpid for building the log file name
		mypid = GetCurrentProcessId();
		// build log file path
		char logfilepath[MAX_STR];
		sprintf(logfilepath,"C:\\Logs\\pid.%d.log",mypid);
		// open log file
		log = fopen(logfilepath,"w");
		// Create mutex to sync all threads
		ghMutex = CreateMutex( 
        NULL,              // default security attributes
        FALSE,             // initially not owned
        NULL); 
		// when attached to a process, hook all functions
		hook();
		// notify starting
		logger("Starting\n");
		break;
	case DLL_THREAD_ATTACH:
		// no need to do it on per-thread basis
		break;
	case DLL_THREAD_DETACH:
		break;
	case DLL_PROCESS_DETACH:
		// when detaching, unhook all
		// I'm expecting to detach only on process finish, but we never know
		unhook();
		// warn process finishing
		logger("Finishing\n");
		// stop logging
		fclose(log);
		break;
	}
	return TRUE;
}

