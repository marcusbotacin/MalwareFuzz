// Application to launch an executable with a DLL injected into it
// Developed by: Marcus Botacin

#include<stdio.h>
#include<Windows.h>

char *PROCESS_PATH;
char *DLL_PATH;

void launch()
{
	STARTUPINFOA si;
    PROCESS_INFORMATION pi;

    ZeroMemory( &si, sizeof(si) );
    si.cb = sizeof(si);
    ZeroMemory( &pi, sizeof(pi) );

    // Create process in suspended mode
	if( !CreateProcessA( NULL,   // No module name (use command line)
        PROCESS_PATH,        // Command line
        NULL,           // Process handle not inheritable
        NULL,           // Thread handle not inheritable
        FALSE,          // Set handle inheritance to FALSE
		CREATE_SUSPENDED,              // No creation flags
        NULL,           // Use parent's environment block
        NULL,           // Use parent's starting directory 
        &si,            // Pointer to STARTUPINFO structure
        &pi )           // Pointer to PROCESS_INFORMATION structure
    ) 
    {
        printf( "CreateProcess failed (%d).\n", GetLastError() );
        return;
    }

    // Inject the DLL via APC
	HMODULE hKernel32 = GetModuleHandleW(L"kernel32.dll");
	PAPCFUNC pLoadLibrary = (PAPCFUNC)GetProcAddress(hKernel32, "LoadLibraryA");
	SIZE_T dwSize = (strlen(DLL_PATH) + 1) * 2;
	SIZE_T written = 0;
	LPVOID lpAddress = VirtualAllocEx(pi.hProcess, NULL, dwSize, MEM_COMMIT, PAGE_READWRITE);
	WriteProcessMemory(pi.hProcess, lpAddress, DLL_PATH, dwSize, &written);
	QueueUserAPC(pLoadLibrary, pi.hThread, (ULONG_PTR)lpAddress);
    // Let process run again
	ResumeThread(pi.hThread);
    // Wait until child process exits.
    WaitForSingleObject( pi.hProcess, INFINITE );
}

int main(int argc, char *argv[])
{
	PROCESS_PATH = argv[1];
	DLL_PATH = argv[2];
	launch();
	return 0;
}
