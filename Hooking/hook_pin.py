import sys
import argparse
import requests
import bs4
import re
import logging
import pickle

api_name = sys.argv[1].lower()
url = 'https://docs.microsoft.com/api/search?search=%s&locale=en-us&scope=Desktop'
r =  requests.get(url % api_name)


_url = None
for res in r.json()['results']:
    look_for = "%s function" % api_name
    #print(look_for,res['title'].lower())
    if look_for in res['title'].lower():
        _url = res['url']
if _url is None:
    print("API function not found")
    sys.exit(0)
#_url = r.json()['results'][0]['url']
r = requests.get(_url)
s = bs4.BeautifulSoup(r.text,'html.parser')
#print(s)



f = s.find("code")
t = f.get_text()
print(t) 
print("----")

#args2 = ''.join([x.strip().split(" ")[-1] for x in t.split("(")[1].split(")")[0].strip().split("\n")])
#print([" ".join(x.split()) for x in t.split("(")[1].split(")")[0].strip().split("\n")])

#args2 = [x.strip().split(" ")[-2] for x in t.split("(")[1].split(")")[0].strip().split("\n")]
args2 = [" ".join(x.split()).strip().replace(",","").split(" ")[-2] for x in t.split("(")[1].split(")")[0].strip().split("\n")]
args_names2 = [x.strip().replace(",","").split(" ")[-1] for x in t.split("(")[1].split(")")[0].strip().split("\n")]
#print(args2)

ret = t.split(" ")[0]
#name = t.split(" ")[1].split("(")[0]
name = t.split("(")[0].split(" ")[-1]
args = t.split("(")[1].replace(";","")
#ooked = "%s __stdcall My%s(%s{\n\tfprintf(log,\"%s\\n\");\n\treturn %s(%s);\n}" % (ret,name,args,name,name,args2)
#rint hooked
print("rtn = RTN_FindByName(img, \"%s\");" % name)
print("if(RTN_Invalid() != rtn)\n{")
print("  PROTO proto%s = " % name)
print("    PROTO_Allocate (PIN_PARG(WINDOWS::%s)," % ret)
print("      CALLINGSTD_STDCALL,")
print("      \"%s\"," % name)
for arg in args2:
    print("      PIN_PARG(WINDOWS::%s)," % arg)
print("      PIN_PARG_END());\n")
print("  RTN_ReplaceSignature (rtn, (AFUNPTR)replacement_%s," % name)
print("    IARG_PROTOTYPE, proto%s," % name)
print("    IARG_ORIG_FUNCPTR,")
for i,arg in enumerate(args2):
    print("    IARG_FUNCARG_ENTRYPOINT_VALUE, %d," % i)
print("    IARG_CONTEXT,")
print("    IARG_END);")
print("  PROTO_Free (proto%s);" % name)
print("}")

print("--------")
print("WINDOWS::%s replacement_%s(AFUNPTR pfn%s," % (ret,name,name)),
for i,j in zip(args2,args_names2):
    print("WINDOWS::%s %s," % (i,j))
print("CONTEXT * ctxt)")
print("{")
print("  LOGGER::info_msg(\"%s:before\");" % name)
print("  WINDOWS::%s result;" % ret)
print("  if(RANDOM){")
print("    PIN_CallApplicationFunction( ctxt, PIN_ThreadId(),")
print("      CALLINGSTD_STDCALL, pfn%s, NULL," % name)
print("      PIN_PARG(WINDOWS::%s), &result," % ret)
for i,j in zip(args2,args_names2):
    print("      PIN_PARG(WINDOWS::%s), %s," % (i,j))
print("      PIN_PARG_END() );")
print("  }else{")
print("    result = FALSE;")
print("  }")
print("  LOGGER::info_msg(\"%s:after\");" % name)
print("  return result;")
print("}")


